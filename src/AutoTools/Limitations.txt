Current limitations

+ Configuration for (finding the location of) the utilities necessary for
  documentation production is not currently undertaken by configure. 

	- With the run-time requirements for deploying the documentation (web
	  server, indexing and search services), the provision of the Ravl
	  documentation will be considered as a separate, possible future,
	  sub-project. Web availability of the documentation somewhat obviates
	  this requirement.

+ Not all external libraries that can be used by Ravl are currently supported
  by the configure script.

	- Current state of development, currently unsupported libraries will be
	  added in due course, as priority dictates. In the meantime, manual
	  editing of the Config.Project file can allow the build to use an 
	  unsupported library (add it's identifier to RESOURCES; declare the
	  XXX_CFLAGS and XXX_LIBS variables; set the appropriate XXX_SUPPORT
	  variable and add the value of XXX_LIBS to an appropriate point in the
	  setting of the ALL_EXTERNAL_LIBS variable).

+ In addition to those libraries for which configure has not currently been
  written to support, the Firewire support libraries, along with the AVIfile
  library have had automatic support disabled.

	- This is due to the current versions of these libraries not being
	  compatible with the wrapper code in Ravl. This incompatability needs
	  addressing as part of the on-going maintenance of Ravl but from the
	  point of view of the AutoTools project, it may be beneficial to add
	  a means for configure to revision check the version of any library
	  that is available. In the meantime, should a compatible version of
	  these external libraries be available to the Ravl build, manual
	  editing of the Config.Project file (see above) will enable the use
	  of that compatible library.

+ The static version of the single library is not currently configured for
  selective linking (the MUSTLINK infrastructure needs incorporating) so client
  code must include the whole library (using the -Wl,--whole-archive switch).
  This results in unusably large binaries.

	- There are several ways to allow the removal of the “greedy” linking

		+ Include the MUSTLINKS in the user's link in much the same way
		  as currently 

		+ Force the linker to regard the relevant functions as
		  undefined via the -u switch. The user will have to add these
		  switches to their link-line.

		+ Replace the current mechanism with an initialisation function
		  the client code must call to enable the requisite part of
		  Ravl. The initialisation function will effectivly be a
		  renamed version of the current MUSTLINK function, so will
		  bring about the link organically.

	  The benefit of the last approach is that this optimises the amount of
	  code that will be linked into a binary. The downside is this requires
	  more end-user knowledge. For the first approaches, we can provided a
	  pro-forma link line/makefile for the user which addresses this
	  somewhat.

+ Shared version of single library currently still includes code for  dynamic
  loads of individual component libraries.

	- Rectification pending decision on future of MUSTLINKS

+ The configure script currently does not produce compiler options for Mac or
  BSD platforms. 
	- Current state of development, will be provided.

+ A build of the single libraries (shared or static) currently requires a 
  previous build of the corresponding version of the multiple libraries to
  have been carried out first. In fact, the build of the single shared library
  currently requires both the shared and the static individual libraries to
  have been built first.
	- In future, the build process should be optimised to obliviate the
	  need for this. However, this is best carried out after a decision
	  on the long-term direction over the use and provision of the
	  multiple/individual/traditional Ravl libraries.

+ RavlRawVidIO library has been omitted from the single libraries

	- Omitted owing to an issue made more apparent by the single library.
	  If the routines in this library are called to convert something other
	  than the specific format of video stream, the conversion produces a
	  fatal error. Where previously this library was only utilised in
	  applications where the correct fomat stream was being processed, 
	  with the single library, the possibility of hitting this problem is
	  greatly enhanced (and in fact occurs from one on the test programs).
	  Both the "voting" mechanism that causes this library's routines to
	  be erroneously called for inappropriate data and the error processing
	  of the routines themselves need improving to allow the reinsertion of
	  this library.

+ As the location of the root directory containing Ravl's data files is compiled
  into the library, installation of Ravl currently needs to re-build the single
  library to modify the encoded location from that of the staging location
  (under the build directory) to that of the fully installed files ($datadir).

       - Further development may be undertaken to improve this aspect: possible
	 solutions include the use of some form of runtime configuration
	 capability; some form of binary editing to deliver a modified library;
	 a runtime check based on where the library is being sourced.
         

+ No analysis has been undertaken on if/how the modifications required for this
  work influence other systems (such as any on-going use of AutoPort2) that
  take the Ravl source code as an input.

	- This will be carried out prior to committal of the first phase of
	  development.

+ There is currently no support for debug or (g)prof versions of the single
  library or executables (utils, tests or examples) built against them. 

	- These can be provided, balancing against complexity of the
	  top-level makefile which the end-users will want to understand.
	  If any of these libraries are provided, a naming convention will
	  need determining when we copy Ravl into the system directories.

+ Existing config.h files (Ravl/PatternRec/fann and Core/Base) need unifying
	- These may also require some processing in configure to fully
	  integrate them into the autotools process. This step need not form
	  part of the initial project.

+ Top level Makefile does not provide make clean or an install_check target
         - Work for any other targets will be undertaken as part of the same
           sub-project.  There is scope for a make strip target and there is 
           a consideration of how (and if) we provide debug and profiling
           versions of the Ravl libraries (do we install in different dirs
           or have different names).

+ There is no support in configure for locating the RCS commands
	 - SourceTools/CodeManager/RCSFile.cc will effectively loose support.
           The rcs.mk file has been removed from the source installation, the
           same may be applied to the relevant source code.
