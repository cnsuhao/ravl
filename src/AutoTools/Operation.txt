Operation

+ Basic operation is to load the source archive into a directory; move to that
  directory and issue the commands:

	./configure
	make
	# and optionally
	make check
	# followed by
	make install   # Once this part has been developed

  All built binaries and objects will be created in a tree under where the
  initial configure was run. Unlike the traditional QMake approach, no
  intermediate files are automatically created under /tmp. An available
  alternative is to separate out the build and source locations. Running
  configure in any directory will allow that directory to be used for the
  build; for example:

	mkdir ~/Source
	cd ~/Source
	tar -xvjf $ArchivePath
	mkdir /tmp/Build
	cd /tmp/Build
	~/Source/configure
	:
	:

  Again, this does not follow the original QMake behaviour of separating the
  build trees for finalised binaries and intermediate object files. However,
  it is not currently intended to preclude the traditional use of QMake once
  the configure stage has been completed. Once configure has created the new,
  combined configuration file (Config.Package), QMake should behave as
  previously.

+ Installation from the Git repository currently requires the manually copying
  the files: configure; config.guess; config.sub; install.sh and Makefile.in
  from the src/AutoTools directory into the root of the Ravl source directory.

+ Running configure will ensure the relevant compiler settings for the current
  platform are recorded in Config.Package alongside the location of all the
  required system tools. By default, configure creates a configuration where
  all libraries will be built without modification to their runtime library
  search path (it doesn't employ –rpath for the GNU compiler). This can be
  over-ruled via the –with-rpath command-line option. (option naming is up for
  discussion as rpath is GNU centric, and a better form may exist.
  Additionally, there is a question of whether a global switch provides
  sufficient flexibility).

+ Configure will attempt to locate all of the optional external libraries that
  Ravl can employ, enabling the functionality for all those it finds. Those it
  does not find are dropped (with a warning being outputted by the configure
  script).

+ A –with-<lib> configure switch is provided to actively request that library
  '<lib>' be used. If this request is made but the library is not found,
  configure will error out. The –with-<lib> switch may be set to 'N'; 'No';
  etc. to diasble any particular library from use. The swich –without-<lib> has
  the same effect.

+ If a third party library is not available in its usual location, or an
  alternative is to be used, configure provides the following switches:

	--with-<lib>-pkgconf
		This specifies the location of a pkg-config file that defines
		where the library and its header files reside.

	--with-<lib>-include
		For libraries that do not normally use pkg-config (and those
		alone), this switch provides a mechanism for declaring where
		the library's header file(s) can be found.

	--with-<lib>-library
		As for –with-<lib>-include, this is only provided for those
		libraries that do not normally support pkg-config. It allows
		declaration of both where the third party library may be found
		and also allows its name to be specified.

  Setting any of these switches implies –with-<lib> and thus mandates configure
  find and enable the library or error out.

+ Current makefiles assume the source is located in the structure ./src/Ravl/..
  structure, i.e. in a src directory below the root of where the source is
  loaded. If this approach is kept, it may be better incorporate this level in
  the source repository. Any user working from the source repository currently
  has to manually ensure the src directory is created and used to store the
  Ravl source

+ Pulling the Ravl source from the source repository, rather than a release
  archive, requires the user to create the configure script from its master
  source file. This is achieved by running the GNU Autotools utility (which 
  must therefore be installed on the target machine) autoreconf. This is run
  in the src/Ravl/AutoTools directory. The resultant file (configure) must then
  be copied to the top level directory of the Ravl source tree; at the same
  level as the src directory. In addition, the src/Ravl/AutoTools/config.guess
  and config.sub files must also be copied to the same directory.
	 
