Implementation Notes

+ configure is actually built from src/Ravl/AutoTools/configure.ac and
  includes src/Ravl/AutoTools/aclocal.m4. The configure.ac is unique to Ravl
  while aclocal.m4 is a copy of the current (as shipped by Ubuntu LTS version)
  GNU AutoTools support file. aclocal.m4 is under source control to provide a
  record of the exact version we use to build configure.

+ To build configure, issue the command autoreconf while in the script's source
  directory (src/Ravl/AutoTools). This will create both the required configure
  script (in the src/Ravl/AutoTools directory) and some intermediate files
  (under src/Ravl/AutoTools/autom4te.cache). The intermediate file directory
  and the created configure will need excuding from source control.

+ There is currently no make integration for creating configure. It must be
  built and manually copied to the top level. A set of build/copy instructions
  can be provided but must not form part of the default builds (as we wouldn't
  want to overwrite the release copy on a client install).

+ The configure.ac source file is the usual soup of shell script and M4 macros.
  It is marginally more intelligible than the finalised script.

+ The .Def files have been rewritten to a standard pattern. They now append a
  configure-set make variable to INCLUDES (xxx_CFLAGS) and  EXELIB (xxx_LIBS)
  where xxx indicated the external library the .Def file defines. At present,
  there is no guaranteed synchronisation between the configure –with_xxx flag;
  name of the .Def file; REQUIRES entry and xxx_LIBS/CFLAGS although this could
  be undertaken if thought benificial.

+ As with configure, the source for the top level Makefile can be found in the 
  src/Ravl/AutoTools directory. It is Makefile.in and is processed into
  Makefile when the user runs configure. 

+ Three helper utilities exist in the top level ravl directory and in the
  ravl/QMake directory. These three scripts, config.guess, config.sub and
  install.sh provide support functions to the configure script. They are
  preserved versions of members of the standard GNU AutoTools suite, put into
  source control to record the version used at any one time.

+ When run, configure generates Config.Project in the top level directory. This
  file receives all of the environemnt definitions needed by the Ravl build
  specifying the platform and machine specific configurations (including the
  location of the external libraries that can be utilised by Ravl). 

+ The original config.xxxx and config.local.xxxx configurations files have been
  totally replaced with the new mechanism. Additionally Dirs.mk has been
  extended in scope and renamed Definitions.mk and the local defs.mk file is
  now included by QMake from within the Definitions.mk file. As configure
  selects the appropriate platform, configure.arc is now also redundant. For a
  transitional period, all three types of config file remain as part of the
  distribution but serve only to warn of their redundancy. They will all be
  removed at a future point.

+ configure itself is based on a tuple of platform & operating system
  identifiers; architecture-manufacturer-OS (in fact, this can be a 4 part
  system to differentiate between userland tools, for example to differentiate
  between Linux systems using the GNU libC).  While this is more flexible, it is
  at odds with the original Ravl implementation, particularly the SUPPORT_ONLY
  and DONOT_SUPPORT constructs. As a first pass at development, configure sets
  $(ARC) based on a mapping from its internal tuple to the Ravl platform
  identifiers. It may, or may not be a good future enhancement to move the QMake
  system over to the more flexible tuple.

+ It is common to allow a user to specify their own CFLAGS on a build, to allow
  this, QMake has been modified to use: $(PKG_CFLAGS) $(CFLAGS) in the .mk
  file individual recipes. $(PKG_CFLAGS) is set in Definitions.mk to the 
  relevant flags required for the particular build underway (shared; optimised;
  etc.). A similar approach has been implemented for LDFLAGS. As ARFLAGS do not
  really lend themselves to user intervention in this manner, QMake just uses
  PKG_ARFLAGS in the recipies.

+ Single static and shared libraries are built using the objects created by the
  standard Ravl build. The makefile used is located under the build directory
  as share/QMake/Projects/Ravl/Makefiles/SingleLib.mk. This makefile is created
  by configure using the ravl/QMake/src/Projects/Ravl/Makefiles/SingleLib.mk.in
  file in the distributed Ravl source as a proforma.

+ Binaries linked against the single libraries are built using a makefile created
  by configure; share/QMake/Projects/Ravl/Makefiles/Recursive.mk.in. Similarly to
  SingleLib.mk, this file is created from a master file in the distributed source
  under the ravl/QMake/src/Projects/Ravl/Makefiles directory. Again, object files
  used are from the standard build which must be performed first.
