# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
Recognition and Vision Library
RAVL provides a base C++ class library together with a range of
computer vision, pattern recognition and supporting tools.
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Ravl', [dirname(__file__)])
        except ImportError:
            import _Ravl
            return _Ravl
        if fp is not None:
            try:
                _mod = imp.load_module('_Ravl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Ravl = swig_import_helper()
    del swig_import_helper
else:
    import _Ravl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SizeC(_object):
    """Proxy of C++ RavlN::SizeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SizeC
        __init__(self, value) -> SizeC
        """
        this = _Ravl.new_SizeC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_SizeC
    __del__ = lambda self : None;
SizeC_swigregister = _Ravl.SizeC_swigregister
SizeC_swigregister(SizeC)

class DListRealC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListRealC"""
        this = _Ravl.new_DListRealC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListRealC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListRealC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListRealC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> double"""
        return _Ravl.DListRealC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> double"""
        return _Ravl.DListRealC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListRealC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListRealC_MoveLast(self, *args)

    def First(self):
        """First(self) -> double"""
        return _Ravl.DListRealC_First(self)

    def Last(self):
        """Last(self) -> double"""
        return _Ravl.DListRealC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListRealC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListRealC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> double"""
        return _Ravl.DListRealC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListRealC
    __del__ = lambda self : None;
DListRealC_swigregister = _Ravl.DListRealC_swigregister
DListRealC_swigregister(DListRealC)

class DListRealIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListRealIterC
        __init__(self, lst) -> DListRealIterC
        """
        this = _Ravl.new_DListRealIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListRealIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListRealIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListRealIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListRealIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListRealIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListRealIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListRealIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListRealIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListRealIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListRealIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListRealIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> double"""
        return _Ravl.DListRealIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> double"""
        return _Ravl.DListRealIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> double"""
        return _Ravl.DListRealIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> double"""
        return _Ravl.DListRealIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListRealC"""
        return _Ravl.DListRealIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListRealC"""
        return _Ravl.DListRealIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListRealC"""
        return _Ravl.DListRealIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListRealC"""
        return _Ravl.DListRealIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> double"""
        return _Ravl.DListRealIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> double"""
        return _Ravl.DListRealIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListRealIterC
    __del__ = lambda self : None;
DListRealIterC_swigregister = _Ravl.DListRealIterC_swigregister
DListRealIterC_swigregister(DListRealIterC)

class DListRealConstIterC(DListRealIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListRealIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListRealIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListRealConstIterC
        __init__(self, copy) -> DListRealConstIterC
        """
        this = _Ravl.new_DListRealConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListRealConstIterC
    __del__ = lambda self : None;
DListRealConstIterC_swigregister = _Ravl.DListRealConstIterC_swigregister
DListRealConstIterC_swigregister(DListRealConstIterC)

class DListIntC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListIntC"""
        this = _Ravl.new_DListIntC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListIntC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListIntC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListIntC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> int"""
        return _Ravl.DListIntC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> int"""
        return _Ravl.DListIntC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListIntC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListIntC_MoveLast(self, *args)

    def First(self):
        """First(self) -> int"""
        return _Ravl.DListIntC_First(self)

    def Last(self):
        """Last(self) -> int"""
        return _Ravl.DListIntC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListIntC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListIntC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> int"""
        return _Ravl.DListIntC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListIntC
    __del__ = lambda self : None;
DListIntC_swigregister = _Ravl.DListIntC_swigregister
DListIntC_swigregister(DListIntC)

class DListIntIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListIntIterC
        __init__(self, lst) -> DListIntIterC
        """
        this = _Ravl.new_DListIntIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListIntIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListIntIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListIntIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListIntIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListIntIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListIntIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListIntIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListIntIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListIntIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListIntIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListIntIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> int"""
        return _Ravl.DListIntIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> int"""
        return _Ravl.DListIntIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> int"""
        return _Ravl.DListIntIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> int"""
        return _Ravl.DListIntIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListIntC"""
        return _Ravl.DListIntIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListIntC"""
        return _Ravl.DListIntIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListIntC"""
        return _Ravl.DListIntIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListIntC"""
        return _Ravl.DListIntIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> int"""
        return _Ravl.DListIntIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> int"""
        return _Ravl.DListIntIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListIntIterC
    __del__ = lambda self : None;
DListIntIterC_swigregister = _Ravl.DListIntIterC_swigregister
DListIntIterC_swigregister(DListIntIterC)

class DListIntConstIterC(DListIntIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListIntIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListIntIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListIntConstIterC
        __init__(self, copy) -> DListIntConstIterC
        """
        this = _Ravl.new_DListIntConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListIntConstIterC
    __del__ = lambda self : None;
DListIntConstIterC_swigregister = _Ravl.DListIntConstIterC_swigregister
DListIntConstIterC_swigregister(DListIntConstIterC)

class DListUIntC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListUIntC"""
        this = _Ravl.new_DListUIntC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListUIntC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListUIntC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListUIntC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> unsigned int"""
        return _Ravl.DListUIntC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> unsigned int"""
        return _Ravl.DListUIntC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListUIntC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListUIntC_MoveLast(self, *args)

    def First(self):
        """First(self) -> unsigned int"""
        return _Ravl.DListUIntC_First(self)

    def Last(self):
        """Last(self) -> unsigned int"""
        return _Ravl.DListUIntC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListUIntC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListUIntC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> unsigned int"""
        return _Ravl.DListUIntC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListUIntC
    __del__ = lambda self : None;
DListUIntC_swigregister = _Ravl.DListUIntC_swigregister
DListUIntC_swigregister(DListUIntC)

class DListUIntIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListUIntIterC
        __init__(self, lst) -> DListUIntIterC
        """
        this = _Ravl.new_DListUIntIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListUIntIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListUIntIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListUIntIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListUIntIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListUIntIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListUIntIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListUIntIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListUIntIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListUIntIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListUIntIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListUIntIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> unsigned int"""
        return _Ravl.DListUIntIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListUIntIterC
    __del__ = lambda self : None;
DListUIntIterC_swigregister = _Ravl.DListUIntIterC_swigregister
DListUIntIterC_swigregister(DListUIntIterC)

class DListUIntConstIterC(DListUIntIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListUIntIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListUIntIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListUIntConstIterC
        __init__(self, copy) -> DListUIntConstIterC
        """
        this = _Ravl.new_DListUIntConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListUIntConstIterC
    __del__ = lambda self : None;
DListUIntConstIterC_swigregister = _Ravl.DListUIntConstIterC_swigregister
DListUIntConstIterC_swigregister(DListUIntConstIterC)

class DListInt64C(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListInt64C"""
        this = _Ravl.new_DListInt64C()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListInt64C_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListInt64C_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListInt64C_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> long"""
        return _Ravl.DListInt64C_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> long"""
        return _Ravl.DListInt64C_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListInt64C_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListInt64C_MoveLast(self, *args)

    def First(self):
        """First(self) -> long"""
        return _Ravl.DListInt64C_First(self)

    def Last(self):
        """Last(self) -> long"""
        return _Ravl.DListInt64C_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListInt64C_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListInt64C_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> long"""
        return _Ravl.DListInt64C_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListInt64C
    __del__ = lambda self : None;
DListInt64C_swigregister = _Ravl.DListInt64C_swigregister
DListInt64C_swigregister(DListInt64C)

class DListInt64IterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt64IterC
        __init__(self, lst) -> DListInt64IterC
        """
        this = _Ravl.new_DListInt64IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListInt64IterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListInt64IterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListInt64IterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListInt64IterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListInt64IterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListInt64IterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListInt64IterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListInt64IterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListInt64IterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListInt64IterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListInt64IterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> long"""
        return _Ravl.DListInt64IterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> long"""
        return _Ravl.DListInt64IterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> long"""
        return _Ravl.DListInt64IterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> long"""
        return _Ravl.DListInt64IterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_Tail(self)

    def Head(self):
        """Head(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> long"""
        return _Ravl.DListInt64IterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> long"""
        return _Ravl.DListInt64IterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListInt64IterC
    __del__ = lambda self : None;
DListInt64IterC_swigregister = _Ravl.DListInt64IterC_swigregister
DListInt64IterC_swigregister(DListInt64IterC)

class DListInt64ConstIterC(DListInt64IterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    for _s in [DListInt64IterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64ConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListInt64IterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64ConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt64ConstIterC
        __init__(self, copy) -> DListInt64ConstIterC
        """
        this = _Ravl.new_DListInt64ConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListInt64ConstIterC
    __del__ = lambda self : None;
DListInt64ConstIterC_swigregister = _Ravl.DListInt64ConstIterC_swigregister
DListInt64ConstIterC_swigregister(DListInt64ConstIterC)

class DListInt16C(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListInt16C"""
        this = _Ravl.new_DListInt16C()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListInt16C_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListInt16C_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListInt16C_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> short"""
        return _Ravl.DListInt16C_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> short"""
        return _Ravl.DListInt16C_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListInt16C_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListInt16C_MoveLast(self, *args)

    def First(self):
        """First(self) -> short"""
        return _Ravl.DListInt16C_First(self)

    def Last(self):
        """Last(self) -> short"""
        return _Ravl.DListInt16C_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListInt16C_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListInt16C_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> short"""
        return _Ravl.DListInt16C_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListInt16C
    __del__ = lambda self : None;
DListInt16C_swigregister = _Ravl.DListInt16C_swigregister
DListInt16C_swigregister(DListInt16C)

class DListInt16IterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt16IterC
        __init__(self, lst) -> DListInt16IterC
        """
        this = _Ravl.new_DListInt16IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListInt16IterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListInt16IterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListInt16IterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListInt16IterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListInt16IterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListInt16IterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListInt16IterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListInt16IterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListInt16IterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListInt16IterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListInt16IterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> short"""
        return _Ravl.DListInt16IterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> short"""
        return _Ravl.DListInt16IterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> short"""
        return _Ravl.DListInt16IterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> short"""
        return _Ravl.DListInt16IterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_Tail(self)

    def Head(self):
        """Head(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> short"""
        return _Ravl.DListInt16IterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> short"""
        return _Ravl.DListInt16IterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListInt16IterC
    __del__ = lambda self : None;
DListInt16IterC_swigregister = _Ravl.DListInt16IterC_swigregister
DListInt16IterC_swigregister(DListInt16IterC)

class DListInt16ConstIterC(DListInt16IterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    for _s in [DListInt16IterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16ConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListInt16IterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16ConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt16ConstIterC
        __init__(self, copy) -> DListInt16ConstIterC
        """
        this = _Ravl.new_DListInt16ConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListInt16ConstIterC
    __del__ = lambda self : None;
DListInt16ConstIterC_swigregister = _Ravl.DListInt16ConstIterC_swigregister
DListInt16ConstIterC_swigregister(DListInt16ConstIterC)

class DListByteC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListByteC"""
        this = _Ravl.new_DListByteC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListByteC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListByteC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListByteC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> unsigned char"""
        return _Ravl.DListByteC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> unsigned char"""
        return _Ravl.DListByteC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListByteC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListByteC_MoveLast(self, *args)

    def First(self):
        """First(self) -> unsigned char"""
        return _Ravl.DListByteC_First(self)

    def Last(self):
        """Last(self) -> unsigned char"""
        return _Ravl.DListByteC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListByteC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListByteC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> unsigned char"""
        return _Ravl.DListByteC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListByteC
    __del__ = lambda self : None;
DListByteC_swigregister = _Ravl.DListByteC_swigregister
DListByteC_swigregister(DListByteC)

class DListByteIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListByteIterC
        __init__(self, lst) -> DListByteIterC
        """
        this = _Ravl.new_DListByteIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListByteIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListByteIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListByteIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListByteIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListByteIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListByteIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListByteIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListByteIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListByteIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListByteIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListByteIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListByteC"""
        return _Ravl.DListByteIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListByteC"""
        return _Ravl.DListByteIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListByteC"""
        return _Ravl.DListByteIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListByteC"""
        return _Ravl.DListByteIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> unsigned char"""
        return _Ravl.DListByteIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> unsigned char"""
        return _Ravl.DListByteIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListByteIterC
    __del__ = lambda self : None;
DListByteIterC_swigregister = _Ravl.DListByteIterC_swigregister
DListByteIterC_swigregister(DListByteIterC)

class DListByteConstIterC(DListByteIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListByteIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListByteIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListByteConstIterC
        __init__(self, copy) -> DListByteConstIterC
        """
        this = _Ravl.new_DListByteConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListByteConstIterC
    __del__ = lambda self : None;
DListByteConstIterC_swigregister = _Ravl.DListByteConstIterC_swigregister
DListByteConstIterC_swigregister(DListByteConstIterC)

class Point2dC(_object):
    """Proxy of C++ RavlN::Point2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Point2dC
        __init__(self, x, y) -> Point2dC
        """
        this = _Ravl.new_Point2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row(self):
        """Row(self) -> RealT"""
        return _Ravl.Point2dC_Row(self)

    def Col(self):
        """Col(self) -> RealT"""
        return _Ravl.Point2dC_Col(self)

    __swig_destroy__ = _Ravl.delete_Point2dC
    __del__ = lambda self : None;
Point2dC_swigregister = _Ravl.Point2dC_swigregister
Point2dC_swigregister(Point2dC)

class DListPoint2dC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListPoint2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListPoint2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListPoint2dC"""
        this = _Ravl.new_DListPoint2dC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListPoint2dC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListPoint2dC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListPoint2dC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListPoint2dC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListPoint2dC_MoveLast(self, *args)

    def First(self):
        """First(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_First(self)

    def Last(self):
        """Last(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListPoint2dC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListPoint2dC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> Point2dC"""
        return _Ravl.DListPoint2dC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListPoint2dC
    __del__ = lambda self : None;
DListPoint2dC_swigregister = _Ravl.DListPoint2dC_swigregister
DListPoint2dC_swigregister(DListPoint2dC)

class DListPoint2dIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListPoint2dIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListPoint2dIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListPoint2dIterC
        __init__(self, lst) -> DListPoint2dIterC
        """
        this = _Ravl.new_DListPoint2dIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListPoint2dIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListPoint2dIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListPoint2dIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListPoint2dIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListPoint2dIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListPoint2dIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListPoint2dIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListPoint2dIterC
    __del__ = lambda self : None;
    def Row(self):
        """Row(self) -> RealT"""
        return _Ravl.DListPoint2dIterC_Row(self)

    def Col(self):
        """Col(self) -> RealT"""
        return _Ravl.DListPoint2dIterC_Col(self)

DListPoint2dIterC_swigregister = _Ravl.DListPoint2dIterC_swigregister
DListPoint2dIterC_swigregister(DListPoint2dIterC)

class IndexC(_object):
    """Proxy of C++ RavlN::IndexC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IndexC
        __init__(self, arg0) -> IndexC
        """
        this = _Ravl.new_IndexC(*args)
        try: self.this.append(this)
        except: self.this = this
    def V(self):
        """V(self) -> IntT"""
        return _Ravl.IndexC_V(self)

    __swig_destroy__ = _Ravl.delete_IndexC
    __del__ = lambda self : None;
IndexC_swigregister = _Ravl.IndexC_swigregister
IndexC_swigregister(IndexC)

def ToList(*args):
  """
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    """
  return _Ravl.ToList(*args)

class IndexRangeC(_object):
    """Proxy of C++ RavlN::IndexRangeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexRangeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexRangeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, dim = 0) -> IndexRangeC
        __init__(self) -> IndexRangeC
        __init__(self, dim) -> IndexRangeC
        __init__(self, dim) -> IndexRangeC
        __init__(self, minIndex, maxIndex) -> IndexRangeC
        """
        this = _Ravl.new_IndexRangeC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(self) -> IntT"""
        return _Ravl.IndexRangeC_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Range(self)

    def Min(self, *args):
        """
        Min(self) -> IndexC
        Min(self) -> IndexC
        """
        return _Ravl.IndexRangeC_Min(self, *args)

    def Max(self, *args):
        """
        Max(self) -> IndexC
        Max(self) -> IndexC
        """
        return _Ravl.IndexRangeC_Max(self, *args)

    def Center(self):
        """Center(self) -> IndexC"""
        return _Ravl.IndexRangeC_Center(self)

    def CenterD(self):
        """CenterD(self) -> IndexC"""
        return _Ravl.IndexRangeC_CenterD(self)

    def Percentage(self, *args):
        """Percentage(self, p) -> IndexC"""
        return _Ravl.IndexRangeC_Percentage(self, *args)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.IndexRangeC_IsEmpty(self)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.IndexRangeC_IsValid(self)

    def Contains(self, *args):
        """
        Contains(self, i) -> bool
        Contains(self, val) -> bool
        Contains(self, range) -> bool
        """
        return _Ravl.IndexRangeC_Contains(self, *args)

    def __eq__(self, *args):
        """__eq__(self, range) -> bool"""
        return _Ravl.IndexRangeC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, range) -> bool"""
        return _Ravl.IndexRangeC___ne__(self, *args)

    def In(self, *args):
        """In(self, range) -> bool"""
        return _Ravl.IndexRangeC_In(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(self, r) -> bool"""
        return _Ravl.IndexRangeC_IsOverlapping(self, *args)

    def SetOrigin(self, *args):
        """SetOrigin(self, position) -> IndexRangeC"""
        return _Ravl.IndexRangeC_SetOrigin(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___idiv__(self, *args)

    def __imul__(self, *args):
        """__imul__(self, i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___imul__(self, *args)

    def __div__(self, *args):
        """__div__(self, i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___div__(self, *args)

    def __mul__(self, *args):
        """__mul__(self, i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___mul__(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, r) -> IndexRangeC"""
        return _Ravl.IndexRangeC_ClipBy(self, *args)

    def Clip(self, *args):
        """
        Clip(self, r) -> IndexRangeC
        Clip(self, i) -> IndexC
        """
        return _Ravl.IndexRangeC_Clip(self, *args)

    def FirstHalf(self):
        """FirstHalf(self) -> IndexRangeC"""
        return _Ravl.IndexRangeC_FirstHalf(self)

    def FirstHalfD(self):
        """FirstHalfD(self) -> IndexRangeC"""
        return _Ravl.IndexRangeC_FirstHalfD(self)

    def Enlarge(self, *args):
        """Enlarge(self, f) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Enlarge(self, *args)

    def Expand(self, *args):
        """Expand(self, n) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(self, n) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Shrink(self, *args)

    def ShrinkHigh(self, *args):
        """ShrinkHigh(self, n) -> IndexRangeC"""
        return _Ravl.IndexRangeC_ShrinkHigh(self, *args)

    def Swap(self, *args):
        """Swap(self, r) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Swap(self, *args)

    def Involve(self, *args):
        """
        Involve(self, i) -> IndexRangeC
        Involve(self, subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC_Involve(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, i) -> IndexRangeC
        __iadd__(self, i) -> IndexRangeC
        __iadd__(self, i) -> IndexRangeC
        __iadd__(self, i) -> IndexRangeC
        __iadd__(self, subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, i) -> IndexRangeC
        __isub__(self, i) -> IndexRangeC
        __isub__(self, i) -> IndexRangeC
        __isub__(self, i) -> IndexRangeC
        __isub__(self, subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, i) -> IndexRangeC
        __add__(self, i) -> IndexRangeC
        __add__(self, i) -> IndexRangeC
        __add__(self, i) -> IndexRangeC
        __add__(self, subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, i) -> IndexRangeC
        __sub__(self, i) -> IndexRangeC
        __sub__(self, i) -> IndexRangeC
        __sub__(self, i) -> IndexRangeC
        __sub__(self, subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___sub__(self, *args)

    def AlignWithin(self, *args):
        """AlignWithin(self, alignment) -> IndexRangeC"""
        return _Ravl.IndexRangeC_AlignWithin(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.IndexRangeC_Hash(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.IndexRangeC___str__(self)

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _Ravl.IndexRangeC___nonzero__(self)

    def __len__(self):
        """__len__(self) -> int"""
        return _Ravl.IndexRangeC___len__(self)

    __swig_destroy__ = _Ravl.delete_IndexRangeC
    __del__ = lambda self : None;
IndexRangeC_swigregister = _Ravl.IndexRangeC_swigregister
IndexRangeC_swigregister(IndexRangeC)

class Index2dC(_object):
    """Proxy of C++ RavlN::Index2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Index2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Index2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Index2dC
        __init__(self, x, y) -> Index2dC
        __init__(self, x, y) -> Index2dC
        """
        this = _Ravl.new_Index2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row(self):
        """Row(self) -> IndexC"""
        return _Ravl.Index2dC_Row(self)

    def Col(self):
        """Col(self) -> IndexC"""
        return _Ravl.Index2dC_Col(self)

    __swig_destroy__ = _Ravl.delete_Index2dC
    __del__ = lambda self : None;
Index2dC_swigregister = _Ravl.Index2dC_swigregister
Index2dC_swigregister(Index2dC)

class IndexRange2dC(_object):
    """Proxy of C++ RavlN::IndexRange2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexRange2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexRange2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> IndexRange2dC"""
        this = _Ravl.new_IndexRange2dC()
        try: self.this.append(this)
        except: self.this = this
    def TRow(self):
        """TRow(self) -> IndexC"""
        return _Ravl.IndexRange2dC_TRow(self)

    def BRow(self):
        """BRow(self) -> IndexC"""
        return _Ravl.IndexRange2dC_BRow(self)

    def LCol(self):
        """LCol(self) -> IndexC"""
        return _Ravl.IndexRange2dC_LCol(self)

    def RCol(self):
        """RCol(self) -> IndexC"""
        return _Ravl.IndexRange2dC_RCol(self)

    def TopLeft(self):
        """TopLeft(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_TopLeft(self)

    def TopRight(self):
        """TopRight(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_TopRight(self)

    def BottomLeft(self):
        """BottomLeft(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_BottomLeft(self)

    def BottomRight(self):
        """BottomRight(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_BottomRight(self)

    def Center(self):
        """Center(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_Center(self)

    def Rows(self):
        """Rows(self) -> IntT"""
        return _Ravl.IndexRange2dC_Rows(self)

    def Cols(self):
        """Cols(self) -> IntT"""
        return _Ravl.IndexRange2dC_Cols(self)

    def Area(self):
        """Area(self) -> SizeT"""
        return _Ravl.IndexRange2dC_Area(self)

    def Contains(self, *args):
        """Contains(self, index) -> bool"""
        return _Ravl.IndexRange2dC_Contains(self, *args)

    def Expand(self, *args):
        """Expand(self, n) -> IndexRange2dC"""
        return _Ravl.IndexRange2dC_Expand(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, range)"""
        return _Ravl.IndexRange2dC_ClipBy(self, *args)

    __swig_destroy__ = _Ravl.delete_IndexRange2dC
    __del__ = lambda self : None;
IndexRange2dC_swigregister = _Ravl.IndexRange2dC_swigregister
IndexRange2dC_swigregister(IndexRange2dC)

class Array2dByteC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2dByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2dByteC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Array2dByteC
        __init__(self, rows, cols) -> Array2dByteC
        __init__(self, range) -> Array2dByteC
        """
        this = _Ravl.new_Array2dByteC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.Array2dByteC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.Array2dByteC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.Array2dByteC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> unsigned char
        Access(self, r, c) -> unsigned char
        Access(self, r, c) -> unsigned char
        """
        return _Ravl.Array2dByteC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_Array2dByteC
    __del__ = lambda self : None;
Array2dByteC_swigregister = _Ravl.Array2dByteC_swigregister
Array2dByteC_swigregister(Array2dByteC)

class Array2dRealC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2dRealC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2dRealC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Array2dRealC
        __init__(self, rows, cols) -> Array2dRealC
        __init__(self, range) -> Array2dRealC
        """
        this = _Ravl.new_Array2dRealC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.Array2dRealC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.Array2dRealC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.Array2dRealC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> double
        Access(self, r, c) -> double
        Access(self, r, c) -> double
        """
        return _Ravl.Array2dRealC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_Array2dRealC
    __del__ = lambda self : None;
Array2dRealC_swigregister = _Ravl.Array2dRealC_swigregister
Array2dRealC_swigregister(Array2dRealC)

class StringC(_object):
    """Proxy of C++ RavlN::StringC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringC
        __init__(self, arg0) -> StringC
        """
        this = _Ravl.new_StringC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.StringC_IsEmpty(self)

    def chars(self):
        """chars(self) -> char"""
        return _Ravl.StringC_chars(self)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.StringC_Size(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.StringC___str__(self)

    __swig_destroy__ = _Ravl.delete_StringC
    __del__ = lambda self : None;
StringC_swigregister = _Ravl.StringC_swigregister
StringC_swigregister(StringC)

class RealRangeC(_object):
    """Proxy of C++ RavlN::RealRangeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRangeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRangeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size = 0) -> RealRangeC
        __init__(self) -> RealRangeC
        __init__(self, minReal, maxReal) -> RealRangeC
        """
        this = _Ravl.new_RealRangeC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(self) -> RealT"""
        return _Ravl.RealRangeC_Size(self)

    def Range(self):
        """Range(self) -> RealRangeC"""
        return _Ravl.RealRangeC_Range(self)

    def Min(self, *args):
        """
        Min(self) -> RealT
        Min(self) -> RealT
        """
        return _Ravl.RealRangeC_Min(self, *args)

    def Max(self, *args):
        """
        Max(self) -> RealT
        Max(self) -> RealT
        """
        return _Ravl.RealRangeC_Max(self, *args)

    def Center(self):
        """Center(self) -> RealT"""
        return _Ravl.RealRangeC_Center(self)

    def CenterD(self):
        """CenterD(self) -> RealT"""
        return _Ravl.RealRangeC_CenterD(self)

    def Percentage(self, *args):
        """Percentage(self, p) -> RealT"""
        return _Ravl.RealRangeC_Percentage(self, *args)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.RealRangeC_IsEmpty(self)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.RealRangeC_IsValid(self)

    def Contains(self, *args):
        """
        Contains(self, i) -> bool
        Contains(self, range) -> bool
        """
        return _Ravl.RealRangeC_Contains(self, *args)

    def __eq__(self, *args):
        """__eq__(self, range) -> bool"""
        return _Ravl.RealRangeC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, range) -> bool"""
        return _Ravl.RealRangeC___ne__(self, *args)

    def In(self, *args):
        """In(self, range) -> bool"""
        return _Ravl.RealRangeC_In(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(self, r) -> bool"""
        return _Ravl.RealRangeC_IsOverlapping(self, *args)

    def SetOrigin(self, *args):
        """SetOrigin(self, position) -> RealRangeC"""
        return _Ravl.RealRangeC_SetOrigin(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___sub__(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, r) -> RealRangeC"""
        return _Ravl.RealRangeC_ClipBy(self, *args)

    def Clip(self, *args):
        """Clip(self, r) -> RealT"""
        return _Ravl.RealRangeC_Clip(self, *args)

    def FirstHalf(self):
        """FirstHalf(self) -> RealRangeC"""
        return _Ravl.RealRangeC_FirstHalf(self)

    def FirstHalfD(self):
        """FirstHalfD(self) -> RealRangeC"""
        return _Ravl.RealRangeC_FirstHalfD(self)

    def Enlarge(self, *args):
        """Enlarge(self, f) -> RealRangeC"""
        return _Ravl.RealRangeC_Enlarge(self, *args)

    def Expand(self, *args):
        """Expand(self, n) -> RealRangeC"""
        return _Ravl.RealRangeC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(self, n) -> RealRangeC"""
        return _Ravl.RealRangeC_Shrink(self, *args)

    def ShrinkHigh(self, *args):
        """ShrinkHigh(self, n) -> RealRangeC"""
        return _Ravl.RealRangeC_ShrinkHigh(self, *args)

    def Swap(self, *args):
        """Swap(self, r) -> RealRangeC"""
        return _Ravl.RealRangeC_Swap(self, *args)

    def Involve(self, *args):
        """
        Involve(self, i) -> RealRangeC
        Involve(self, subRange) -> RealRangeC
        """
        return _Ravl.RealRangeC_Involve(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRangeC
    __del__ = lambda self : None;
RealRangeC_swigregister = _Ravl.RealRangeC_swigregister
RealRangeC_swigregister(RealRangeC)

def PrintIOFormats(*args):
  """
    PrintIOFormats(os = std::cout)
    PrintIOFormats()
    """
  return _Ravl.PrintIOFormats(*args)

def PrintIOConversions(*args):
  """
    PrintIOConversions(os = std::cout)
    PrintIOConversions()
    """
  return _Ravl.PrintIOConversions(*args)

def PrintIOClassTypes(*args):
  """
    PrintIOClassTypes(os = std::cout)
    PrintIOClassTypes()
    """
  return _Ravl.PrintIOClassTypes(*args)

class RealRange2dC(_object):
    """Proxy of C++ RavlN::RealRange2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRange2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRange2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealRange2dC
        __init__(self, rowNumber, colNumber) -> RealRange2dC
        __init__(self, rowRange, colRange) -> RealRange2dC
        __init__(self, range) -> RealRange2dC
        __init__(self, minRow, maxRow, minCol, maxCol) -> RealRange2dC
        """
        this = _Ravl.new_RealRange2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def TRow(self, *args):
        """
        TRow(self) -> RealT
        TRow(self) -> RealT
        """
        return _Ravl.RealRange2dC_TRow(self, *args)

    def LCol(self, *args):
        """
        LCol(self) -> RealT
        LCol(self) -> RealT
        """
        return _Ravl.RealRange2dC_LCol(self, *args)

    def BRow(self, *args):
        """
        BRow(self) -> RealT
        BRow(self) -> RealT
        """
        return _Ravl.RealRange2dC_BRow(self, *args)

    def RCol(self, *args):
        """
        RCol(self) -> RealT
        RCol(self) -> RealT
        """
        return _Ravl.RealRange2dC_RCol(self, *args)

    def Rows(self):
        """Rows(self) -> RealT"""
        return _Ravl.RealRange2dC_Rows(self)

    def Cols(self):
        """Cols(self) -> RealT"""
        return _Ravl.RealRange2dC_Cols(self)

    def Area(self):
        """Area(self) -> RealT"""
        return _Ravl.RealRange2dC_Area(self)

    def Dilate(self):
        """Dilate(self) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Dilate(self)

    def Erode(self):
        """Erode(self) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Erode(self)

    def Expand(self, *args):
        """Expand(self, n) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(self, n) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Shrink(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, r) -> RealRange2dC"""
        return _Ravl.RealRange2dC_ClipBy(self, *args)

    def Contains(self, *args):
        """Contains(self, oth) -> bool"""
        return _Ravl.RealRange2dC_Contains(self, *args)

    def RowRange(self):
        """RowRange(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_RowRange(self)

    def ColRange(self):
        """ColRange(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_ColRange(self)

    def Range1(self):
        """Range1(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_Range1(self)

    def Range2(self):
        """Range2(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_Range2(self)

    def Involve(self, *args):
        """Involve(self, subrectangle)"""
        return _Ravl.RealRange2dC_Involve(self, *args)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.RealRange2dC_IsValid(self)

    def __eq__(self, *args):
        """__eq__(self, oth) -> bool"""
        return _Ravl.RealRange2dC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, oth) -> bool"""
        return _Ravl.RealRange2dC___ne__(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(self, r) -> bool"""
        return _Ravl.RealRange2dC_IsOverlapping(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRange2dC
    __del__ = lambda self : None;
RealRange2dC_swigregister = _Ravl.RealRange2dC_swigregister
RealRange2dC_swigregister(RealRange2dC)

class PointSet2dC(DListPoint2dC):
    """Proxy of C++ RavlN::PointSet2dC class"""
    __swig_setmethods__ = {}
    for _s in [DListPoint2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointSet2dC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListPoint2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointSet2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PointSet2dC"""
        this = _Ravl.new_PointSet2dC()
        try: self.this.append(this)
        except: self.this = this
    def Centroid(self):
        """Centroid(self) -> Point2dC"""
        return _Ravl.PointSet2dC_Centroid(self)

    def BoundingRectangle(self):
        """BoundingRectangle(self) -> RealRange2dC"""
        return _Ravl.PointSet2dC_BoundingRectangle(self)

    __swig_destroy__ = _Ravl.delete_PointSet2dC
    __del__ = lambda self : None;
PointSet2dC_swigregister = _Ravl.PointSet2dC_swigregister
PointSet2dC_swigregister(PointSet2dC)

class Polygon2dC(PointSet2dC):
    """Proxy of C++ RavlN::Polygon2dC class"""
    __swig_setmethods__ = {}
    for _s in [PointSet2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon2dC, name, value)
    __swig_getmethods__ = {}
    for _s in [PointSet2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Polygon2dC"""
        this = _Ravl.new_Polygon2dC()
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.Polygon2dC_Size(self)

    def InsLast(self, *args):
        """InsLast(self, point)"""
        return _Ravl.Polygon2dC_InsLast(self, *args)

    __swig_destroy__ = _Ravl.delete_Polygon2dC
    __del__ = lambda self : None;
Polygon2dC_swigregister = _Ravl.Polygon2dC_swigregister
Polygon2dC_swigregister(Polygon2dC)

class ByteRGBArray2dC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlImageN::ByteRGBValueC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteRGBArray2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteRGBArray2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteRGBArray2dC
        __init__(self, rows, cols) -> ByteRGBArray2dC
        __init__(self, range) -> ByteRGBArray2dC
        """
        this = _Ravl.new_ByteRGBArray2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.ByteRGBArray2dC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.ByteRGBArray2dC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.ByteRGBArray2dC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> ByteRGBValueC
        Access(self, r, c) -> ByteRGBValueC
        Access(self, r, c) -> ByteRGBValueC
        """
        return _Ravl.ByteRGBArray2dC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_ByteRGBArray2dC
    __del__ = lambda self : None;
ByteRGBArray2dC_swigregister = _Ravl.ByteRGBArray2dC_swigregister
ByteRGBArray2dC_swigregister(ByteRGBArray2dC)

class RealRGBArray2dC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlImageN::RealRGBValueC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRGBArray2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRGBArray2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealRGBArray2dC
        __init__(self, rows, cols) -> RealRGBArray2dC
        __init__(self, range) -> RealRGBArray2dC
        """
        this = _Ravl.new_RealRGBArray2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.RealRGBArray2dC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.RealRGBArray2dC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.RealRGBArray2dC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> RealRGBValueC
        Access(self, r, c) -> RealRGBValueC
        Access(self, r, c) -> RealRGBValueC
        """
        return _Ravl.RealRGBArray2dC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRGBArray2dC
    __del__ = lambda self : None;
RealRGBArray2dC_swigregister = _Ravl.RealRGBArray2dC_swigregister
RealRGBArray2dC_swigregister(RealRGBArray2dC)

class RealRGBValueC(_object):
    """Proxy of C++ RavlImageN::RealRGBValueC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRGBValueC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, r, g, b) -> RealRGBValueC"""
        this = _Ravl.new_RealRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Red(self):
        """Red(self) -> RealT"""
        return _Ravl.RealRGBValueC_Red(self)

    def Green(self):
        """Green(self) -> RealT"""
        return _Ravl.RealRGBValueC_Green(self)

    def Blue(self):
        """Blue(self) -> RealT"""
        return _Ravl.RealRGBValueC_Blue(self)

    __swig_destroy__ = _Ravl.delete_RealRGBValueC
    __del__ = lambda self : None;
RealRGBValueC_swigregister = _Ravl.RealRGBValueC_swigregister
RealRGBValueC_swigregister(RealRGBValueC)

class ByteRGBValueC(_object):
    """Proxy of C++ RavlImageN::ByteRGBValueC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteRGBValueC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, r, g, b) -> ByteRGBValueC"""
        this = _Ravl.new_ByteRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Red(self):
        """Red(self) -> IntT"""
        return _Ravl.ByteRGBValueC_Red(self)

    def Green(self):
        """Green(self) -> IntT"""
        return _Ravl.ByteRGBValueC_Green(self)

    def Blue(self):
        """Blue(self) -> IntT"""
        return _Ravl.ByteRGBValueC_Blue(self)

    __swig_destroy__ = _Ravl.delete_ByteRGBValueC
    __del__ = lambda self : None;
ByteRGBValueC_swigregister = _Ravl.ByteRGBValueC_swigregister
ByteRGBValueC_swigregister(ByteRGBValueC)

class ImageByteRGBValueC(ByteRGBArray2dC):
    """Proxy of C++ RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> class"""
    __swig_setmethods__ = {}
    for _s in [ByteRGBArray2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageByteRGBValueC, name, value)
    __swig_getmethods__ = {}
    for _s in [ByteRGBArray2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageByteRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageByteRGBValueC
        __init__(self, rows, cols) -> ImageByteRGBValueC
        __init__(self, range) -> ImageByteRGBValueC
        __init__(self, rows, cols, data, deletable = True) -> ImageByteRGBValueC
        __init__(self, rows, cols, data) -> ImageByteRGBValueC
        __init__(self, img, range) -> ImageByteRGBValueC
        """
        this = _Ravl.new_ImageByteRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(self) -> SizeT"""
        return _Ravl.ImageByteRGBValueC_Rows(self)

    def Cols(self):
        """Cols(self) -> SizeT"""
        return _Ravl.ImageByteRGBValueC_Cols(self)

    def Row(self, *args):
        """Row(self, row) -> ByteRGBValueC"""
        return _Ravl.ImageByteRGBValueC_Row(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.ImageByteRGBValueC_Stride(self)

    def DataAsString(self):
        """DataAsString(self) -> PyObject"""
        return _Ravl.ImageByteRGBValueC_DataAsString(self)

    def DataAsStringTriple(self):
        """DataAsStringTriple(self) -> PyObject"""
        return _Ravl.ImageByteRGBValueC_DataAsStringTriple(self)

    __swig_destroy__ = _Ravl.delete_ImageByteRGBValueC
    __del__ = lambda self : None;
ImageByteRGBValueC_swigregister = _Ravl.ImageByteRGBValueC_swigregister
ImageByteRGBValueC_swigregister(ImageByteRGBValueC)

class ImageByteC(Array2dByteC):
    """Proxy of C++ RavlImageN::ImageC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    for _s in [Array2dByteC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageByteC, name, value)
    __swig_getmethods__ = {}
    for _s in [Array2dByteC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageByteC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageByteC
        __init__(self, rows, cols) -> ImageByteC
        __init__(self, range) -> ImageByteC
        __init__(self, rows, cols, data, deletable = True) -> ImageByteC
        __init__(self, rows, cols, data) -> ImageByteC
        __init__(self, img, range) -> ImageByteC
        """
        this = _Ravl.new_ImageByteC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(self) -> SizeT"""
        return _Ravl.ImageByteC_Rows(self)

    def Cols(self):
        """Cols(self) -> SizeT"""
        return _Ravl.ImageByteC_Cols(self)

    def Row(self, *args):
        """Row(self, row) -> unsigned char"""
        return _Ravl.ImageByteC_Row(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.ImageByteC_Stride(self)

    def DataAsString(self):
        """DataAsString(self) -> PyObject"""
        return _Ravl.ImageByteC_DataAsString(self)

    def DataAsStringTriple(self):
        """DataAsStringTriple(self) -> PyObject"""
        return _Ravl.ImageByteC_DataAsStringTriple(self)

    __swig_destroy__ = _Ravl.delete_ImageByteC
    __del__ = lambda self : None;
ImageByteC_swigregister = _Ravl.ImageByteC_swigregister
ImageByteC_swigregister(ImageByteC)

class FontC(_object):
    """Proxy of C++ RavlImageN::FontC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> FontC"""
        this = _Ravl.new_FontC()
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.FontC_IsValid(self)

    def Center(self, *args):
        """Center(self, text) -> Index2dC"""
        return _Ravl.FontC_Center(self, *args)

    def Size(self, *args):
        """Size(self, text) -> Index2dC"""
        return _Ravl.FontC_Size(self, *args)

    def Count(self):
        """Count(self) -> UIntT"""
        return _Ravl.FontC_Count(self)

    __swig_destroy__ = _Ravl.delete_FontC
    __del__ = lambda self : None;
FontC_swigregister = _Ravl.FontC_swigregister
FontC_swigregister(FontC)

def DrawPolygon(*args):
  """
    DrawPolygon(arg0, arg1, poly, fill = False)
    DrawPolygon(arg0, arg1, poly)
    DrawPolygon(arg0, arg1, poly, fill = False)
    DrawPolygon(arg0, arg1, poly)
    """
  return _Ravl.DrawPolygon(*args)


def DefaultFont():
  """DefaultFont() -> FontC"""
  return _Ravl.DefaultFont()

def DrawTextByteRGB(*args):
  """DrawTextByteRGB(font, value, offset, text, image)"""
  return _Ravl.DrawTextByteRGB(*args)

def DrawTextByte(*args):
  """DrawTextByte(font, value, offset, text, image)"""
  return _Ravl.DrawTextByte(*args)

def DrawTextCenterByteRGB(*args):
  """DrawTextCenterByteRGB(font, value, offset, text, image)"""
  return _Ravl.DrawTextCenterByteRGB(*args)

def DrawTextCenterByte(*args):
  """DrawTextCenterByte(font, value, offset, text, image)"""
  return _Ravl.DrawTextCenterByte(*args)
class SArray1dUInt(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dUInt, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> SArray1dUInt"""
        return _Ravl.SArray1dUInt_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> SArray1dUInt
        __init__(self, dim) -> SArray1dUInt
        __init__(self, vv) -> SArray1dUInt
        __init__(self, vv, dim, offsetInBuff = 0) -> SArray1dUInt
        __init__(self, vv, dim) -> SArray1dUInt
        __init__(self, data, dim, removable) -> SArray1dUInt
        """
        this = _Ravl.new_SArray1dUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SArray1dUInt_IsEmpty(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray1dUInt_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray1dUInt_Fill(self, *args)

    def Reverse(self):
        """Reverse(self)"""
        return _Ravl.SArray1dUInt_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray1dUInt
        __mul__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray1dUInt
        __div__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray1dUInt
        __add__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray1dUInt
        __sub__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray1dUInt
        __iadd__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray1dUInt
        __isub__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray1dUInt
        __imul__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray1dUInt
        __idiv__(self, number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___idiv__(self, *args)

    def Sum(self):
        """Sum(self) -> unsigned int"""
        return _Ravl.SArray1dUInt_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> unsigned int"""
        return _Ravl.SArray1dUInt_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(self) -> SArray1dUInt
        SArray1d(self) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_SArray1d(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SArray1dUInt_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.SArray1dUInt_Range(self)

    def Join(self, *args):
        """
        Join(self, Oth) -> SArray1dUInt
        Join(self, Oth) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> SArray1dUInt
        Append(self, a) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> SArray1dUInt
        From(self, offset, size) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> SArray1dUInt"""
        return _Ravl.SArray1dUInt_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> SArray1dUInt"""
        return _Ravl.SArray1dUInt_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.SArray1dUInt___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.SArray1dUInt___ne__(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray1dUInt_Hash(self)

    def DataStart(self):
        """DataStart(self) -> unsigned int"""
        return _Ravl.SArray1dUInt_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> unsigned int"""
        return _Ravl.SArray1dUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SArray1dUInt___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray1dUInt___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dUInt
    __del__ = lambda self : None;
SArray1dUInt_swigregister = _Ravl.SArray1dUInt_swigregister
SArray1dUInt_swigregister(SArray1dUInt)

def SArray1dUInt_ConstructAligned(*args):
  """SArray1dUInt_ConstructAligned(dim, align) -> SArray1dUInt"""
  return _Ravl.SArray1dUInt_ConstructAligned(*args)

class SArray1dReal(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dReal, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> SArray1dReal"""
        return _Ravl.SArray1dReal_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> SArray1dReal
        __init__(self, dim) -> SArray1dReal
        __init__(self, vv) -> SArray1dReal
        __init__(self, vv, dim, offsetInBuff = 0) -> SArray1dReal
        __init__(self, vv, dim) -> SArray1dReal
        __init__(self, data, dim, removable) -> SArray1dReal
        """
        this = _Ravl.new_SArray1dReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SArray1dReal_IsEmpty(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray1dReal_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray1dReal_Fill(self, *args)

    def Reverse(self):
        """Reverse(self)"""
        return _Ravl.SArray1dReal_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray1dReal
        __mul__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray1dReal
        __div__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray1dReal
        __add__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray1dReal
        __sub__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray1dReal
        __iadd__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray1dReal
        __isub__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray1dReal
        __imul__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray1dReal
        __idiv__(self, number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___idiv__(self, *args)

    def Sum(self):
        """Sum(self) -> double"""
        return _Ravl.SArray1dReal_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> double"""
        return _Ravl.SArray1dReal_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(self) -> SArray1dReal
        SArray1d(self) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_SArray1d(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SArray1dReal_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.SArray1dReal_Range(self)

    def Join(self, *args):
        """
        Join(self, Oth) -> SArray1dReal
        Join(self, Oth) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> SArray1dReal
        Append(self, a) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> SArray1dReal
        From(self, offset, size) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> SArray1dReal"""
        return _Ravl.SArray1dReal_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> SArray1dReal"""
        return _Ravl.SArray1dReal_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.SArray1dReal___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.SArray1dReal___ne__(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray1dReal_Hash(self)

    def DataStart(self):
        """DataStart(self) -> double"""
        return _Ravl.SArray1dReal_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> double"""
        return _Ravl.SArray1dReal___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SArray1dReal___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray1dReal___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dReal
    __del__ = lambda self : None;
SArray1dReal_swigregister = _Ravl.SArray1dReal_swigregister
SArray1dReal_swigregister(SArray1dReal)

def SArray1dReal_ConstructAligned(*args):
  """SArray1dReal_ConstructAligned(dim, align) -> SArray1dReal"""
  return _Ravl.SArray1dReal_ConstructAligned(*args)

class SArray1dFloat(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dFloat, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> SArray1dFloat"""
        return _Ravl.SArray1dFloat_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> SArray1dFloat
        __init__(self, dim) -> SArray1dFloat
        __init__(self, vv) -> SArray1dFloat
        __init__(self, vv, dim, offsetInBuff = 0) -> SArray1dFloat
        __init__(self, vv, dim) -> SArray1dFloat
        __init__(self, data, dim, removable) -> SArray1dFloat
        """
        this = _Ravl.new_SArray1dFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SArray1dFloat_IsEmpty(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray1dFloat_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray1dFloat_Fill(self, *args)

    def Reverse(self):
        """Reverse(self)"""
        return _Ravl.SArray1dFloat_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray1dFloat
        __mul__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray1dFloat
        __div__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray1dFloat
        __add__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray1dFloat
        __sub__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray1dFloat
        __iadd__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray1dFloat
        __isub__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray1dFloat
        __imul__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray1dFloat
        __idiv__(self, number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___idiv__(self, *args)

    def Sum(self):
        """Sum(self) -> float"""
        return _Ravl.SArray1dFloat_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> float"""
        return _Ravl.SArray1dFloat_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(self) -> SArray1dFloat
        SArray1d(self) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_SArray1d(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SArray1dFloat_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.SArray1dFloat_Range(self)

    def Join(self, *args):
        """
        Join(self, Oth) -> SArray1dFloat
        Join(self, Oth) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> SArray1dFloat
        Append(self, a) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> SArray1dFloat
        From(self, offset, size) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> SArray1dFloat"""
        return _Ravl.SArray1dFloat_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> SArray1dFloat"""
        return _Ravl.SArray1dFloat_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.SArray1dFloat___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.SArray1dFloat___ne__(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray1dFloat_Hash(self)

    def DataStart(self):
        """DataStart(self) -> float"""
        return _Ravl.SArray1dFloat_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> float"""
        return _Ravl.SArray1dFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SArray1dFloat___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray1dFloat___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dFloat
    __del__ = lambda self : None;
SArray1dFloat_swigregister = _Ravl.SArray1dFloat_swigregister
SArray1dFloat_swigregister(SArray1dFloat)

def SArray1dFloat_ConstructAligned(*args):
  """SArray1dFloat_ConstructAligned(dim, align) -> SArray1dFloat"""
  return _Ravl.SArray1dFloat_ConstructAligned(*args)

class SArray1dIndexC(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::IndexC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dIndexC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dIndexC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> SArray1dIndexC"""
        return _Ravl.SArray1dIndexC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> SArray1dIndexC
        __init__(self, dim) -> SArray1dIndexC
        __init__(self, vv) -> SArray1dIndexC
        __init__(self, vv, dim, offsetInBuff = 0) -> SArray1dIndexC
        __init__(self, vv, dim) -> SArray1dIndexC
        __init__(self, data, dim, removable) -> SArray1dIndexC
        """
        this = _Ravl.new_SArray1dIndexC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SArray1dIndexC_IsEmpty(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray1dIndexC_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray1dIndexC_Fill(self, *args)

    def Reverse(self):
        """Reverse(self)"""
        return _Ravl.SArray1dIndexC_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray1dIndexC
        __mul__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray1dIndexC
        __div__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray1dIndexC
        __add__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray1dIndexC
        __sub__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray1dIndexC
        __iadd__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray1dIndexC
        __isub__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray1dIndexC
        __imul__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray1dIndexC
        __idiv__(self, number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___idiv__(self, *args)

    def Sum(self):
        """Sum(self) -> IndexC"""
        return _Ravl.SArray1dIndexC_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> IndexC"""
        return _Ravl.SArray1dIndexC_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(self) -> SArray1dIndexC
        SArray1d(self) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_SArray1d(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SArray1dIndexC_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.SArray1dIndexC_Range(self)

    def Join(self, *args):
        """
        Join(self, Oth) -> SArray1dIndexC
        Join(self, Oth) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> SArray1dIndexC
        Append(self, a) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> SArray1dIndexC
        From(self, offset, size) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> SArray1dIndexC"""
        return _Ravl.SArray1dIndexC_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> SArray1dIndexC"""
        return _Ravl.SArray1dIndexC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.SArray1dIndexC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.SArray1dIndexC___ne__(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray1dIndexC_Hash(self)

    def DataStart(self):
        """DataStart(self) -> IndexC"""
        return _Ravl.SArray1dIndexC_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> IndexC"""
        return _Ravl.SArray1dIndexC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SArray1dIndexC___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray1dIndexC___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dIndexC
    __del__ = lambda self : None;
SArray1dIndexC_swigregister = _Ravl.SArray1dIndexC_swigregister
SArray1dIndexC_swigregister(SArray1dIndexC)

def SArray1dIndexC_ConstructAligned(*args):
  """SArray1dIndexC_ConstructAligned(dim, align) -> SArray1dIndexC"""
  return _Ravl.SArray1dIndexC_ConstructAligned(*args)

class SArray1dPoint2dC(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dPoint2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dPoint2dC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> SArray1dPoint2dC"""
        return _Ravl.SArray1dPoint2dC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> SArray1dPoint2dC
        __init__(self, dim) -> SArray1dPoint2dC
        __init__(self, vv) -> SArray1dPoint2dC
        __init__(self, vv, dim, offsetInBuff = 0) -> SArray1dPoint2dC
        __init__(self, vv, dim) -> SArray1dPoint2dC
        __init__(self, data, dim, removable) -> SArray1dPoint2dC
        """
        this = _Ravl.new_SArray1dPoint2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SArray1dPoint2dC_IsEmpty(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray1dPoint2dC_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray1dPoint2dC_Fill(self, *args)

    def Reverse(self):
        """Reverse(self)"""
        return _Ravl.SArray1dPoint2dC_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray1dPoint2dC
        __mul__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray1dPoint2dC
        __div__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray1dPoint2dC
        __add__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray1dPoint2dC
        __sub__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray1dPoint2dC
        __iadd__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray1dPoint2dC
        __isub__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray1dPoint2dC
        __imul__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray1dPoint2dC
        __idiv__(self, number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___idiv__(self, *args)

    def Sum(self):
        """Sum(self) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(self) -> SArray1dPoint2dC
        SArray1d(self) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_SArray1d(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SArray1dPoint2dC_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.SArray1dPoint2dC_Range(self)

    def Join(self, *args):
        """
        Join(self, Oth) -> SArray1dPoint2dC
        Join(self, Oth) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> SArray1dPoint2dC
        Append(self, a) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> SArray1dPoint2dC
        From(self, offset, size) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> SArray1dPoint2dC"""
        return _Ravl.SArray1dPoint2dC_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> SArray1dPoint2dC"""
        return _Ravl.SArray1dPoint2dC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.SArray1dPoint2dC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.SArray1dPoint2dC___ne__(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray1dPoint2dC_Hash(self)

    def DataStart(self):
        """DataStart(self) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SArray1dPoint2dC___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray1dPoint2dC___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dPoint2dC
    __del__ = lambda self : None;
SArray1dPoint2dC_swigregister = _Ravl.SArray1dPoint2dC_swigregister
SArray1dPoint2dC_swigregister(SArray1dPoint2dC)

def SArray1dPoint2dC_ConstructAligned(*args):
  """SArray1dPoint2dC_ConstructAligned(dim, align) -> SArray1dPoint2dC"""
  return _Ravl.SArray1dPoint2dC_ConstructAligned(*args)

class SArray1dVectorC(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::VectorC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dVectorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dVectorC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> SArray1dVectorC"""
        return _Ravl.SArray1dVectorC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> SArray1dVectorC
        __init__(self, dim) -> SArray1dVectorC
        __init__(self, vv) -> SArray1dVectorC
        __init__(self, vv, dim, offsetInBuff = 0) -> SArray1dVectorC
        __init__(self, vv, dim) -> SArray1dVectorC
        __init__(self, data, dim, removable) -> SArray1dVectorC
        """
        this = _Ravl.new_SArray1dVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SArray1dVectorC_IsEmpty(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray1dVectorC_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray1dVectorC_Fill(self, *args)

    def Reverse(self):
        """Reverse(self)"""
        return _Ravl.SArray1dVectorC_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray1dVectorC
        __mul__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray1dVectorC
        __div__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray1dVectorC
        __add__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray1dVectorC
        __sub__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray1dVectorC
        __iadd__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray1dVectorC
        __isub__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray1dVectorC
        __imul__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray1dVectorC
        __idiv__(self, number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___idiv__(self, *args)

    def Sum(self):
        """Sum(self) -> VectorC"""
        return _Ravl.SArray1dVectorC_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> VectorC"""
        return _Ravl.SArray1dVectorC_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(self) -> SArray1dVectorC
        SArray1d(self) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_SArray1d(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SArray1dVectorC_Size(self)

    def Range(self):
        """Range(self) -> IndexRangeC"""
        return _Ravl.SArray1dVectorC_Range(self)

    def Join(self, *args):
        """
        Join(self, Oth) -> SArray1dVectorC
        Join(self, Oth) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> SArray1dVectorC
        Append(self, a) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> SArray1dVectorC
        From(self, offset, size) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> SArray1dVectorC"""
        return _Ravl.SArray1dVectorC_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> SArray1dVectorC"""
        return _Ravl.SArray1dVectorC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.SArray1dVectorC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.SArray1dVectorC___ne__(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray1dVectorC_Hash(self)

    def DataStart(self):
        """DataStart(self) -> VectorC"""
        return _Ravl.SArray1dVectorC_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> VectorC"""
        return _Ravl.SArray1dVectorC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SArray1dVectorC___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray1dVectorC___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dVectorC
    __del__ = lambda self : None;
SArray1dVectorC_swigregister = _Ravl.SArray1dVectorC_swigregister
SArray1dVectorC_swigregister(SArray1dVectorC)

def SArray1dVectorC_ConstructAligned(*args):
  """SArray1dVectorC_ConstructAligned(dim, align) -> SArray1dVectorC"""
  return _Ravl.SArray1dVectorC_ConstructAligned(*args)

class SArray2dFloat(_object):
    """Proxy of C++ RavlN::SArray2dC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray2dFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray2dFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SArray2dFloat
        __init__(self, dim1, dim2) -> SArray2dFloat
        __init__(self, size) -> SArray2dFloat
        __init__(self, arr, size1, size2) -> SArray2dFloat
        __init__(self, arr, rng) -> SArray2dFloat
        __init__(self, data, size1, size2, copyMemory = False, freeMemory = False, 
            stride = 0) -> SArray2dFloat
        __init__(self, data, size1, size2, copyMemory = False, freeMemory = False) -> SArray2dFloat
        __init__(self, data, size1, size2, copyMemory = False) -> SArray2dFloat
        __init__(self, data, size1, size2) -> SArray2dFloat
        """
        this = _Ravl.new_SArray2dFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def ConstructAligned(*args):
        """ConstructAligned(dim1, dim2, align) -> SArray2dFloat"""
        return _Ravl.SArray2dFloat_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def Copy(self):
        """Copy(self) -> SArray2dFloat"""
        return _Ravl.SArray2dFloat_Copy(self)

    def Size1(self):
        """Size1(self) -> SizeT"""
        return _Ravl.SArray2dFloat_Size1(self)

    def Size2(self):
        """Size2(self) -> SizeT"""
        return _Ravl.SArray2dFloat_Size2(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray2dFloat_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray2dFloat_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.SArray2dFloat_Stride(self)

    def IsContinuous(self):
        """IsContinuous(self) -> bool"""
        return _Ravl.SArray2dFloat_IsContinuous(self)

    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.SArray2dFloat_Frame(self)

    def AsVector(self, alwaysCopy = False):
        """
        AsVector(self, alwaysCopy = False) -> SArray1dFloat
        AsVector(self) -> SArray1dFloat
        """
        return _Ravl.SArray2dFloat_AsVector(self, alwaysCopy)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray2dFloat
        __mul__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray2dFloat
        __div__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray2dFloat
        __add__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray2dFloat
        __sub__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray2dFloat
        __iadd__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray2dFloat
        __isub__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray2dFloat
        __imul__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray2dFloat
        __idiv__(self, number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___idiv__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, op) -> bool"""
        return _Ravl.SArray2dFloat___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, op) -> bool"""
        return _Ravl.SArray2dFloat___ne__(self, *args)

    def SumOfSqr(self):
        """SumOfSqr(self) -> float"""
        return _Ravl.SArray2dFloat_SumOfSqr(self)

    def Sum(self):
        """Sum(self) -> float"""
        return _Ravl.SArray2dFloat_Sum(self)

    def SliceRow(self, *args):
        """SliceRow(self, i) -> SArray1dFloat"""
        return _Ravl.SArray2dFloat_SliceRow(self, *args)

    def SetColumn(self, *args):
        """
        SetColumn(self, i, val)
        SetColumn(self, i, val)
        """
        return _Ravl.SArray2dFloat_SetColumn(self, *args)

    def SetRow(self, *args):
        """
        SetRow(self, i, val)
        SetRow(self, i, val)
        """
        return _Ravl.SArray2dFloat_SetRow(self, *args)

    def SetSubArray(self, *args):
        """SetSubArray(self, origin, vals)"""
        return _Ravl.SArray2dFloat_SetSubArray(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray2dFloat_Hash(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray2dFloat___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray2dFloat
    __del__ = lambda self : None;
SArray2dFloat_swigregister = _Ravl.SArray2dFloat_swigregister
SArray2dFloat_swigregister(SArray2dFloat)

def SArray2dFloat_ConstructAligned(*args):
  """SArray2dFloat_ConstructAligned(dim1, dim2, align) -> SArray2dFloat"""
  return _Ravl.SArray2dFloat_ConstructAligned(*args)

class SArray2dReal(_object):
    """Proxy of C++ RavlN::SArray2dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray2dReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray2dReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SArray2dReal
        __init__(self, dim1, dim2) -> SArray2dReal
        __init__(self, size) -> SArray2dReal
        __init__(self, arr, size1, size2) -> SArray2dReal
        __init__(self, arr, rng) -> SArray2dReal
        __init__(self, data, size1, size2, copyMemory = False, freeMemory = False, 
            stride = 0) -> SArray2dReal
        __init__(self, data, size1, size2, copyMemory = False, freeMemory = False) -> SArray2dReal
        __init__(self, data, size1, size2, copyMemory = False) -> SArray2dReal
        __init__(self, data, size1, size2) -> SArray2dReal
        """
        this = _Ravl.new_SArray2dReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def ConstructAligned(*args):
        """ConstructAligned(dim1, dim2, align) -> SArray2dReal"""
        return _Ravl.SArray2dReal_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def Copy(self):
        """Copy(self) -> SArray2dReal"""
        return _Ravl.SArray2dReal_Copy(self)

    def Size1(self):
        """Size1(self) -> SizeT"""
        return _Ravl.SArray2dReal_Size1(self)

    def Size2(self):
        """Size2(self) -> SizeT"""
        return _Ravl.SArray2dReal_Size2(self)

    def Contains(self, *args):
        """Contains(self, i) -> bool"""
        return _Ravl.SArray2dReal_Contains(self, *args)

    def Fill(self, *args):
        """Fill(self, d)"""
        return _Ravl.SArray2dReal_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.SArray2dReal_Stride(self)

    def IsContinuous(self):
        """IsContinuous(self) -> bool"""
        return _Ravl.SArray2dReal_IsContinuous(self)

    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.SArray2dReal_Frame(self)

    def AsVector(self, alwaysCopy = False):
        """
        AsVector(self, alwaysCopy = False) -> SArray1dReal
        AsVector(self) -> SArray1dReal
        """
        return _Ravl.SArray2dReal_AsVector(self, alwaysCopy)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> SArray2dReal
        __mul__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> SArray2dReal
        __div__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> SArray2dReal
        __add__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> SArray2dReal
        __sub__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> SArray2dReal
        __iadd__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> SArray2dReal
        __isub__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> SArray2dReal
        __imul__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> SArray2dReal
        __idiv__(self, number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___idiv__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, op) -> bool"""
        return _Ravl.SArray2dReal___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, op) -> bool"""
        return _Ravl.SArray2dReal___ne__(self, *args)

    def SumOfSqr(self):
        """SumOfSqr(self) -> double"""
        return _Ravl.SArray2dReal_SumOfSqr(self)

    def Sum(self):
        """Sum(self) -> double"""
        return _Ravl.SArray2dReal_Sum(self)

    def SliceRow(self, *args):
        """SliceRow(self, i) -> SArray1dReal"""
        return _Ravl.SArray2dReal_SliceRow(self, *args)

    def SetColumn(self, *args):
        """
        SetColumn(self, i, val)
        SetColumn(self, i, val)
        """
        return _Ravl.SArray2dReal_SetColumn(self, *args)

    def SetRow(self, *args):
        """
        SetRow(self, i, val)
        SetRow(self, i, val)
        """
        return _Ravl.SArray2dReal_SetRow(self, *args)

    def SetSubArray(self, *args):
        """SetSubArray(self, origin, vals)"""
        return _Ravl.SArray2dReal_SetSubArray(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.SArray2dReal_Hash(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SArray2dReal___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray2dReal
    __del__ = lambda self : None;
SArray2dReal_swigregister = _Ravl.SArray2dReal_swigregister
SArray2dReal_swigregister(SArray2dReal)

def SArray2dReal_ConstructAligned(*args):
  """SArray2dReal_ConstructAligned(dim1, dim2, align) -> SArray2dReal"""
  return _Ravl.SArray2dReal_ConstructAligned(*args)

class TVectorReal(SArray1dReal):
    """Proxy of C++ RavlN::TVectorC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray1dReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TVectorReal, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray1dReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TVectorReal, name)
    __repr__ = _swig_repr
    def Product(self):
        """Product(self) -> double"""
        return _Ravl.TVectorReal_Product(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> double"""
        return _Ravl.TVectorReal_SumOfSqr(self)

    def SumOfAbs(self):
        """SumOfAbs(self) -> double"""
        return _Ravl.TVectorReal_SumOfAbs(self)

    def MaxValue(self):
        """MaxValue(self) -> double"""
        return _Ravl.TVectorReal_MaxValue(self)

    def MaxMagnitude(self):
        """MaxMagnitude(self) -> double"""
        return _Ravl.TVectorReal_MaxMagnitude(self)

    def MaxAbsValue(self):
        """MaxAbsValue(self) -> double"""
        return _Ravl.TVectorReal_MaxAbsValue(self)

    def MinValue(self):
        """MinValue(self) -> double"""
        return _Ravl.TVectorReal_MinValue(self)

    def MinAbsValue(self):
        """MinAbsValue(self) -> double"""
        return _Ravl.TVectorReal_MinAbsValue(self)

    def Reciprocal(self):
        """Reciprocal(self) -> TVectorReal"""
        return _Ravl.TVectorReal_Reciprocal(self)

    def Modulus(self):
        """Modulus(self) -> double"""
        return _Ravl.TVectorReal_Modulus(self)

    def TMul(self, *args):
        """TMul(self, b) -> double"""
        return _Ravl.TVectorReal_TMul(self, *args)

    def Dot(self, *args):
        """Dot(self, v) -> double"""
        return _Ravl.TVectorReal_Dot(self, *args)

    def Dot2(self, *args):
        """Dot2(self, v1, v2) -> double"""
        return _Ravl.TVectorReal_Dot2(self, *args)

    def ElemMul(self, *args):
        """ElemMul(self, v2, result)"""
        return _Ravl.TVectorReal_ElemMul(self, *args)

    def ElemSum(self, *args):
        """ElemSum(self, v2, result)"""
        return _Ravl.TVectorReal_ElemSum(self, *args)

    def ElemSubtract(self, *args):
        """ElemSubtract(self, v2, result)"""
        return _Ravl.TVectorReal_ElemSubtract(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(self, min) -> TVectorReal"""
        return _Ravl.TVectorReal_SetSmallToBeZero(self, *args)

    def Unit(self):
        """Unit(self) -> TVectorReal"""
        return _Ravl.TVectorReal_Unit(self)

    def MakeUnit(self):
        """MakeUnit(self) -> TVectorReal"""
        return _Ravl.TVectorReal_MakeUnit(self)

    def MulAdd(self, *args):
        """MulAdd(self, i, a) -> TVectorReal"""
        return _Ravl.TVectorReal_MulAdd(self, *args)

    def MaxValueDistance(self, *args):
        """MaxValueDistance(self, i) -> double"""
        return _Ravl.TVectorReal_MaxValueDistance(self, *args)

    def CityBlockDistance(self, *args):
        """CityBlockDistance(self, i) -> double"""
        return _Ravl.TVectorReal_CityBlockDistance(self, *args)

    def SqrEuclidDistance(self, *args):
        """SqrEuclidDistance(self, i) -> double"""
        return _Ravl.TVectorReal_SqrEuclidDistance(self, *args)

    def EuclidDistance(self, *args):
        """EuclidDistance(self, i) -> double"""
        return _Ravl.TVectorReal_EuclidDistance(self, *args)

    def MaxIndex(self):
        """MaxIndex(self) -> IndexC"""
        return _Ravl.TVectorReal_MaxIndex(self)

    def MaxAbsIndex(self):
        """MaxAbsIndex(self) -> IndexC"""
        return _Ravl.TVectorReal_MaxAbsIndex(self)

    def MinIndex(self):
        """MinIndex(self) -> IndexC"""
        return _Ravl.TVectorReal_MinIndex(self)

    def MinAbsIndex(self):
        """MinAbsIndex(self) -> IndexC"""
        return _Ravl.TVectorReal_MinAbsIndex(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.TVectorReal___str__(self)

    def __init__(self): 
        """__init__(self) -> TVectorReal"""
        this = _Ravl.new_TVectorReal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_TVectorReal
    __del__ = lambda self : None;
TVectorReal_swigregister = _Ravl.TVectorReal_swigregister
TVectorReal_swigregister(TVectorReal)

class TVectorFloat(SArray1dFloat):
    """Proxy of C++ RavlN::TVectorC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray1dFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TVectorFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray1dFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TVectorFloat, name)
    __repr__ = _swig_repr
    def Product(self):
        """Product(self) -> float"""
        return _Ravl.TVectorFloat_Product(self)

    def SumOfSqr(self):
        """SumOfSqr(self) -> float"""
        return _Ravl.TVectorFloat_SumOfSqr(self)

    def SumOfAbs(self):
        """SumOfAbs(self) -> float"""
        return _Ravl.TVectorFloat_SumOfAbs(self)

    def MaxValue(self):
        """MaxValue(self) -> float"""
        return _Ravl.TVectorFloat_MaxValue(self)

    def MaxMagnitude(self):
        """MaxMagnitude(self) -> float"""
        return _Ravl.TVectorFloat_MaxMagnitude(self)

    def MaxAbsValue(self):
        """MaxAbsValue(self) -> float"""
        return _Ravl.TVectorFloat_MaxAbsValue(self)

    def MinValue(self):
        """MinValue(self) -> float"""
        return _Ravl.TVectorFloat_MinValue(self)

    def MinAbsValue(self):
        """MinAbsValue(self) -> float"""
        return _Ravl.TVectorFloat_MinAbsValue(self)

    def Reciprocal(self):
        """Reciprocal(self) -> TVectorFloat"""
        return _Ravl.TVectorFloat_Reciprocal(self)

    def Modulus(self):
        """Modulus(self) -> float"""
        return _Ravl.TVectorFloat_Modulus(self)

    def TMul(self, *args):
        """TMul(self, b) -> float"""
        return _Ravl.TVectorFloat_TMul(self, *args)

    def Dot(self, *args):
        """Dot(self, v) -> float"""
        return _Ravl.TVectorFloat_Dot(self, *args)

    def Dot2(self, *args):
        """Dot2(self, v1, v2) -> float"""
        return _Ravl.TVectorFloat_Dot2(self, *args)

    def ElemMul(self, *args):
        """ElemMul(self, v2, result)"""
        return _Ravl.TVectorFloat_ElemMul(self, *args)

    def ElemSum(self, *args):
        """ElemSum(self, v2, result)"""
        return _Ravl.TVectorFloat_ElemSum(self, *args)

    def ElemSubtract(self, *args):
        """ElemSubtract(self, v2, result)"""
        return _Ravl.TVectorFloat_ElemSubtract(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(self, min) -> TVectorFloat"""
        return _Ravl.TVectorFloat_SetSmallToBeZero(self, *args)

    def Unit(self):
        """Unit(self) -> TVectorFloat"""
        return _Ravl.TVectorFloat_Unit(self)

    def MakeUnit(self):
        """MakeUnit(self) -> TVectorFloat"""
        return _Ravl.TVectorFloat_MakeUnit(self)

    def MulAdd(self, *args):
        """MulAdd(self, i, a) -> TVectorFloat"""
        return _Ravl.TVectorFloat_MulAdd(self, *args)

    def MaxValueDistance(self, *args):
        """MaxValueDistance(self, i) -> float"""
        return _Ravl.TVectorFloat_MaxValueDistance(self, *args)

    def CityBlockDistance(self, *args):
        """CityBlockDistance(self, i) -> float"""
        return _Ravl.TVectorFloat_CityBlockDistance(self, *args)

    def SqrEuclidDistance(self, *args):
        """SqrEuclidDistance(self, i) -> float"""
        return _Ravl.TVectorFloat_SqrEuclidDistance(self, *args)

    def EuclidDistance(self, *args):
        """EuclidDistance(self, i) -> float"""
        return _Ravl.TVectorFloat_EuclidDistance(self, *args)

    def MaxIndex(self):
        """MaxIndex(self) -> IndexC"""
        return _Ravl.TVectorFloat_MaxIndex(self)

    def MaxAbsIndex(self):
        """MaxAbsIndex(self) -> IndexC"""
        return _Ravl.TVectorFloat_MaxAbsIndex(self)

    def MinIndex(self):
        """MinIndex(self) -> IndexC"""
        return _Ravl.TVectorFloat_MinIndex(self)

    def MinAbsIndex(self):
        """MinAbsIndex(self) -> IndexC"""
        return _Ravl.TVectorFloat_MinAbsIndex(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.TVectorFloat___str__(self)

    def __init__(self): 
        """__init__(self) -> TVectorFloat"""
        this = _Ravl.new_TVectorFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_TVectorFloat
    __del__ = lambda self : None;
TVectorFloat_swigregister = _Ravl.TVectorFloat_swigregister
TVectorFloat_swigregister(TVectorFloat)

class VectorC(TVectorReal):
    """Proxy of C++ RavlN::VectorC class"""
    __swig_setmethods__ = {}
    for _s in [TVectorReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorC, name, value)
    __swig_getmethods__ = {}
    for _s in [TVectorReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(dim, align) -> VectorC"""
        return _Ravl.VectorC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(self) -> VectorC
        __init__(self, size) -> VectorC
        __init__(self, oth) -> VectorC
        __init__(self, oth) -> VectorC
        __init__(self, oth) -> VectorC
        __init__(self, v1, v2) -> VectorC
        __init__(self, v1, v2, v3) -> VectorC
        __init__(self, v1, v2, v3, v4) -> VectorC
        __init__(self, v1, v2, v3, v4, v5) -> VectorC
        __init__(self, v1, v2, v3, v4, v5, v6) -> VectorC
        """
        this = _Ravl.new_VectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsReal(self):
        """IsReal(self) -> bool"""
        return _Ravl.VectorC_IsReal(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> VectorC
        __mul__(self, number) -> VectorC
        """
        return _Ravl.VectorC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(self, arr) -> VectorC
        __div__(self, number) -> VectorC
        """
        return _Ravl.VectorC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> VectorC
        __add__(self, number) -> VectorC
        """
        return _Ravl.VectorC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> VectorC
        __sub__(self, number) -> VectorC
        """
        return _Ravl.VectorC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> VectorC
        __iadd__(self, number) -> VectorC
        """
        return _Ravl.VectorC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> VectorC
        __isub__(self, number) -> VectorC
        """
        return _Ravl.VectorC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> VectorC
        __imul__(self, number) -> VectorC
        """
        return _Ravl.VectorC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> VectorC
        __idiv__(self, number) -> VectorC
        """
        return _Ravl.VectorC___idiv__(self, *args)

    def Join(self, *args):
        """
        Join(self, Oth) -> VectorC
        Join(self, Oth) -> VectorC
        """
        return _Ravl.VectorC_Join(self, *args)

    def Append(self, *args):
        """
        Append(self, a) -> VectorC
        Append(self, a) -> VectorC
        """
        return _Ravl.VectorC_Append(self, *args)

    def From(self, *args):
        """
        From(self, offset) -> VectorC
        From(self, offset, size) -> VectorC
        """
        return _Ravl.VectorC_From(self, *args)

    def After(self, *args):
        """After(self, offset) -> VectorC"""
        return _Ravl.VectorC_After(self, *args)

    def Before(self, *args):
        """Before(self, offset) -> VectorC"""
        return _Ravl.VectorC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vv) -> bool"""
        return _Ravl.VectorC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vv) -> bool"""
        return _Ravl.VectorC___ne__(self, *args)

    def Reciprocal(self):
        """Reciprocal(self) -> VectorC"""
        return _Ravl.VectorC_Reciprocal(self)

    def TMul(self, *args):
        """TMul(self, b) -> RealT"""
        return _Ravl.VectorC_TMul(self, *args)

    def Dot(self, *args):
        """Dot(self, v) -> RealT"""
        return _Ravl.VectorC_Dot(self, *args)

    def Dot2(self, *args):
        """Dot2(self, v1, v2) -> RealT"""
        return _Ravl.VectorC_Dot2(self, *args)

    def ElemMul(self, *args):
        """ElemMul(self, v2, result)"""
        return _Ravl.VectorC_ElemMul(self, *args)

    def ElemSum(self, *args):
        """ElemSum(self, v2, result)"""
        return _Ravl.VectorC_ElemSum(self, *args)

    def ElemSubtract(self, *args):
        """ElemSubtract(self, v2, result)"""
        return _Ravl.VectorC_ElemSubtract(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(self, min) -> VectorC"""
        return _Ravl.VectorC_SetSmallToBeZero(self, *args)

    def OuterProduct(self, *args):
        """
        OuterProduct(self, a) -> MatrixC
        OuterProduct(self, a, b) -> MatrixC
        OuterProduct(self) -> MatrixC
        """
        return _Ravl.VectorC_OuterProduct(self, *args)

    def Unit(self):
        """Unit(self) -> VectorC"""
        return _Ravl.VectorC_Unit(self)

    def MakeUnit(self):
        """MakeUnit(self) -> VectorC"""
        return _Ravl.VectorC_MakeUnit(self)

    def MulAdd(self, *args):
        """MulAdd(self, i, a) -> VectorC"""
        return _Ravl.VectorC_MulAdd(self, *args)

    def MaxValueDistance(self, *args):
        """MaxValueDistance(self, i) -> RealT"""
        return _Ravl.VectorC_MaxValueDistance(self, *args)

    def CityBlockDistance(self, *args):
        """CityBlockDistance(self, i) -> RealT"""
        return _Ravl.VectorC_CityBlockDistance(self, *args)

    def SqrEuclidDistance(self, *args):
        """SqrEuclidDistance(self, i) -> RealT"""
        return _Ravl.VectorC_SqrEuclidDistance(self, *args)

    def EuclidDistance(self, *args):
        """EuclidDistance(self, i) -> RealT"""
        return _Ravl.VectorC_EuclidDistance(self, *args)

    __swig_destroy__ = _Ravl.delete_VectorC
    __del__ = lambda self : None;
VectorC_swigregister = _Ravl.VectorC_swigregister
VectorC_swigregister(VectorC)

def VectorC_ConstructAligned(*args):
  """VectorC_ConstructAligned(dim, align) -> VectorC"""
  return _Ravl.VectorC_ConstructAligned(*args)


def SetZero(*args):
  """SetZero(vec)"""
  return _Ravl.SetZero(*args)

def Sigmoid(*args):
  """Sigmoid(z) -> VectorC"""
  return _Ravl.Sigmoid(*args)

def SigmoidIP(*args):
  """SigmoidIP(z)"""
  return _Ravl.SigmoidIP(*args)

def Log(*args):
  """Log(z) -> VectorC"""
  return _Ravl.Log(*args)

def LogIP(*args):
  """LogIP(z)"""
  return _Ravl.LogIP(*args)

def Exp(*args):
  """Exp(z) -> VectorC"""
  return _Ravl.Exp(*args)
class TMatrixReal(SArray2dReal):
    """Proxy of C++ RavlN::TMatrixC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray2dReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMatrixReal, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray2dReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMatrixReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TMatrixReal
        __init__(self, oth) -> TMatrixReal
        __init__(self, vec) -> TMatrixReal
        __init__(self, rows, cols) -> TMatrixReal
        __init__(self, rows, cols, data) -> TMatrixReal
        __init__(self, rows, cols, data, useCopy, manageMemory = False) -> TMatrixReal
        __init__(self, rows, cols, data, useCopy) -> TMatrixReal
        __init__(self, rows, cols, data) -> TMatrixReal
        __init__(self, rows, cols, data, stride = 0) -> TMatrixReal
        __init__(self, rows, cols, data) -> TMatrixReal
        __init__(self, v1, v2, v3, v4) -> TMatrixReal
        __init__(self, v1, v2, v3, v4, v5, v6, v7, v8, v9) -> TMatrixReal
        """
        this = _Ravl.new_TMatrixReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(self) -> SizeT"""
        return _Ravl.TMatrixReal_Rows(self)

    def Cols(self):
        """Cols(self) -> SizeT"""
        return _Ravl.TMatrixReal_Cols(self)

    def __mul__(self, *args):
        """
        __mul__(self, val) -> TMatrixReal
        __mul__(self, vector) -> TVectorReal
        __mul__(self, mat) -> TMatrixReal
        """
        return _Ravl.TMatrixReal___mul__(self, *args)

    def MulT(self, *args):
        """MulT(self, B) -> TMatrixReal"""
        return _Ravl.TMatrixReal_MulT(self, *args)

    def TMul(self, *args):
        """
        TMul(self, B) -> TMatrixReal
        TMul(self, vec) -> TVectorReal
        """
        return _Ravl.TMatrixReal_TMul(self, *args)

    def AAT(self):
        """AAT(self) -> TMatrixReal"""
        return _Ravl.TMatrixReal_AAT(self)

    def ATA(self):
        """ATA(self) -> TMatrixReal"""
        return _Ravl.TMatrixReal_ATA(self)

    def T(self):
        """T(self) -> TMatrixReal"""
        return _Ravl.TMatrixReal_T(self)

    def Identity(*args):
        """Identity(n) -> TMatrixReal"""
        return _Ravl.TMatrixReal_Identity(*args)

    if _newclass:Identity = staticmethod(Identity)
    __swig_getmethods__["Identity"] = lambda x: Identity
    def SetDiagonal(self, *args):
        """SetDiagonal(self, d) -> TMatrixReal"""
        return _Ravl.TMatrixReal_SetDiagonal(self, *args)

    def AddDiagonal(self, *args):
        """AddDiagonal(self, d) -> TMatrixReal"""
        return _Ravl.TMatrixReal_AddDiagonal(self, *args)

    def SubMatrix(self, *args):
        """SubMatrix(self, size1, size2) -> TMatrixReal"""
        return _Ravl.TMatrixReal_SubMatrix(self, *args)

    def SumOfAbs(self):
        """SumOfAbs(self) -> double"""
        return _Ravl.TMatrixReal_SumOfAbs(self)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(self, vec1, vec2) -> TMatrixReal
        AddOuterProduct(self, vec1, vec2, a) -> TMatrixReal
        """
        return _Ravl.TMatrixReal_AddOuterProduct(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(self, min) -> TMatrixReal"""
        return _Ravl.TMatrixReal_SetSmallToBeZero(self, *args)

    def MulAdd(self, *args):
        """MulAdd(self, i, a) -> TMatrixReal"""
        return _Ravl.TMatrixReal_MulAdd(self, *args)

    def SwapRows(self, *args):
        """SwapRows(self, i, j)"""
        return _Ravl.TMatrixReal_SwapRows(self, *args)

    __swig_destroy__ = _Ravl.delete_TMatrixReal
    __del__ = lambda self : None;
TMatrixReal_swigregister = _Ravl.TMatrixReal_swigregister
TMatrixReal_swigregister(TMatrixReal)

def RandomVector(*args):
  """
    RandomVector(n, scale = 1.0) -> VectorC
    RandomVector(n) -> VectorC
    """
  return _Ravl.RandomVector(*args)

def TMatrixReal_Identity(*args):
  """TMatrixReal_Identity(n) -> TMatrixReal"""
  return _Ravl.TMatrixReal_Identity(*args)

class TMatrixFloat(SArray2dFloat):
    """Proxy of C++ RavlN::TMatrixC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray2dFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMatrixFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray2dFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMatrixFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TMatrixFloat
        __init__(self, oth) -> TMatrixFloat
        __init__(self, vec) -> TMatrixFloat
        __init__(self, rows, cols) -> TMatrixFloat
        __init__(self, rows, cols, data) -> TMatrixFloat
        __init__(self, rows, cols, data, useCopy, manageMemory = False) -> TMatrixFloat
        __init__(self, rows, cols, data, useCopy) -> TMatrixFloat
        __init__(self, rows, cols, data) -> TMatrixFloat
        __init__(self, rows, cols, data, stride = 0) -> TMatrixFloat
        __init__(self, rows, cols, data) -> TMatrixFloat
        __init__(self, v1, v2, v3, v4) -> TMatrixFloat
        __init__(self, v1, v2, v3, v4, v5, v6, v7, v8, v9) -> TMatrixFloat
        """
        this = _Ravl.new_TMatrixFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(self) -> SizeT"""
        return _Ravl.TMatrixFloat_Rows(self)

    def Cols(self):
        """Cols(self) -> SizeT"""
        return _Ravl.TMatrixFloat_Cols(self)

    def __mul__(self, *args):
        """
        __mul__(self, val) -> TMatrixFloat
        __mul__(self, vector) -> TVectorFloat
        __mul__(self, mat) -> TMatrixFloat
        """
        return _Ravl.TMatrixFloat___mul__(self, *args)

    def MulT(self, *args):
        """MulT(self, B) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_MulT(self, *args)

    def TMul(self, *args):
        """
        TMul(self, B) -> TMatrixFloat
        TMul(self, vec) -> TVectorFloat
        """
        return _Ravl.TMatrixFloat_TMul(self, *args)

    def AAT(self):
        """AAT(self) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_AAT(self)

    def ATA(self):
        """ATA(self) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_ATA(self)

    def T(self):
        """T(self) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_T(self)

    def Identity(*args):
        """Identity(n) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_Identity(*args)

    if _newclass:Identity = staticmethod(Identity)
    __swig_getmethods__["Identity"] = lambda x: Identity
    def SetDiagonal(self, *args):
        """SetDiagonal(self, d) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_SetDiagonal(self, *args)

    def AddDiagonal(self, *args):
        """AddDiagonal(self, d) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_AddDiagonal(self, *args)

    def SubMatrix(self, *args):
        """SubMatrix(self, size1, size2) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_SubMatrix(self, *args)

    def SumOfAbs(self):
        """SumOfAbs(self) -> float"""
        return _Ravl.TMatrixFloat_SumOfAbs(self)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(self, vec1, vec2) -> TMatrixFloat
        AddOuterProduct(self, vec1, vec2, a) -> TMatrixFloat
        """
        return _Ravl.TMatrixFloat_AddOuterProduct(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(self, min) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_SetSmallToBeZero(self, *args)

    def MulAdd(self, *args):
        """MulAdd(self, i, a) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_MulAdd(self, *args)

    def SwapRows(self, *args):
        """SwapRows(self, i, j)"""
        return _Ravl.TMatrixFloat_SwapRows(self, *args)

    __swig_destroy__ = _Ravl.delete_TMatrixFloat
    __del__ = lambda self : None;
TMatrixFloat_swigregister = _Ravl.TMatrixFloat_swigregister
TMatrixFloat_swigregister(TMatrixFloat)

def TMatrixFloat_Identity(*args):
  """TMatrixFloat_Identity(n) -> TMatrixFloat"""
  return _Ravl.TMatrixFloat_Identity(*args)

class MatrixC(TMatrixReal):
    """Proxy of C++ RavlN::MatrixC class"""
    __swig_setmethods__ = {}
    for _s in [TMatrixReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixC, name, value)
    __swig_getmethods__ = {}
    for _s in [TMatrixReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixC, name)
    __repr__ = _swig_repr
    def IsReal(self):
        """IsReal(self) -> bool"""
        return _Ravl.MatrixC_IsReal(self)

    def __init__(self, *args): 
        """
        __init__(self) -> MatrixC
        __init__(self, vec) -> MatrixC
        __init__(self, rows, cols) -> MatrixC
        __init__(self, rows, cols, data) -> MatrixC
        __init__(self, rows, cols, data) -> MatrixC
        __init__(self, rows, cols, data) -> MatrixC
        __init__(self, rows, cols, data) -> MatrixC
        __init__(self, oth) -> MatrixC
        __init__(self, oth) -> MatrixC
        __init__(self, v1, v2, v3, v4) -> MatrixC
        __init__(self, v1, v2, v3, v4, v5, v6, v7, v8, v9) -> MatrixC
        __init__(self, oth) -> MatrixC
        """
        this = _Ravl.new_MatrixC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Inverse(self):
        """Inverse(self) -> MatrixC"""
        return _Ravl.MatrixC_Inverse(self)

    def InverseIP(self, *args):
        """
        InverseIP(self, det) -> bool
        InverseIP(self) -> bool
        """
        return _Ravl.MatrixC_InverseIP(self, *args)

    def PseudoInverse(self, thresh = 1e-5):
        """
        PseudoInverse(self, thresh = 1e-5) -> MatrixC
        PseudoInverse(self) -> MatrixC
        """
        return _Ravl.MatrixC_PseudoInverse(self, thresh)

    def Det(self):
        """Det(self) -> RealT"""
        return _Ravl.MatrixC_Det(self)

    def NormaliseRows(self):
        """NormaliseRows(self)"""
        return _Ravl.MatrixC_NormaliseRows(self)

    def NormaliseColumns(self):
        """NormaliseColumns(self)"""
        return _Ravl.MatrixC_NormaliseColumns(self)

    def AsVector(self, alwaysCopy = False):
        """
        AsVector(self, alwaysCopy = False) -> VectorC
        AsVector(self) -> VectorC
        """
        return _Ravl.MatrixC_AsVector(self, alwaysCopy)

    def __div__(self, *args):
        """
        __div__(self, arr) -> MatrixC
        __div__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, arr) -> MatrixC
        __add__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, arr) -> MatrixC
        __sub__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, arr) -> MatrixC
        __iadd__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, arr) -> MatrixC
        __isub__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, arr) -> MatrixC
        __imul__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, arr) -> MatrixC
        __idiv__(self, number) -> MatrixC
        """
        return _Ravl.MatrixC___idiv__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, op) -> bool"""
        return _Ravl.MatrixC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, op) -> bool"""
        return _Ravl.MatrixC___ne__(self, *args)

    def SumOfSqr(self):
        """SumOfSqr(self) -> RealT"""
        return _Ravl.MatrixC_SumOfSqr(self)

    def Sum(self):
        """Sum(self) -> RealT"""
        return _Ravl.MatrixC_Sum(self)

    def SliceRow(self, *args):
        """SliceRow(self, i) -> VectorC"""
        return _Ravl.MatrixC_SliceRow(self, *args)

    def SetColumn(self, *args):
        """
        SetColumn(self, i, val)
        SetColumn(self, i, val)
        """
        return _Ravl.MatrixC_SetColumn(self, *args)

    def SetRow(self, *args):
        """
        SetRow(self, i, val)
        SetRow(self, i, val)
        """
        return _Ravl.MatrixC_SetRow(self, *args)

    def SetSubArray(self, *args):
        """SetSubArray(self, origin, vals)"""
        return _Ravl.MatrixC_SetSubArray(self, *args)

    def Hash(self):
        """Hash(self) -> SizeT"""
        return _Ravl.MatrixC_Hash(self)

    def __mul__(self, *args):
        """
        __mul__(self, arr) -> MatrixC
        __mul__(self, number) -> MatrixC
        __mul__(self, vector) -> VectorC
        """
        return _Ravl.MatrixC___mul__(self, *args)

    def MulT(self, *args):
        """MulT(self, B) -> MatrixC"""
        return _Ravl.MatrixC_MulT(self, *args)

    def TMul(self, *args):
        """
        TMul(self, B) -> MatrixC
        TMul(self, vec) -> VectorC
        """
        return _Ravl.MatrixC_TMul(self, *args)

    def AAT(self):
        """AAT(self) -> MatrixC"""
        return _Ravl.MatrixC_AAT(self)

    def ATA(self):
        """ATA(self) -> MatrixC"""
        return _Ravl.MatrixC_ATA(self)

    def T(self):
        """T(self) -> MatrixC"""
        return _Ravl.MatrixC_T(self)

    def Identity(*args):
        """Identity(n) -> MatrixC"""
        return _Ravl.MatrixC_Identity(*args)

    if _newclass:Identity = staticmethod(Identity)
    __swig_getmethods__["Identity"] = lambda x: Identity
    def SetDiagonal(self, *args):
        """SetDiagonal(self, d) -> MatrixC"""
        return _Ravl.MatrixC_SetDiagonal(self, *args)

    def AddDiagonal(self, *args):
        """AddDiagonal(self, d) -> MatrixC"""
        return _Ravl.MatrixC_AddDiagonal(self, *args)

    def SubMatrix(self, *args):
        """SubMatrix(self, size1, size2) -> MatrixC"""
        return _Ravl.MatrixC_SubMatrix(self, *args)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(self, vec1, vec2) -> TMatrixReal
        AddOuterProduct(self, vec1, vec2, a) -> TMatrixReal
        AddOuterProduct(self, vec1, vec2) -> MatrixC
        AddOuterProduct(self, vec1, vec2, a) -> MatrixC
        """
        return _Ravl.MatrixC_AddOuterProduct(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(self, min) -> MatrixC"""
        return _Ravl.MatrixC_SetSmallToBeZero(self, *args)

    def MulAdd(self, *args):
        """MulAdd(self, i, a) -> MatrixC"""
        return _Ravl.MatrixC_MulAdd(self, *args)

    __swig_destroy__ = _Ravl.delete_MatrixC
    __del__ = lambda self : None;
MatrixC_swigregister = _Ravl.MatrixC_swigregister
MatrixC_swigregister(MatrixC)

def MatrixC_Identity(*args):
  """MatrixC_Identity(n) -> MatrixC"""
  return _Ravl.MatrixC_Identity(*args)


def EigenValues(*args):
  """EigenValues(M) -> VectorC"""
  return _Ravl.EigenValues(*args)

def EigenValuesIP(*args):
  """EigenValuesIP(M) -> VectorC"""
  return _Ravl.EigenValuesIP(*args)

def FastEigenValues(*args):
  """FastEigenValues(M) -> VectorC"""
  return _Ravl.FastEigenValues(*args)

def EigenVectors(*args):
  """EigenVectors(M, E) -> VectorC"""
  return _Ravl.EigenVectors(*args)

def EigenVectorsIP(*args):
  """EigenVectorsIP(M) -> VectorC"""
  return _Ravl.EigenVectorsIP(*args)

def FastEigenVectors(*args):
  """FastEigenVectors(M) -> VectorC"""
  return _Ravl.FastEigenVectors(*args)

def MaxEigenValue(*args):
  """MaxEigenValue(M, maxv) -> RealT"""
  return _Ravl.MaxEigenValue(*args)

def RandomPositiveDefiniteMatrix(*args):
  """RandomPositiveDefiniteMatrix(n) -> MatrixC"""
  return _Ravl.RandomPositiveDefiniteMatrix(*args)
class MatrixRUTC(MatrixC):
    """Proxy of C++ RavlN::MatrixRUTC class"""
    __swig_setmethods__ = {}
    for _s in [MatrixC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixRUTC, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixRUTC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MatrixRUTC
        __init__(self, size) -> MatrixRUTC
        __init__(self, oth) -> MatrixRUTC
        __init__(self, oth) -> MatrixRUTC
        """
        this = _Ravl.new_MatrixRUTC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Inverse(self):
        """Inverse(self) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC_Inverse(self)

    def InverseIP(self):
        """InverseIP(self) -> bool"""
        return _Ravl.MatrixRUTC_InverseIP(self)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(self, vec)
        AddOuterProduct(self, vec, a)
        """
        return _Ravl.MatrixRUTC_AddOuterProduct(self, *args)

    def SubtractOuterProduct(self, *args):
        """
        SubtractOuterProduct(self, vec)
        SubtractOuterProduct(self, vec, a)
        """
        return _Ravl.MatrixRUTC_SubtractOuterProduct(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, mat) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, mat) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___isub__(self, *args)

    def __imul__(self, *args):
        """__imul__(self, val) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, val) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___idiv__(self, *args)

    def ZeroLowerLeft(self):
        """ZeroLowerLeft(self)"""
        return _Ravl.MatrixRUTC_ZeroLowerLeft(self)

    def MakeSymmetric(self):
        """MakeSymmetric(self)"""
        return _Ravl.MatrixRUTC_MakeSymmetric(self)

    def Det(self):
        """Det(self) -> RealT"""
        return _Ravl.MatrixRUTC_Det(self)

    __swig_destroy__ = _Ravl.delete_MatrixRUTC
    __del__ = lambda self : None;
MatrixRUTC_swigregister = _Ravl.MatrixRUTC_swigregister
MatrixRUTC_swigregister(MatrixRUTC)

def SVD(*args):
  """
    SVD(M) -> VectorC
    SVD(M, u, v) -> VectorC
    """
  return _Ravl.SVD(*args)

def SVD_IP(*args):
  """
    SVD_IP(M) -> VectorC
    SVD_IP(M, u, v) -> VectorC
    """
  return _Ravl.SVD_IP(*args)

def RandomMatrix(*args):
  """
    RandomMatrix(n, m, scale = 1) -> MatrixC
    RandomMatrix(n, m) -> MatrixC
    """
  return _Ravl.RandomMatrix(*args)

def RandomSymmetricMatrix(*args):
  """
    RandomSymmetricMatrix(n, scale = 1) -> MatrixC
    RandomSymmetricMatrix(n) -> MatrixC
    """
  return _Ravl.RandomSymmetricMatrix(*args)

class VectorMatrixC(_object):
    """Proxy of C++ RavlN::VectorMatrixC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMatrixC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMatrixC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VectorMatrixC
        __init__(self, dim) -> VectorMatrixC
        __init__(self, vec, mat) -> VectorMatrixC
        __init__(self, vm) -> VectorMatrixC
        """
        this = _Ravl.new_VectorMatrixC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Vector(self, *args):
        """
        Vector(self) -> VectorC
        Vector(self) -> VectorC
        """
        return _Ravl.VectorMatrixC_Vector(self, *args)

    def Matrix(self, *args):
        """
        Matrix(self) -> MatrixC
        Matrix(self) -> MatrixC
        """
        return _Ravl.VectorMatrixC_Matrix(self, *args)

    def Copy(self):
        """Copy(self) -> VectorMatrixC"""
        return _Ravl.VectorMatrixC_Copy(self)

    def SetZero(self):
        """SetZero(self)"""
        return _Ravl.VectorMatrixC_SetZero(self)

    def Sort(self):
        """Sort(self)"""
        return _Ravl.VectorMatrixC_Sort(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.VectorMatrixC___str__(self)

    __swig_destroy__ = _Ravl.delete_VectorMatrixC
    __del__ = lambda self : None;
VectorMatrixC_swigregister = _Ravl.VectorMatrixC_swigregister
VectorMatrixC_swigregister(VectorMatrixC)

def OuterProductRUT(*args):
  """
    OuterProductRUT(vec) -> MatrixRUTC
    OuterProductRUT(vec, a) -> MatrixRUTC
    """
  return _Ravl.OuterProductRUT(*args)

def SolveIP(*args):
  """
    SolveIP(A, b) -> bool
    SolveIP(A, B) -> bool
    SolveIP(A, b) -> bool
    """
  return _Ravl.SolveIP(*args)

def Solve(*args):
  """
    Solve(A, b) -> VectorC
    Solve(A, B) -> MatrixC
    Solve(A, b) -> VectorC
    """
  return _Ravl.Solve(*args)

class MeanCovarianceC(_object):
    """Proxy of C++ RavlN::MeanCovarianceC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeanCovarianceC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeanCovarianceC, name)
    __repr__ = _swig_repr
    def Copy(self):
        """Copy(self) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_Copy(self)

    def __init__(self, *args): 
        """
        __init__(self) -> MeanCovarianceC
        __init__(self, meanCov) -> MeanCovarianceC
        __init__(self, n) -> MeanCovarianceC
        __init__(self, n) -> MeanCovarianceC
        __init__(self, point) -> MeanCovarianceC
        __init__(self, n, mean, ncov) -> MeanCovarianceC
        __init__(self, data, sampleStatistics = True) -> MeanCovarianceC
        __init__(self, data) -> MeanCovarianceC
        """
        this = _Ravl.new_MeanCovarianceC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Number(self):
        """Number(self) -> RealT"""
        return _Ravl.MeanCovarianceC_Number(self)

    def Mean(self, *args):
        """
        Mean(self) -> VectorC
        Mean(self) -> VectorC
        """
        return _Ravl.MeanCovarianceC_Mean(self, *args)

    def Covariance(self, *args):
        """
        Covariance(self) -> MatrixC
        Covariance(self) -> MatrixC
        """
        return _Ravl.MeanCovarianceC_Covariance(self, *args)

    def SetZero(self):
        """SetZero(self) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_SetZero(self)

    def __iadd__(self, *args):
        """
        __iadd__(self, point) -> MeanCovarianceC
        __iadd__(self, meanCov) -> MeanCovarianceC
        """
        return _Ravl.MeanCovarianceC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, point) -> MeanCovarianceC
        __isub__(self, meanCov) -> MeanCovarianceC
        """
        return _Ravl.MeanCovarianceC___isub__(self, *args)

    def Add(self, *args):
        """Add(self, point, var) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_Add(self, *args)

    def Remove(self, *args):
        """Remove(self, point, var) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_Remove(self, *args)

    def SetSum(self, *args):
        """SetSum(self, meanCov1, meanCov2) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_SetSum(self, *args)

    def __mul__(self, *args):
        """__mul__(self, oth) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC___mul__(self, *args)

    def Gauss(self, *args):
        """Gauss(self, vec) -> RealT"""
        return _Ravl.MeanCovarianceC_Gauss(self, *args)

    def MahalanobisDistance(self, *args):
        """MahalanobisDistance(self, vec) -> RealT"""
        return _Ravl.MeanCovarianceC_MahalanobisDistance(self, *args)

    def ClearCache(self):
        """ClearCache(self)"""
        return _Ravl.MeanCovarianceC_ClearCache(self)

    def Hash(self):
        """Hash(self) -> UIntT"""
        return _Ravl.MeanCovarianceC_Hash(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.MeanCovarianceC___str__(self)

    __swig_destroy__ = _Ravl.delete_MeanCovarianceC
    __del__ = lambda self : None;
MeanCovarianceC_swigregister = _Ravl.MeanCovarianceC_swigregister
MeanCovarianceC_swigregister(MeanCovarianceC)

class Affine2dC(_object):
    """Proxy of C++ RavlN::Affine2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affine2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affine2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Affine2dC"""
        this = _Ravl.new_Affine2dC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_Affine2dC
    __del__ = lambda self : None;
Affine2dC_swigregister = _Ravl.Affine2dC_swigregister
Affine2dC_swigregister(Affine2dC)

class DateC(_object):
    """Proxy of C++ RavlN::DateC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateC, name)
    __repr__ = _swig_repr
    def NowUTC():
        """NowUTC() -> DateC"""
        return _Ravl.DateC_NowUTC()

    if _newclass:NowUTC = staticmethod(NowUTC)
    __swig_getmethods__["NowUTC"] = lambda x: NowUTC
    def NowLocal():
        """NowLocal() -> DateC"""
        return _Ravl.DateC_NowLocal()

    if _newclass:NowLocal = staticmethod(NowLocal)
    __swig_getmethods__["NowLocal"] = lambda x: NowLocal
    def NowVirtual():
        """NowVirtual() -> DateC"""
        return _Ravl.DateC_NowVirtual()

    if _newclass:NowVirtual = staticmethod(NowVirtual)
    __swig_getmethods__["NowVirtual"] = lambda x: NowVirtual
    def TimeZoneOffset():
        """TimeZoneOffset() -> DateC"""
        return _Ravl.DateC_TimeZoneOffset()

    if _newclass:TimeZoneOffset = staticmethod(TimeZoneOffset)
    __swig_getmethods__["TimeZoneOffset"] = lambda x: TimeZoneOffset
    def __init__(self, *args): 
        """
        __init__(self) -> DateC
        __init__(self, setval, useVirt = False) -> DateC
        __init__(self, setval) -> DateC
        __init__(self, val) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0, sec = 0, usec = 0, 
            useLocalTimeZone = False) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0, sec = 0, usec = 0) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0, sec = 0) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0) -> DateC
        __init__(self, year, month, day, hour = 0) -> DateC
        __init__(self, year, month, day) -> DateC
        __init__(self, xsec, xusec) -> DateC
        __init__(self, val) -> DateC
        __init__(self, str) -> DateC
        """
        this = _Ravl.new_DateC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsLeapYear(*args):
        """IsLeapYear(year) -> bool"""
        return _Ravl.DateC_IsLeapYear(*args)

    if _newclass:IsLeapYear = staticmethod(IsLeapYear)
    __swig_getmethods__["IsLeapYear"] = lambda x: IsLeapYear
    def YearToDaysSince1970(*args):
        """YearToDaysSince1970(year) -> int"""
        return _Ravl.DateC_YearToDaysSince1970(*args)

    if _newclass:YearToDaysSince1970 = staticmethod(YearToDaysSince1970)
    __swig_getmethods__["YearToDaysSince1970"] = lambda x: YearToDaysSince1970
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DateC_IsValid(self)

    def IsZero(self):
        """IsZero(self) -> bool"""
        return _Ravl.DateC_IsZero(self)

    def SetInvalid(self):
        """SetInvalid(self)"""
        return _Ravl.DateC_SetInvalid(self)

    def SetToNow(self, useVirt = False):
        """
        SetToNow(self, useVirt = False)
        SetToNow(self)
        """
        return _Ravl.DateC_SetToNow(self, useVirt)

    def MaxUSeconds(self):
        """MaxUSeconds(self) -> long"""
        return _Ravl.DateC_MaxUSeconds(self)

    def Resolution(self):
        """Resolution(self) -> long"""
        return _Ravl.DateC_Resolution(self)

    def NormalisePos(self):
        """NormalisePos(self)"""
        return _Ravl.DateC_NormalisePos(self)

    def NormaliseNeg(self):
        """NormaliseNeg(self)"""
        return _Ravl.DateC_NormaliseNeg(self)

    def __eq__(self, *args):
        """__eq__(self, oth) -> bool"""
        return _Ravl.DateC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, oth) -> bool"""
        return _Ravl.DateC___ne__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, oth) -> bool"""
        return _Ravl.DateC___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, oth) -> bool"""
        return _Ravl.DateC___lt__(self, *args)

    def __ge__(self, *args):
        """__ge__(self, oth) -> bool"""
        return _Ravl.DateC___ge__(self, *args)

    def __le__(self, *args):
        """__le__(self, oth) -> bool"""
        return _Ravl.DateC___le__(self, *args)

    def __add__(self, *args):
        """__add__(self, oth) -> DateC"""
        return _Ravl.DateC___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, oth) -> DateC"""
        return _Ravl.DateC___sub__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, val) -> DateC
        __isub__(self, val) -> DateC
        """
        return _Ravl.DateC___isub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, val) -> DateC
        __iadd__(self, val) -> DateC
        """
        return _Ravl.DateC___iadd__(self, *args)

    def Text(self):
        """Text(self) -> StringC"""
        return _Ravl.DateC_Text(self)

    def ODBC(self, convertUTCToLocal = False):
        """
        ODBC(self, convertUTCToLocal = False) -> StringC
        ODBC(self) -> StringC
        """
        return _Ravl.DateC_ODBC(self, convertUTCToLocal)

    def SetODBC(self, *args):
        """SetODBC(self, odbcStr) -> bool"""
        return _Ravl.DateC_SetODBC(self, *args)

    def CTime(self, convertUTCToLocal = False):
        """
        CTime(self, convertUTCToLocal = False) -> StringC
        CTime(self) -> StringC
        """
        return _Ravl.DateC_CTime(self, convertUTCToLocal)

    def CTimeShort(self, convertUTCToLocal = False):
        """
        CTimeShort(self, convertUTCToLocal = False) -> StringC
        CTimeShort(self) -> StringC
        """
        return _Ravl.DateC_CTimeShort(self, convertUTCToLocal)

    def USeconds(self):
        """USeconds(self) -> long"""
        return _Ravl.DateC_USeconds(self)

    def TotalSeconds(self):
        """TotalSeconds(self) -> long"""
        return _Ravl.DateC_TotalSeconds(self)

    def Double(self):
        """Double(self) -> double"""
        return _Ravl.DateC_Double(self)

    def Seconds(self, convertUTCToLocal = False):
        """
        Seconds(self, convertUTCToLocal = False) -> IntT
        Seconds(self) -> IntT
        """
        return _Ravl.DateC_Seconds(self, convertUTCToLocal)

    def Minute(self, convertUTCToLocal = False):
        """
        Minute(self, convertUTCToLocal = False) -> IntT
        Minute(self) -> IntT
        """
        return _Ravl.DateC_Minute(self, convertUTCToLocal)

    def Hour(self, convertUTCToLocal = False):
        """
        Hour(self, convertUTCToLocal = False) -> IntT
        Hour(self) -> IntT
        """
        return _Ravl.DateC_Hour(self, convertUTCToLocal)

    def Month(self, convertUTCToLocal = False):
        """
        Month(self, convertUTCToLocal = False) -> IntT
        Month(self) -> IntT
        """
        return _Ravl.DateC_Month(self, convertUTCToLocal)

    def Year(self, convertUTCToLocal = False):
        """
        Year(self, convertUTCToLocal = False) -> IntT
        Year(self) -> IntT
        """
        return _Ravl.DateC_Year(self, convertUTCToLocal)

    def DayInMonth(self, convertUTCToLocal = False):
        """
        DayInMonth(self, convertUTCToLocal = False) -> IntT
        DayInMonth(self) -> IntT
        """
        return _Ravl.DateC_DayInMonth(self, convertUTCToLocal)

    def DayInYear(self, convertUTCToLocal = False):
        """
        DayInYear(self, convertUTCToLocal = False) -> IntT
        DayInYear(self) -> IntT
        """
        return _Ravl.DateC_DayInYear(self, convertUTCToLocal)

    def DayInWeek(self, convertUTCToLocal = False):
        """
        DayInWeek(self, convertUTCToLocal = False) -> IntT
        DayInWeek(self) -> IntT
        """
        return _Ravl.DateC_DayInWeek(self, convertUTCToLocal)

    def TextDayInWeek(self, convertUTCToLocal = False):
        """
        TextDayInWeek(self, convertUTCToLocal = False) -> StringC
        TextDayInWeek(self) -> StringC
        """
        return _Ravl.DateC_TextDayInWeek(self, convertUTCToLocal)

    def DaylightSaving(self):
        """DaylightSaving(self) -> bool"""
        return _Ravl.DateC_DaylightSaving(self)

    def Wait(self):
        """Wait(self) -> bool"""
        return _Ravl.DateC_Wait(self)

    __swig_destroy__ = _Ravl.delete_DateC
    __del__ = lambda self : None;
DateC_swigregister = _Ravl.DateC_swigregister
DateC_swigregister(DateC)

def DateC_NowUTC():
  """DateC_NowUTC() -> DateC"""
  return _Ravl.DateC_NowUTC()

def DateC_NowLocal():
  """DateC_NowLocal() -> DateC"""
  return _Ravl.DateC_NowLocal()

def DateC_NowVirtual():
  """DateC_NowVirtual() -> DateC"""
  return _Ravl.DateC_NowVirtual()

def DateC_TimeZoneOffset():
  """DateC_TimeZoneOffset() -> DateC"""
  return _Ravl.DateC_TimeZoneOffset()

def DateC_IsLeapYear(*args):
  """DateC_IsLeapYear(year) -> bool"""
  return _Ravl.DateC_IsLeapYear(*args)

def DateC_YearToDaysSince1970(*args):
  """DateC_YearToDaysSince1970(year) -> int"""
  return _Ravl.DateC_YearToDaysSince1970(*args)

class HashInt64Int64C(_object):
    """Proxy of C++ RavlN::HashC<(RavlN::Int64T,RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashInt64Int64C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashInt64Int64C, name)
    __repr__ = _swig_repr
    def __init__(self, nBins = 23): 
        """
        __init__(self, nBins = 23) -> HashInt64Int64C
        __init__(self) -> HashInt64Int64C
        """
        this = _Ravl.new_HashInt64Int64C(nBins)
        try: self.this.append(this)
        except: self.this = this
    def Lookup(self, *args):
        """Lookup(self, key) -> bool"""
        return _Ravl.HashInt64Int64C_Lookup(self, *args)

    def Update(self, *args):
        """
        Update(self, key, data) -> bool
        Update(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_Update(self, *args)

    def Insert(self, *args):
        """Insert(self, key, data) -> bool"""
        return _Ravl.HashInt64Int64C_Insert(self, *args)

    def Access(self, *args):
        """
        Access(self, key, default = long()) -> long
        Access(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_Access(self, *args)

    def AccessCopy(self, *args):
        """
        AccessCopy(self, key, default = long()) -> long
        AccessCopy(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_AccessCopy(self, *args)

    def Del(self, *args):
        """
        Del(self, key, allowResize = True) -> bool
        Del(self, key) -> bool
        """
        return _Ravl.HashInt64Int64C_Del(self, *args)

    def Get(self, *args):
        """
        Get(self, key, allowResize = True) -> long
        Get(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_Get(self, *args)

    def IsElm(self, *args):
        """IsElm(self, key) -> bool"""
        return _Ravl.HashInt64Int64C_IsElm(self, *args)

    def Empty(self):
        """Empty(self)"""
        return _Ravl.HashInt64Int64C_Empty(self)

    def Bins(self):
        """Bins(self) -> UIntT"""
        return _Ravl.HashInt64Int64C_Bins(self)

    def Resize(self, *args):
        """Resize(self, newSize)"""
        return _Ravl.HashInt64Int64C_Resize(self, *args)

    __swig_destroy__ = _Ravl.delete_HashInt64Int64C
    __del__ = lambda self : None;
HashInt64Int64C_swigregister = _Ravl.HashInt64Int64C_swigregister
HashInt64Int64C_swigregister(HashInt64Int64C)

class HashInt64Int64IterC(_object):
    """Proxy of C++ RavlN::HashIterC<(RavlN::Int64T,RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashInt64Int64IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashInt64Int64IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HashInt64Int64IterC
        __init__(self, nTab) -> HashInt64Int64IterC
        __init__(self, oth) -> HashInt64Int64IterC
        """
        this = _Ravl.new_HashInt64Int64IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def First(self):
        """First(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_First(self)

    def Next(self):
        """Next(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_Next(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_IsElm(self)

    def Key(self):
        """Key(self) -> long"""
        return _Ravl.HashInt64Int64IterC_Key(self)

    def Data(self, *args):
        """
        Data(self) -> long
        Data(self) -> long
        """
        return _Ravl.HashInt64Int64IterC_Data(self, *args)

    def Del(self):
        """Del(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_Del(self)

    __swig_destroy__ = _Ravl.delete_HashInt64Int64IterC
    __del__ = lambda self : None;
HashInt64Int64IterC_swigregister = _Ravl.HashInt64Int64IterC_swigregister
HashInt64Int64IterC_swigregister(HashInt64Int64IterC)

class DPIPortImageByteC(_object):
    """Proxy of C++ RavlN::DPIPortC<(RavlImageN::ImageC<(RavlN::ByteT)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPIPortImageByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPIPortImageByteC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DPIPortImageByteC"""
        this = _Ravl.new_DPIPortImageByteC()
        try: self.this.append(this)
        except: self.this = this
    def Get(self, *args):
        """Get(self, buff) -> bool"""
        return _Ravl.DPIPortImageByteC_Get(self, *args)

    def SetAttr(self, *args):
        """SetAttr(self, attrName, attrValue) -> bool"""
        return _Ravl.DPIPortImageByteC_SetAttr(self, *args)

    def GetAttr(self, *args):
        """GetAttr(self, attrName, attrValue) -> bool"""
        return _Ravl.DPIPortImageByteC_GetAttr(self, *args)

    __swig_destroy__ = _Ravl.delete_DPIPortImageByteC
    __del__ = lambda self : None;
DPIPortImageByteC_swigregister = _Ravl.DPIPortImageByteC_swigregister
DPIPortImageByteC_swigregister(DPIPortImageByteC)


def OpenISequence(*args):
  """OpenISequence(arg0, arg1) -> bool"""
  return _Ravl.OpenISequence(*args)
class FunctionC(_object):
    """Proxy of C++ RavlN::FunctionC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionC, name)
    __repr__ = _swig_repr
    def Apply(self, *args):
        """Apply(self, data) -> VectorC"""
        return _Ravl.FunctionC_Apply(self, *args)

    def InputSize(self):
        """InputSize(self) -> UIntT"""
        return _Ravl.FunctionC_InputSize(self)

    def OutputSize(self):
        """OutputSize(self) -> UIntT"""
        return _Ravl.FunctionC_OutputSize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.FunctionC___str__(self)

    def __init__(self): 
        """__init__(self) -> FunctionC"""
        this = _Ravl.new_FunctionC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_FunctionC
    __del__ = lambda self : None;
FunctionC_swigregister = _Ravl.FunctionC_swigregister
FunctionC_swigregister(FunctionC)

def SysLogOpen(*args):
  """
    SysLogOpen(name, logPid = False, sendStdErr = True, stdErrOnly = False, 
        facility = -1, logFileLine = False) -> bool
    SysLogOpen(name, logPid = False, sendStdErr = True, stdErrOnly = False, 
        facility = -1) -> bool
    SysLogOpen(name, logPid = False, sendStdErr = True, stdErrOnly = False) -> bool
    SysLogOpen(name, logPid = False, sendStdErr = True) -> bool
    SysLogOpen(name, logPid = False) -> bool
    SysLogOpen(name) -> bool
    """
  return _Ravl.SysLogOpen(*args)

class SampleOfUInt(_object):
    """Proxy of C++ RavlN::SampleC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleOfUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleOfUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, maxSize = 10) -> SampleOfUInt
        __init__(self) -> SampleOfUInt
        __init__(self, dat) -> SampleOfUInt
        """
        this = _Ravl.new_SampleOfUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(self) -> SampleOfUInt"""
        return _Ravl.SampleOfUInt_Copy(self)

    def CompactFrom(self, *args):
        """
        CompactFrom(self, start, size) -> SampleOfUInt
        CompactFrom(self, start, size) -> SampleOfUInt
        """
        return _Ravl.SampleOfUInt_CompactFrom(self, *args)

    def ExtractEntry(self, *args):
        """ExtractEntry(self, ind) -> unsigned int"""
        return _Ravl.SampleOfUInt_ExtractEntry(self, *args)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.SampleOfUInt_Fill(self, *args)

    def Append(self, *args):
        """
        Append(self, dat) -> IndexC
        Append(self, newData) -> IndexC
        """
        return _Ravl.SampleOfUInt_Append(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, dat) -> IndexC"""
        return _Ravl.SampleOfUInt___iadd__(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SampleOfUInt_Size(self)

    def PickElement(self, *args):
        """PickElement(self, i) -> unsigned int"""
        return _Ravl.SampleOfUInt_PickElement(self, *args)

    def Nth(self, *args):
        """
        Nth(self, i) -> unsigned int
        Nth(self, i) -> unsigned int
        """
        return _Ravl.SampleOfUInt_Nth(self, *args)

    def Pick(self):
        """Pick(self) -> unsigned int"""
        return _Ravl.SampleOfUInt_Pick(self)

    def Sample(self, *args):
        """
        Sample(self) -> unsigned int
        Sample(self) -> unsigned int
        """
        return _Ravl.SampleOfUInt_Sample(self, *args)

    def First(self, *args):
        """
        First(self) -> unsigned int
        First(self) -> unsigned int
        """
        return _Ravl.SampleOfUInt_First(self, *args)

    def Last(self, *args):
        """
        Last(self) -> unsigned int
        Last(self) -> unsigned int
        """
        return _Ravl.SampleOfUInt_Last(self, *args)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SampleOfUInt_IsEmpty(self)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.SampleOfUInt_IsValid(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> unsigned int"""
        return _Ravl.SampleOfUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SampleOfUInt___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SampleOfUInt___str__(self)

    __swig_destroy__ = _Ravl.delete_SampleOfUInt
    __del__ = lambda self : None;
SampleOfUInt_swigregister = _Ravl.SampleOfUInt_swigregister
SampleOfUInt_swigregister(SampleOfUInt)

class SampleOfVectorC(_object):
    """Proxy of C++ RavlN::SampleC<(RavlN::VectorC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleOfVectorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleOfVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, maxSize = 10) -> SampleOfVectorC
        __init__(self) -> SampleOfVectorC
        __init__(self, dat) -> SampleOfVectorC
        """
        this = _Ravl.new_SampleOfVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(self) -> SampleOfVectorC"""
        return _Ravl.SampleOfVectorC_Copy(self)

    def CompactFrom(self, *args):
        """
        CompactFrom(self, start, size) -> SampleOfVectorC
        CompactFrom(self, start, size) -> SampleOfVectorC
        """
        return _Ravl.SampleOfVectorC_CompactFrom(self, *args)

    def ExtractEntry(self, *args):
        """ExtractEntry(self, ind) -> VectorC"""
        return _Ravl.SampleOfVectorC_ExtractEntry(self, *args)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.SampleOfVectorC_Fill(self, *args)

    def Append(self, *args):
        """
        Append(self, dat) -> IndexC
        Append(self, newData) -> IndexC
        """
        return _Ravl.SampleOfVectorC_Append(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, dat) -> IndexC"""
        return _Ravl.SampleOfVectorC___iadd__(self, *args)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.SampleOfVectorC_Size(self)

    def PickElement(self, *args):
        """PickElement(self, i) -> VectorC"""
        return _Ravl.SampleOfVectorC_PickElement(self, *args)

    def Nth(self, *args):
        """
        Nth(self, i) -> VectorC
        Nth(self, i) -> VectorC
        """
        return _Ravl.SampleOfVectorC_Nth(self, *args)

    def Pick(self):
        """Pick(self) -> VectorC"""
        return _Ravl.SampleOfVectorC_Pick(self)

    def Sample(self, *args):
        """
        Sample(self) -> VectorC
        Sample(self) -> VectorC
        """
        return _Ravl.SampleOfVectorC_Sample(self, *args)

    def First(self, *args):
        """
        First(self) -> VectorC
        First(self) -> VectorC
        """
        return _Ravl.SampleOfVectorC_First(self, *args)

    def Last(self, *args):
        """
        Last(self) -> VectorC
        Last(self) -> VectorC
        """
        return _Ravl.SampleOfVectorC_Last(self, *args)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.SampleOfVectorC_IsEmpty(self)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.SampleOfVectorC_IsValid(self)

    def __getitem__(self, *args):
        """__getitem__(self, i) -> VectorC"""
        return _Ravl.SampleOfVectorC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, i, v)"""
        return _Ravl.SampleOfVectorC___setitem__(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.SampleOfVectorC___str__(self)

    __swig_destroy__ = _Ravl.delete_SampleOfVectorC
    __del__ = lambda self : None;
SampleOfVectorC_swigregister = _Ravl.SampleOfVectorC_swigregister
SampleOfVectorC_swigregister(SampleOfVectorC)

class SampleVectorC(SampleOfVectorC):
    """Proxy of C++ RavlN::SampleVectorC class"""
    __swig_setmethods__ = {}
    for _s in [SampleOfVectorC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleVectorC, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleOfVectorC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, maxSize = 10) -> SampleVectorC
        __init__(self) -> SampleVectorC
        __init__(self, dat) -> SampleVectorC
        __init__(self, svec) -> SampleVectorC
        __init__(self, svec, featureSet) -> SampleVectorC
        __init__(self, meanCovariance) -> SampleVectorC
        """
        this = _Ravl.new_SampleVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def VectorSize(self):
        """VectorSize(self) -> UIntT"""
        return _Ravl.SampleVectorC_VectorSize(self)

    def Mean(self, *args):
        """
        Mean(self) -> VectorC
        Mean(self, weights) -> VectorC
        """
        return _Ravl.SampleVectorC_Mean(self, *args)

    def MeanCovariance(self, *args):
        """
        MeanCovariance(self, sampleStatistics = True) -> MeanCovarianceC
        MeanCovariance(self) -> MeanCovarianceC
        MeanCovariance(self, weights, sampleStatistics = True) -> MeanCovarianceC
        MeanCovariance(self, weights) -> MeanCovarianceC
        """
        return _Ravl.SampleVectorC_MeanCovariance(self, *args)

    def SumOuterProducts(self, *args):
        """
        SumOuterProducts(self) -> MatrixRUTC
        SumOuterProducts(self, w) -> MatrixRUTC
        """
        return _Ravl.SampleVectorC_SumOuterProducts(self, *args)

    def TMul(self, *args):
        """
        TMul(self, sam2) -> MatrixC
        TMul(self, sam2, w) -> MatrixC
        """
        return _Ravl.SampleVectorC_TMul(self, *args)

    def Normalise(self, *args):
        """
        Normalise(self, stats)
        Normalise(self, func)
        Normalise(self, stats, sampleVector, addBiasElement = False)
        Normalise(self, stats, sampleVector)
        """
        return _Ravl.SampleVectorC_Normalise(self, *args)

    def UndoNormalisation(self, *args):
        """
        UndoNormalisation(self, stats)
        UndoNormalisation(self, stats, sampleVector, removeBiasElement = False)
        UndoNormalisation(self, stats, sampleVector)
        """
        return _Ravl.SampleVectorC_UndoNormalisation(self, *args)

    __swig_destroy__ = _Ravl.delete_SampleVectorC
    __del__ = lambda self : None;
SampleVectorC_swigregister = _Ravl.SampleVectorC_swigregister
SampleVectorC_swigregister(SampleVectorC)

class SampleLabelC(SampleOfUInt):
    """Proxy of C++ RavlN::SampleLabelC class"""
    __swig_setmethods__ = {}
    for _s in [SampleOfUInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleLabelC, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleOfUInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleLabelC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, maxSize = 10) -> SampleLabelC
        __init__(self) -> SampleLabelC
        __init__(self, dat) -> SampleLabelC
        __init__(self, sample) -> SampleLabelC
        """
        this = _Ravl.new_SampleLabelC(*args)
        try: self.this.append(this)
        except: self.this = this
    def MaxValue(self):
        """MaxValue(self) -> UIntT"""
        return _Ravl.SampleLabelC_MaxValue(self)

    def LabelSums(self):
        """LabelSums(self) -> SArray1dUInt"""
        return _Ravl.SampleLabelC_LabelSums(self)

    def SampleVector(self, *args):
        """
        SampleVector(self, inClass = 1, outClass = 0, maxLabel = -1) -> SampleOfVectorC
        SampleVector(self, inClass = 1, outClass = 0) -> SampleOfVectorC
        SampleVector(self, inClass = 1) -> SampleOfVectorC
        SampleVector(self) -> SampleOfVectorC
        """
        return _Ravl.SampleLabelC_SampleVector(self, *args)

    def SetClassName(self, *args):
        """SetClassName(self, label, className) -> bool"""
        return _Ravl.SampleLabelC_SetClassName(self, *args)

    def GetClassName(self, *args):
        """GetClassName(self, label, className) -> bool"""
        return _Ravl.SampleLabelC_GetClassName(self, *args)

    def Label2ClassNames(self):
        """Label2ClassNames(self) -> RavlN::RCHashC<(RavlN::UIntT,RavlN::StringC)>"""
        return _Ravl.SampleLabelC_Label2ClassNames(self)

    __swig_destroy__ = _Ravl.delete_SampleLabelC
    __del__ = lambda self : None;
SampleLabelC_swigregister = _Ravl.SampleLabelC_swigregister
SampleLabelC_swigregister(SampleLabelC)

class DataSetBaseC(_object):
    """Proxy of C++ RavlN::DataSetBaseC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetBaseC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetBaseC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DataSetBaseC"""
        this = _Ravl.new_DataSetBaseC()
        try: self.this.append(this)
        except: self.this = this
    def Shuffle(self):
        """Shuffle(self)"""
        return _Ravl.DataSetBaseC_Shuffle(self)

    __swig_destroy__ = _Ravl.delete_DataSetBaseC
    __del__ = lambda self : None;
DataSetBaseC_swigregister = _Ravl.DataSetBaseC_swigregister
DataSetBaseC_swigregister(DataSetBaseC)

class DataSet1SampleVectorC(DataSetBaseC):
    """Proxy of C++ RavlN::DataSet1C<(RavlN::SampleVectorC)> class"""
    __swig_setmethods__ = {}
    for _s in [DataSetBaseC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet1SampleVectorC, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSetBaseC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet1SampleVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DataSet1SampleVectorC
        __init__(self, sizeEstimate) -> DataSet1SampleVectorC
        __init__(self, dat) -> DataSet1SampleVectorC
        """
        this = _Ravl.new_DataSet1SampleVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Sample1(self, *args):
        """
        Sample1(self) -> SampleVectorC
        Sample1(self) -> SampleVectorC
        """
        return _Ravl.DataSet1SampleVectorC_Sample1(self, *args)

    def Append(self, *args):
        """
        Append(self, data) -> IndexC
        Append(self, data)
        """
        return _Ravl.DataSet1SampleVectorC_Append(self, *args)

    def ExtractSample(self, *args):
        """ExtractSample(self, proportion) -> DataSet1SampleVectorC"""
        return _Ravl.DataSet1SampleVectorC_ExtractSample(self, *args)

    def Size(self):
        """Size(self) -> UIntT"""
        return _Ravl.DataSet1SampleVectorC_Size(self)

    __swig_destroy__ = _Ravl.delete_DataSet1SampleVectorC
    __del__ = lambda self : None;
DataSet1SampleVectorC_swigregister = _Ravl.DataSet1SampleVectorC_swigregister
DataSet1SampleVectorC_swigregister(DataSet1SampleVectorC)

class DataSet2SampleVectorSampleLabelC(DataSet1SampleVectorC):
    """Proxy of C++ RavlN::DataSet2C<(RavlN::SampleVectorC,RavlN::SampleLabelC)> class"""
    __swig_setmethods__ = {}
    for _s in [DataSet1SampleVectorC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet2SampleVectorSampleLabelC, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSet1SampleVectorC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet2SampleVectorSampleLabelC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DataSet2SampleVectorSampleLabelC
        __init__(self, sizeEstimate) -> DataSet2SampleVectorSampleLabelC
        __init__(self, dat1, dat2) -> DataSet2SampleVectorSampleLabelC
        """
        this = _Ravl.new_DataSet2SampleVectorSampleLabelC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Sample2(self, *args):
        """
        Sample2(self) -> SampleLabelC
        Sample2(self) -> SampleLabelC
        """
        return _Ravl.DataSet2SampleVectorSampleLabelC_Sample2(self, *args)

    def Append(self, *args):
        """
        Append(self, data1, data2) -> IndexC
        Append(self, data)
        Append(self, sample1, element2)
        """
        return _Ravl.DataSet2SampleVectorSampleLabelC_Append(self, *args)

    def ExtractSample(self, *args):
        """ExtractSample(self, proportion) -> DataSet2SampleVectorSampleLabelC"""
        return _Ravl.DataSet2SampleVectorSampleLabelC_ExtractSample(self, *args)

    __swig_destroy__ = _Ravl.delete_DataSet2SampleVectorSampleLabelC
    __del__ = lambda self : None;
DataSet2SampleVectorSampleLabelC_swigregister = _Ravl.DataSet2SampleVectorSampleLabelC_swigregister
DataSet2SampleVectorSampleLabelC_swigregister(DataSet2SampleVectorSampleLabelC)

DATASET_NORMALISE_NONE = _Ravl.DATASET_NORMALISE_NONE
DATASET_NORMALISE_MEAN = _Ravl.DATASET_NORMALISE_MEAN
DATASET_NORMALISE_SCALE = _Ravl.DATASET_NORMALISE_SCALE
class DataSetVectorLabelC(DataSet2SampleVectorSampleLabelC):
    """Proxy of C++ RavlN::DataSetVectorLabelC class"""
    __swig_setmethods__ = {}
    for _s in [DataSet2SampleVectorSampleLabelC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetVectorLabelC, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSet2SampleVectorSampleLabelC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetVectorLabelC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DataSetVectorLabelC
        __init__(self, dataSet) -> DataSetVectorLabelC
        __init__(self, sizeEstimate) -> DataSetVectorLabelC
        __init__(self, vec, lab) -> DataSetVectorLabelC
        __init__(self, stats) -> DataSetVectorLabelC
        """
        this = _Ravl.new_DataSetVectorLabelC(*args)
        try: self.this.append(this)
        except: self.this = this
    def SeperateLabels(self):
        """SeperateLabels(self) -> RavlN::SArray1dC<(RavlN::SampleVectorC)>"""
        return _Ravl.DataSetVectorLabelC_SeperateLabels(self)

    def GlobalMean(self):
        """GlobalMean(self) -> VectorC"""
        return _Ravl.DataSetVectorLabelC_GlobalMean(self)

    def ClassMeans(self):
        """ClassMeans(self) -> SArray1dVectorC"""
        return _Ravl.DataSetVectorLabelC_ClassMeans(self)

    def ClassMeansLabels(self):
        """ClassMeansLabels(self) -> DataSetVectorLabelC"""
        return _Ravl.DataSetVectorLabelC_ClassMeansLabels(self)

    def ClassNums(self):
        """ClassNums(self) -> SArray1dUInt"""
        return _Ravl.DataSetVectorLabelC_ClassNums(self)

    def ClassStats(self, sampleStatistics = True):
        """
        ClassStats(self, sampleStatistics = True) -> RavlN::SArray1dC<(RavlN::MeanCovarianceC)>
        ClassStats(self) -> RavlN::SArray1dC<(RavlN::MeanCovarianceC)>
        """
        return _Ravl.DataSetVectorLabelC_ClassStats(self, sampleStatistics)

    def BetweenClassScatter(self):
        """BetweenClassScatter(self) -> MatrixC"""
        return _Ravl.DataSetVectorLabelC_BetweenClassScatter(self)

    def WithinClassScatter(self, sampleStatistics = False):
        """
        WithinClassScatter(self, sampleStatistics = False) -> MatrixC
        WithinClassScatter(self) -> MatrixC
        """
        return _Ravl.DataSetVectorLabelC_WithinClassScatter(self, sampleStatistics)

    def ExtractPerLabel(self, *args):
        """ExtractPerLabel(self, numSamples) -> DataSetVectorLabelC"""
        return _Ravl.DataSetVectorLabelC_ExtractPerLabel(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.DataSetVectorLabelC___str__(self)

    __swig_destroy__ = _Ravl.delete_DataSetVectorLabelC
    __del__ = lambda self : None;
DataSetVectorLabelC_swigregister = _Ravl.DataSetVectorLabelC_swigregister
DataSetVectorLabelC_swigregister(DataSetVectorLabelC)


def SaveDataSetVectorLabel(*args):
  """SaveDataSetVectorLabel(filename, dataset) -> bool"""
  return _Ravl.SaveDataSetVectorLabel(*args)

def SaveDataSetVectorLabelCSV(*args):
  """SaveDataSetVectorLabelCSV(filename, dataset) -> bool"""
  return _Ravl.SaveDataSetVectorLabelCSV(*args)

def LoadDataSetVectorLabelCSV(*args):
  """LoadDataSetVectorLabelCSV(filename, dataset) -> bool"""
  return _Ravl.LoadDataSetVectorLabelCSV(*args)
class ClassifierC(_object):
    """Proxy of C++ RavlN::ClassifierC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassifierC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassifierC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ClassifierC"""
        this = _Ravl.new_ClassifierC()
        try: self.this.append(this)
        except: self.this = this
    def Classify(self, *args):
        """Classify(self, vector) -> UIntT"""
        return _Ravl.ClassifierC_Classify(self, *args)

    def Confidence(self, *args):
        """Confidence(self, vector) -> VectorC"""
        return _Ravl.ClassifierC_Confidence(self, *args)

    __swig_destroy__ = _Ravl.delete_ClassifierC
    __del__ = lambda self : None;
ClassifierC_swigregister = _Ravl.ClassifierC_swigregister
ClassifierC_swigregister(ClassifierC)

def LoadDataSetVectorLabel(*args):
  """
    LoadDataSetVectorLabel(filename, dataset) -> bool
    LoadDataSetVectorLabel(dataSetFile, shuffle, equaliseSamples, samplesPerClass, 
        features, normaliseFunc, dataSet) -> bool
    LoadDataSetVectorLabel(dataSetFile, shuffle, equaliseSamples, samplesPerClass, 
        features, normType, normaliseFunc, dataSet) -> bool
    """
  return _Ravl.LoadDataSetVectorLabel(*args)

class ClassifierDiscriminantFunctionC(ClassifierC):
    """Proxy of C++ RavlN::ClassifierDiscriminantFunctionC class"""
    __swig_setmethods__ = {}
    for _s in [ClassifierC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassifierDiscriminantFunctionC, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassifierC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassifierDiscriminantFunctionC, name)
    __repr__ = _swig_repr
    def Discriminant(self):
        """Discriminant(self) -> FunctionC"""
        return _Ravl.ClassifierDiscriminantFunctionC_Discriminant(self)

    def __init__(self): 
        """__init__(self) -> ClassifierDiscriminantFunctionC"""
        this = _Ravl.new_ClassifierDiscriminantFunctionC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_ClassifierDiscriminantFunctionC
    __del__ = lambda self : None;
ClassifierDiscriminantFunctionC_swigregister = _Ravl.ClassifierDiscriminantFunctionC_swigregister
ClassifierDiscriminantFunctionC_swigregister(ClassifierDiscriminantFunctionC)

class DesignFunctionSupervisedC(_object):
    """Proxy of C++ RavlN::DesignFunctionSupervisedC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignFunctionSupervisedC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignFunctionSupervisedC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DesignFunctionSupervisedC
        __init__(self, other) -> DesignFunctionSupervisedC
        """
        this = _Ravl.new_DesignFunctionSupervisedC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Apply(self, *args):
        """
        Apply(self, data, out) -> FunctionC
        Apply(self, data, out, weight) -> FunctionC
        Apply(self, data, out) -> FunctionC
        Apply(self, data, out, weight) -> FunctionC
        """
        return _Ravl.DesignFunctionSupervisedC_Apply(self, *args)

    __swig_destroy__ = _Ravl.delete_DesignFunctionSupervisedC
    __del__ = lambda self : None;
DesignFunctionSupervisedC_swigregister = _Ravl.DesignFunctionSupervisedC_swigregister
DesignFunctionSupervisedC_swigregister(DesignFunctionSupervisedC)

class DesignFuncLSQC(DesignFunctionSupervisedC):
    """Proxy of C++ RavlN::DesignFuncLSQC class"""
    __swig_setmethods__ = {}
    for _s in [DesignFunctionSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignFuncLSQC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignFunctionSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignFuncLSQC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, order, orthogonal) -> DesignFuncLSQC"""
        this = _Ravl.new_DesignFuncLSQC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignFuncLSQC
    __del__ = lambda self : None;
DesignFuncLSQC_swigregister = _Ravl.DesignFuncLSQC_swigregister
DesignFuncLSQC_swigregister(DesignFuncLSQC)

class DesignClassifierSupervisedC(_object):
    """Proxy of C++ RavlN::DesignClassifierSupervisedC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignClassifierSupervisedC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignClassifierSupervisedC, name)
    __repr__ = _swig_repr
    def Apply(self, *args):
        """
        Apply(self, data, out) -> ClassifierC
        Apply(self, data, out, weight) -> ClassifierC
        Apply(self, data, out, featureSet) -> ClassifierC
        Apply(self, data, out, featureSet, weight) -> ClassifierC
        Apply(self, dset) -> ClassifierC
        """
        return _Ravl.DesignClassifierSupervisedC_Apply(self, *args)

    def __init__(self): 
        """__init__(self) -> DesignClassifierSupervisedC"""
        this = _Ravl.new_DesignClassifierSupervisedC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignClassifierSupervisedC
    __del__ = lambda self : None;
DesignClassifierSupervisedC_swigregister = _Ravl.DesignClassifierSupervisedC_swigregister
DesignClassifierSupervisedC_swigregister(DesignClassifierSupervisedC)

class DesignDiscriminantFunctionC(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignDiscriminantFunctionC class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignDiscriminantFunctionC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignDiscriminantFunctionC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, designFunc) -> DesignDiscriminantFunctionC"""
        this = _Ravl.new_DesignDiscriminantFunctionC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Apply(self, *args):
        """Apply(self, data, out) -> ClassifierDiscriminantFunctionC"""
        return _Ravl.DesignDiscriminantFunctionC_Apply(self, *args)

    __swig_destroy__ = _Ravl.delete_DesignDiscriminantFunctionC
    __del__ = lambda self : None;
DesignDiscriminantFunctionC_swigregister = _Ravl.DesignDiscriminantFunctionC_swigregister
DesignDiscriminantFunctionC_swigregister(DesignDiscriminantFunctionC)

class DesignClassifierNeuralNetwork2C(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignClassifierNeuralNetwork2C class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignClassifierNeuralNetwork2C, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignClassifierNeuralNetwork2C, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, nLayers, nHidden, doNormalisation, regularisation = 0, 
            desiredError = 0.00001, maxEpochs = 5000, 
            displayEpochs = 0, useSigmoid = True) -> DesignClassifierNeuralNetwork2C
        __init__(self, nLayers, nHidden, doNormalisation, regularisation = 0, 
            desiredError = 0.00001, maxEpochs = 5000, 
            displayEpochs = 0) -> DesignClassifierNeuralNetwork2C
        __init__(self, nLayers, nHidden, doNormalisation, regularisation = 0, 
            desiredError = 0.00001, maxEpochs = 5000) -> DesignClassifierNeuralNetwork2C
        __init__(self, nLayers, nHidden, doNormalisation, regularisation = 0, 
            desiredError = 0.00001) -> DesignClassifierNeuralNetwork2C
        __init__(self, nLayers, nHidden, doNormalisation, regularisation = 0) -> DesignClassifierNeuralNetwork2C
        __init__(self, nLayers, nHidden, doNormalisation) -> DesignClassifierNeuralNetwork2C
        """
        this = _Ravl.new_DesignClassifierNeuralNetwork2C(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignClassifierNeuralNetwork2C
    __del__ = lambda self : None;
DesignClassifierNeuralNetwork2C_swigregister = _Ravl.DesignClassifierNeuralNetwork2C_swigregister
DesignClassifierNeuralNetwork2C_swigregister(DesignClassifierNeuralNetwork2C)

class DesignClassifierLogisticRegressionC(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignClassifierLogisticRegressionC class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignClassifierLogisticRegressionC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignClassifierLogisticRegressionC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, regularisation) -> DesignClassifierLogisticRegressionC"""
        this = _Ravl.new_DesignClassifierLogisticRegressionC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignClassifierLogisticRegressionC
    __del__ = lambda self : None;
DesignClassifierLogisticRegressionC_swigregister = _Ravl.DesignClassifierLogisticRegressionC_swigregister
DesignClassifierLogisticRegressionC_swigregister(DesignClassifierLogisticRegressionC)

class ErrorC(_object):
    """Proxy of C++ RavlN::ErrorC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ErrorC"""
        this = _Ravl.new_ErrorC()
        try: self.this.append(this)
        except: self.this = this
    def Error(self, *args):
        """Error(self, classifier, dset) -> RealT"""
        return _Ravl.ErrorC_Error(self, *args)

    __swig_destroy__ = _Ravl.delete_ErrorC
    __del__ = lambda self : None;
ErrorC_swigregister = _Ravl.ErrorC_swigregister
ErrorC_swigregister(ErrorC)

class GnuPlot2dC(_object):
    """Proxy of C++ RavlN::GnuPlot2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnuPlot2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnuPlot2dC, name)
    __repr__ = _swig_repr
    def __init__(self, title = "My Plot"): 
        """
        __init__(self, title = "My Plot") -> GnuPlot2dC
        __init__(self) -> GnuPlot2dC
        """
        this = _Ravl.new_GnuPlot2dC(title)
        try: self.this.append(this)
        except: self.this = this
    def Plot(self, *args):
        """
        Plot(self, points, dataName = "") -> bool
        Plot(self, points) -> bool
        """
        return _Ravl.GnuPlot2dC_Plot(self, *args)

    def PlotFunction(self, *args):
        """
        PlotFunction(self, function) -> bool
        PlotFunction(self, function) -> bool
        """
        return _Ravl.GnuPlot2dC_PlotFunction(self, *args)

    def ScatterPlot(self, *args):
        """
        ScatterPlot(self, dataSet, fv1 = 0, fv2 = 1) -> bool
        ScatterPlot(self, dataSet, fv1 = 0) -> bool
        ScatterPlot(self, dataSet) -> bool
        """
        return _Ravl.GnuPlot2dC_ScatterPlot(self, *args)

    def SetXLabel(self, *args):
        """SetXLabel(self, xlabel) -> bool"""
        return _Ravl.GnuPlot2dC_SetXLabel(self, *args)

    def SetYLabel(self, *args):
        """SetYLabel(self, ylabel) -> bool"""
        return _Ravl.GnuPlot2dC_SetYLabel(self, *args)

    def SetXRange(self, *args):
        """SetXRange(self, xrange) -> bool"""
        return _Ravl.GnuPlot2dC_SetXRange(self, *args)

    def SetYRange(self, *args):
        """SetYRange(self, yrange) -> bool"""
        return _Ravl.GnuPlot2dC_SetYRange(self, *args)

    def SetLineStyle(self, *args):
        """SetLineStyle(self, lineStyle) -> bool"""
        return _Ravl.GnuPlot2dC_SetLineStyle(self, *args)

    def Command(self, *args):
        """Command(self, command) -> bool"""
        return _Ravl.GnuPlot2dC_Command(self, *args)

    __swig_destroy__ = _Ravl.delete_GnuPlot2dC
    __del__ = lambda self : None;
GnuPlot2dC_swigregister = _Ravl.GnuPlot2dC_swigregister
GnuPlot2dC_swigregister(GnuPlot2dC)



def Load(*args):
  """
    Load(filename, arg1) -> bool
    Load(filename, arg1) -> bool
    Load(filename, arg1) -> bool
    Load(filename, classifier) -> bool
    """
  return _Ravl.Load(*args)

def Save(*args):
  """
    Save(filename, arg1) -> bool
    Save(filename, arg1) -> bool
    Save(filename, arg1) -> bool
    Save(filename, classifier) -> bool
    """
  return _Ravl.Save(*args)

