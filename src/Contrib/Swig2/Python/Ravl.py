# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Recognition and Vision Library
RAVL provides a base C++ class library together with a range of
computer vision, pattern recognition and supporting tools.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Ravl', [dirname(__file__)])
        except ImportError:
            import _Ravl
            return _Ravl
        if fp is not None:
            try:
                _mod = imp.load_module('_Ravl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Ravl = swig_import_helper()
    del swig_import_helper
else:
    import _Ravl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SizeC(_object):
    """Proxy of C++ RavlN::SizeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SizeC self) -> SizeC
        __init__(RavlN::SizeC self, size_t const & value) -> SizeC
        """
        this = _Ravl.new_SizeC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_SizeC
    __del__ = lambda self : None;
SizeC_swigregister = _Ravl.SizeC_swigregister
SizeC_swigregister(SizeC)

class DListRealC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::RealT)> self) -> DListRealC"""
        this = _Ravl.new_DListRealC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListRealC self)"""
        return _Ravl.DListRealC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListRealC self, double const & dat)"""
        return _Ravl.DListRealC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListRealC self, double const & dat)"""
        return _Ravl.DListRealC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListRealC self) -> double"""
        return _Ravl.DListRealC_PopFirst(self)

    def PopLast(self):
        """PopLast(DListRealC self) -> double"""
        return _Ravl.DListRealC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListRealC self, DListRealC lst)"""
        return _Ravl.DListRealC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListRealC self, DListRealC lst)"""
        return _Ravl.DListRealC_MoveLast(self, *args)

    def First(self):
        """First(DListRealC self) -> double"""
        return _Ravl.DListRealC_First(self)

    def Last(self):
        """Last(DListRealC self) -> double"""
        return _Ravl.DListRealC_Last(self)

    def Del(self, *args):
        """Del(DListRealC self, double const & x) -> bool"""
        return _Ravl.DListRealC_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListRealC self, double const & x) -> bool"""
        return _Ravl.DListRealC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListRealC self, int n) -> double"""
        return _Ravl.DListRealC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListRealC
    __del__ = lambda self : None;
DListRealC_swigregister = _Ravl.DListRealC_swigregister
DListRealC_swigregister(DListRealC)

class DListRealIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::RealT)> self) -> DListRealIterC
        __init__(RavlN::DLIterC<(RavlN::RealT)> self, DListRealC lst) -> DListRealIterC
        """
        this = _Ravl.new_DListRealIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListRealIterC self) -> bool"""
        return _Ravl.DListRealIterC_IsValid(self)

    def First(self):
        """First(DListRealIterC self)"""
        return _Ravl.DListRealIterC_First(self)

    def Last(self):
        """Last(DListRealIterC self)"""
        return _Ravl.DListRealIterC_Last(self)

    def IsElm(self):
        """IsElm(DListRealIterC self) -> bool"""
        return _Ravl.DListRealIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListRealIterC self) -> bool"""
        return _Ravl.DListRealIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListRealIterC self) -> bool"""
        return _Ravl.DListRealIterC_IsLast(self)

    def Next(self):
        """Next(DListRealIterC self)"""
        return _Ravl.DListRealIterC_Next(self)

    def Prev(self):
        """Prev(DListRealIterC self)"""
        return _Ravl.DListRealIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListRealIterC self)"""
        return _Ravl.DListRealIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListRealIterC self)"""
        return _Ravl.DListRealIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListRealIterC self, RavlN::IntT n)"""
        return _Ravl.DListRealIterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListRealIterC self) -> double"""
        return _Ravl.DListRealIterC_NextData(self)

    def PrevData(self):
        """PrevData(DListRealIterC self) -> double"""
        return _Ravl.DListRealIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListRealIterC self) -> double"""
        return _Ravl.DListRealIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListRealIterC self) -> double"""
        return _Ravl.DListRealIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListRealIterC self) -> DListRealC"""
        return _Ravl.DListRealIterC_Tail(self)

    def Head(self):
        """Head(DListRealIterC self) -> DListRealC"""
        return _Ravl.DListRealIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListRealIterC self) -> DListRealC"""
        return _Ravl.DListRealIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListRealIterC self) -> DListRealC"""
        return _Ravl.DListRealIterC_InclusiveHead(self)

    def Data(self):
        """Data(DListRealIterC self) -> double"""
        return _Ravl.DListRealIterC_Data(self)

    def __deref__(self):
        """__deref__(DListRealIterC self) -> double *"""
        return _Ravl.DListRealIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListRealIterC
    __del__ = lambda self : None;
DListRealIterC_swigregister = _Ravl.DListRealIterC_swigregister
DListRealIterC_swigregister(DListRealIterC)

class DListRealConstIterC(DListRealIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListRealIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListRealIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::ConstDLIterC<(RavlN::RealT)> self) -> DListRealConstIterC
        __init__(RavlN::ConstDLIterC<(RavlN::RealT)> self, DListRealC copy) -> DListRealConstIterC
        """
        this = _Ravl.new_DListRealConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListRealConstIterC
    __del__ = lambda self : None;
DListRealConstIterC_swigregister = _Ravl.DListRealConstIterC_swigregister
DListRealConstIterC_swigregister(DListRealConstIterC)

class DListIntC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::IntT)> self) -> DListIntC"""
        this = _Ravl.new_DListIntC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListIntC self)"""
        return _Ravl.DListIntC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListIntC self, int const & dat)"""
        return _Ravl.DListIntC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListIntC self, int const & dat)"""
        return _Ravl.DListIntC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListIntC self) -> int"""
        return _Ravl.DListIntC_PopFirst(self)

    def PopLast(self):
        """PopLast(DListIntC self) -> int"""
        return _Ravl.DListIntC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListIntC self, DListIntC lst)"""
        return _Ravl.DListIntC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListIntC self, DListIntC lst)"""
        return _Ravl.DListIntC_MoveLast(self, *args)

    def First(self):
        """First(DListIntC self) -> int"""
        return _Ravl.DListIntC_First(self)

    def Last(self):
        """Last(DListIntC self) -> int"""
        return _Ravl.DListIntC_Last(self)

    def Del(self, *args):
        """Del(DListIntC self, int const & x) -> bool"""
        return _Ravl.DListIntC_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListIntC self, int const & x) -> bool"""
        return _Ravl.DListIntC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListIntC self, int n) -> int"""
        return _Ravl.DListIntC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListIntC
    __del__ = lambda self : None;
DListIntC_swigregister = _Ravl.DListIntC_swigregister
DListIntC_swigregister(DListIntC)

class DListIntIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::IntT)> self) -> DListIntIterC
        __init__(RavlN::DLIterC<(RavlN::IntT)> self, DListIntC lst) -> DListIntIterC
        """
        this = _Ravl.new_DListIntIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListIntIterC self) -> bool"""
        return _Ravl.DListIntIterC_IsValid(self)

    def First(self):
        """First(DListIntIterC self)"""
        return _Ravl.DListIntIterC_First(self)

    def Last(self):
        """Last(DListIntIterC self)"""
        return _Ravl.DListIntIterC_Last(self)

    def IsElm(self):
        """IsElm(DListIntIterC self) -> bool"""
        return _Ravl.DListIntIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListIntIterC self) -> bool"""
        return _Ravl.DListIntIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListIntIterC self) -> bool"""
        return _Ravl.DListIntIterC_IsLast(self)

    def Next(self):
        """Next(DListIntIterC self)"""
        return _Ravl.DListIntIterC_Next(self)

    def Prev(self):
        """Prev(DListIntIterC self)"""
        return _Ravl.DListIntIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListIntIterC self)"""
        return _Ravl.DListIntIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListIntIterC self)"""
        return _Ravl.DListIntIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListIntIterC self, RavlN::IntT n)"""
        return _Ravl.DListIntIterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListIntIterC self) -> int"""
        return _Ravl.DListIntIterC_NextData(self)

    def PrevData(self):
        """PrevData(DListIntIterC self) -> int"""
        return _Ravl.DListIntIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListIntIterC self) -> int"""
        return _Ravl.DListIntIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListIntIterC self) -> int"""
        return _Ravl.DListIntIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListIntIterC self) -> DListIntC"""
        return _Ravl.DListIntIterC_Tail(self)

    def Head(self):
        """Head(DListIntIterC self) -> DListIntC"""
        return _Ravl.DListIntIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListIntIterC self) -> DListIntC"""
        return _Ravl.DListIntIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListIntIterC self) -> DListIntC"""
        return _Ravl.DListIntIterC_InclusiveHead(self)

    def Data(self):
        """Data(DListIntIterC self) -> int"""
        return _Ravl.DListIntIterC_Data(self)

    def __deref__(self):
        """__deref__(DListIntIterC self) -> int *"""
        return _Ravl.DListIntIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListIntIterC
    __del__ = lambda self : None;
DListIntIterC_swigregister = _Ravl.DListIntIterC_swigregister
DListIntIterC_swigregister(DListIntIterC)

class DListIntConstIterC(DListIntIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListIntIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListIntIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::ConstDLIterC<(RavlN::IntT)> self) -> DListIntConstIterC
        __init__(RavlN::ConstDLIterC<(RavlN::IntT)> self, DListIntC copy) -> DListIntConstIterC
        """
        this = _Ravl.new_DListIntConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListIntConstIterC
    __del__ = lambda self : None;
DListIntConstIterC_swigregister = _Ravl.DListIntConstIterC_swigregister
DListIntConstIterC_swigregister(DListIntConstIterC)

class DListUIntC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::UIntT)> self) -> DListUIntC"""
        this = _Ravl.new_DListUIntC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListUIntC self)"""
        return _Ravl.DListUIntC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListUIntC self, unsigned int const & dat)"""
        return _Ravl.DListUIntC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListUIntC self, unsigned int const & dat)"""
        return _Ravl.DListUIntC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListUIntC self) -> unsigned int"""
        return _Ravl.DListUIntC_PopFirst(self)

    def PopLast(self):
        """PopLast(DListUIntC self) -> unsigned int"""
        return _Ravl.DListUIntC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListUIntC self, DListUIntC lst)"""
        return _Ravl.DListUIntC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListUIntC self, DListUIntC lst)"""
        return _Ravl.DListUIntC_MoveLast(self, *args)

    def First(self):
        """First(DListUIntC self) -> unsigned int"""
        return _Ravl.DListUIntC_First(self)

    def Last(self):
        """Last(DListUIntC self) -> unsigned int"""
        return _Ravl.DListUIntC_Last(self)

    def Del(self, *args):
        """Del(DListUIntC self, unsigned int const & x) -> bool"""
        return _Ravl.DListUIntC_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListUIntC self, unsigned int const & x) -> bool"""
        return _Ravl.DListUIntC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListUIntC self, int n) -> unsigned int"""
        return _Ravl.DListUIntC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListUIntC
    __del__ = lambda self : None;
DListUIntC_swigregister = _Ravl.DListUIntC_swigregister
DListUIntC_swigregister(DListUIntC)

class DListUIntIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::UIntT)> self) -> DListUIntIterC
        __init__(RavlN::DLIterC<(RavlN::UIntT)> self, DListUIntC lst) -> DListUIntIterC
        """
        this = _Ravl.new_DListUIntIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListUIntIterC self) -> bool"""
        return _Ravl.DListUIntIterC_IsValid(self)

    def First(self):
        """First(DListUIntIterC self)"""
        return _Ravl.DListUIntIterC_First(self)

    def Last(self):
        """Last(DListUIntIterC self)"""
        return _Ravl.DListUIntIterC_Last(self)

    def IsElm(self):
        """IsElm(DListUIntIterC self) -> bool"""
        return _Ravl.DListUIntIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListUIntIterC self) -> bool"""
        return _Ravl.DListUIntIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListUIntIterC self) -> bool"""
        return _Ravl.DListUIntIterC_IsLast(self)

    def Next(self):
        """Next(DListUIntIterC self)"""
        return _Ravl.DListUIntIterC_Next(self)

    def Prev(self):
        """Prev(DListUIntIterC self)"""
        return _Ravl.DListUIntIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListUIntIterC self)"""
        return _Ravl.DListUIntIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListUIntIterC self)"""
        return _Ravl.DListUIntIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListUIntIterC self, RavlN::IntT n)"""
        return _Ravl.DListUIntIterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListUIntIterC self) -> unsigned int"""
        return _Ravl.DListUIntIterC_NextData(self)

    def PrevData(self):
        """PrevData(DListUIntIterC self) -> unsigned int"""
        return _Ravl.DListUIntIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListUIntIterC self) -> unsigned int"""
        return _Ravl.DListUIntIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListUIntIterC self) -> unsigned int"""
        return _Ravl.DListUIntIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListUIntIterC self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_Tail(self)

    def Head(self):
        """Head(DListUIntIterC self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListUIntIterC self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListUIntIterC self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_InclusiveHead(self)

    def Data(self):
        """Data(DListUIntIterC self) -> unsigned int"""
        return _Ravl.DListUIntIterC_Data(self)

    def __deref__(self):
        """__deref__(DListUIntIterC self) -> unsigned int *"""
        return _Ravl.DListUIntIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListUIntIterC
    __del__ = lambda self : None;
DListUIntIterC_swigregister = _Ravl.DListUIntIterC_swigregister
DListUIntIterC_swigregister(DListUIntIterC)

class DListUIntConstIterC(DListUIntIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListUIntIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListUIntIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::ConstDLIterC<(RavlN::UIntT)> self) -> DListUIntConstIterC
        __init__(RavlN::ConstDLIterC<(RavlN::UIntT)> self, DListUIntC copy) -> DListUIntConstIterC
        """
        this = _Ravl.new_DListUIntConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListUIntConstIterC
    __del__ = lambda self : None;
DListUIntConstIterC_swigregister = _Ravl.DListUIntConstIterC_swigregister
DListUIntConstIterC_swigregister(DListUIntConstIterC)

class DListInt64C(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::Int64T)> self) -> DListInt64C"""
        this = _Ravl.new_DListInt64C()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListInt64C self)"""
        return _Ravl.DListInt64C_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListInt64C self, long const & dat)"""
        return _Ravl.DListInt64C_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListInt64C self, long const & dat)"""
        return _Ravl.DListInt64C_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListInt64C self) -> long"""
        return _Ravl.DListInt64C_PopFirst(self)

    def PopLast(self):
        """PopLast(DListInt64C self) -> long"""
        return _Ravl.DListInt64C_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListInt64C self, DListInt64C lst)"""
        return _Ravl.DListInt64C_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListInt64C self, DListInt64C lst)"""
        return _Ravl.DListInt64C_MoveLast(self, *args)

    def First(self):
        """First(DListInt64C self) -> long"""
        return _Ravl.DListInt64C_First(self)

    def Last(self):
        """Last(DListInt64C self) -> long"""
        return _Ravl.DListInt64C_Last(self)

    def Del(self, *args):
        """Del(DListInt64C self, long const & x) -> bool"""
        return _Ravl.DListInt64C_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListInt64C self, long const & x) -> bool"""
        return _Ravl.DListInt64C_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListInt64C self, int n) -> long"""
        return _Ravl.DListInt64C_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListInt64C
    __del__ = lambda self : None;
DListInt64C_swigregister = _Ravl.DListInt64C_swigregister
DListInt64C_swigregister(DListInt64C)

class DListInt64IterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::Int64T)> self) -> DListInt64IterC
        __init__(RavlN::DLIterC<(RavlN::Int64T)> self, DListInt64C lst) -> DListInt64IterC
        """
        this = _Ravl.new_DListInt64IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListInt64IterC self) -> bool"""
        return _Ravl.DListInt64IterC_IsValid(self)

    def First(self):
        """First(DListInt64IterC self)"""
        return _Ravl.DListInt64IterC_First(self)

    def Last(self):
        """Last(DListInt64IterC self)"""
        return _Ravl.DListInt64IterC_Last(self)

    def IsElm(self):
        """IsElm(DListInt64IterC self) -> bool"""
        return _Ravl.DListInt64IterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListInt64IterC self) -> bool"""
        return _Ravl.DListInt64IterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListInt64IterC self) -> bool"""
        return _Ravl.DListInt64IterC_IsLast(self)

    def Next(self):
        """Next(DListInt64IterC self)"""
        return _Ravl.DListInt64IterC_Next(self)

    def Prev(self):
        """Prev(DListInt64IterC self)"""
        return _Ravl.DListInt64IterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListInt64IterC self)"""
        return _Ravl.DListInt64IterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListInt64IterC self)"""
        return _Ravl.DListInt64IterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListInt64IterC self, RavlN::IntT n)"""
        return _Ravl.DListInt64IterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListInt64IterC self) -> long"""
        return _Ravl.DListInt64IterC_NextData(self)

    def PrevData(self):
        """PrevData(DListInt64IterC self) -> long"""
        return _Ravl.DListInt64IterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListInt64IterC self) -> long"""
        return _Ravl.DListInt64IterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListInt64IterC self) -> long"""
        return _Ravl.DListInt64IterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListInt64IterC self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_Tail(self)

    def Head(self):
        """Head(DListInt64IterC self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListInt64IterC self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListInt64IterC self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_InclusiveHead(self)

    def Data(self):
        """Data(DListInt64IterC self) -> long"""
        return _Ravl.DListInt64IterC_Data(self)

    def __deref__(self):
        """__deref__(DListInt64IterC self) -> long *"""
        return _Ravl.DListInt64IterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListInt64IterC
    __del__ = lambda self : None;
DListInt64IterC_swigregister = _Ravl.DListInt64IterC_swigregister
DListInt64IterC_swigregister(DListInt64IterC)

class DListInt64ConstIterC(DListInt64IterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    for _s in [DListInt64IterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64ConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListInt64IterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64ConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::ConstDLIterC<(RavlN::Int64T)> self) -> DListInt64ConstIterC
        __init__(RavlN::ConstDLIterC<(RavlN::Int64T)> self, DListInt64C copy) -> DListInt64ConstIterC
        """
        this = _Ravl.new_DListInt64ConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListInt64ConstIterC
    __del__ = lambda self : None;
DListInt64ConstIterC_swigregister = _Ravl.DListInt64ConstIterC_swigregister
DListInt64ConstIterC_swigregister(DListInt64ConstIterC)

class DListInt16C(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::Int16T)> self) -> DListInt16C"""
        this = _Ravl.new_DListInt16C()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListInt16C self)"""
        return _Ravl.DListInt16C_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListInt16C self, short const & dat)"""
        return _Ravl.DListInt16C_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListInt16C self, short const & dat)"""
        return _Ravl.DListInt16C_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListInt16C self) -> short"""
        return _Ravl.DListInt16C_PopFirst(self)

    def PopLast(self):
        """PopLast(DListInt16C self) -> short"""
        return _Ravl.DListInt16C_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListInt16C self, DListInt16C lst)"""
        return _Ravl.DListInt16C_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListInt16C self, DListInt16C lst)"""
        return _Ravl.DListInt16C_MoveLast(self, *args)

    def First(self):
        """First(DListInt16C self) -> short"""
        return _Ravl.DListInt16C_First(self)

    def Last(self):
        """Last(DListInt16C self) -> short"""
        return _Ravl.DListInt16C_Last(self)

    def Del(self, *args):
        """Del(DListInt16C self, short const & x) -> bool"""
        return _Ravl.DListInt16C_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListInt16C self, short const & x) -> bool"""
        return _Ravl.DListInt16C_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListInt16C self, int n) -> short"""
        return _Ravl.DListInt16C_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListInt16C
    __del__ = lambda self : None;
DListInt16C_swigregister = _Ravl.DListInt16C_swigregister
DListInt16C_swigregister(DListInt16C)

class DListInt16IterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::Int16T)> self) -> DListInt16IterC
        __init__(RavlN::DLIterC<(RavlN::Int16T)> self, DListInt16C lst) -> DListInt16IterC
        """
        this = _Ravl.new_DListInt16IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListInt16IterC self) -> bool"""
        return _Ravl.DListInt16IterC_IsValid(self)

    def First(self):
        """First(DListInt16IterC self)"""
        return _Ravl.DListInt16IterC_First(self)

    def Last(self):
        """Last(DListInt16IterC self)"""
        return _Ravl.DListInt16IterC_Last(self)

    def IsElm(self):
        """IsElm(DListInt16IterC self) -> bool"""
        return _Ravl.DListInt16IterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListInt16IterC self) -> bool"""
        return _Ravl.DListInt16IterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListInt16IterC self) -> bool"""
        return _Ravl.DListInt16IterC_IsLast(self)

    def Next(self):
        """Next(DListInt16IterC self)"""
        return _Ravl.DListInt16IterC_Next(self)

    def Prev(self):
        """Prev(DListInt16IterC self)"""
        return _Ravl.DListInt16IterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListInt16IterC self)"""
        return _Ravl.DListInt16IterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListInt16IterC self)"""
        return _Ravl.DListInt16IterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListInt16IterC self, RavlN::IntT n)"""
        return _Ravl.DListInt16IterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListInt16IterC self) -> short"""
        return _Ravl.DListInt16IterC_NextData(self)

    def PrevData(self):
        """PrevData(DListInt16IterC self) -> short"""
        return _Ravl.DListInt16IterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListInt16IterC self) -> short"""
        return _Ravl.DListInt16IterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListInt16IterC self) -> short"""
        return _Ravl.DListInt16IterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListInt16IterC self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_Tail(self)

    def Head(self):
        """Head(DListInt16IterC self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListInt16IterC self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListInt16IterC self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_InclusiveHead(self)

    def Data(self):
        """Data(DListInt16IterC self) -> short"""
        return _Ravl.DListInt16IterC_Data(self)

    def __deref__(self):
        """__deref__(DListInt16IterC self) -> short *"""
        return _Ravl.DListInt16IterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListInt16IterC
    __del__ = lambda self : None;
DListInt16IterC_swigregister = _Ravl.DListInt16IterC_swigregister
DListInt16IterC_swigregister(DListInt16IterC)

class DListInt16ConstIterC(DListInt16IterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    for _s in [DListInt16IterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16ConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListInt16IterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16ConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::ConstDLIterC<(RavlN::Int16T)> self) -> DListInt16ConstIterC
        __init__(RavlN::ConstDLIterC<(RavlN::Int16T)> self, DListInt16C copy) -> DListInt16ConstIterC
        """
        this = _Ravl.new_DListInt16ConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListInt16ConstIterC
    __del__ = lambda self : None;
DListInt16ConstIterC_swigregister = _Ravl.DListInt16ConstIterC_swigregister
DListInt16ConstIterC_swigregister(DListInt16ConstIterC)

class DListByteC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::ByteT)> self) -> DListByteC"""
        this = _Ravl.new_DListByteC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListByteC self)"""
        return _Ravl.DListByteC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListByteC self, unsigned char const & dat)"""
        return _Ravl.DListByteC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListByteC self, unsigned char const & dat)"""
        return _Ravl.DListByteC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListByteC self) -> unsigned char"""
        return _Ravl.DListByteC_PopFirst(self)

    def PopLast(self):
        """PopLast(DListByteC self) -> unsigned char"""
        return _Ravl.DListByteC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListByteC self, DListByteC lst)"""
        return _Ravl.DListByteC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListByteC self, DListByteC lst)"""
        return _Ravl.DListByteC_MoveLast(self, *args)

    def First(self):
        """First(DListByteC self) -> unsigned char"""
        return _Ravl.DListByteC_First(self)

    def Last(self):
        """Last(DListByteC self) -> unsigned char"""
        return _Ravl.DListByteC_Last(self)

    def Del(self, *args):
        """Del(DListByteC self, unsigned char const & x) -> bool"""
        return _Ravl.DListByteC_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListByteC self, unsigned char const & x) -> bool"""
        return _Ravl.DListByteC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListByteC self, int n) -> unsigned char"""
        return _Ravl.DListByteC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListByteC
    __del__ = lambda self : None;
DListByteC_swigregister = _Ravl.DListByteC_swigregister
DListByteC_swigregister(DListByteC)

class DListByteIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::ByteT)> self) -> DListByteIterC
        __init__(RavlN::DLIterC<(RavlN::ByteT)> self, DListByteC lst) -> DListByteIterC
        """
        this = _Ravl.new_DListByteIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListByteIterC self) -> bool"""
        return _Ravl.DListByteIterC_IsValid(self)

    def First(self):
        """First(DListByteIterC self)"""
        return _Ravl.DListByteIterC_First(self)

    def Last(self):
        """Last(DListByteIterC self)"""
        return _Ravl.DListByteIterC_Last(self)

    def IsElm(self):
        """IsElm(DListByteIterC self) -> bool"""
        return _Ravl.DListByteIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListByteIterC self) -> bool"""
        return _Ravl.DListByteIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListByteIterC self) -> bool"""
        return _Ravl.DListByteIterC_IsLast(self)

    def Next(self):
        """Next(DListByteIterC self)"""
        return _Ravl.DListByteIterC_Next(self)

    def Prev(self):
        """Prev(DListByteIterC self)"""
        return _Ravl.DListByteIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListByteIterC self)"""
        return _Ravl.DListByteIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListByteIterC self)"""
        return _Ravl.DListByteIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListByteIterC self, RavlN::IntT n)"""
        return _Ravl.DListByteIterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListByteIterC self) -> unsigned char"""
        return _Ravl.DListByteIterC_NextData(self)

    def PrevData(self):
        """PrevData(DListByteIterC self) -> unsigned char"""
        return _Ravl.DListByteIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListByteIterC self) -> unsigned char"""
        return _Ravl.DListByteIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListByteIterC self) -> unsigned char"""
        return _Ravl.DListByteIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListByteIterC self) -> DListByteC"""
        return _Ravl.DListByteIterC_Tail(self)

    def Head(self):
        """Head(DListByteIterC self) -> DListByteC"""
        return _Ravl.DListByteIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListByteIterC self) -> DListByteC"""
        return _Ravl.DListByteIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListByteIterC self) -> DListByteC"""
        return _Ravl.DListByteIterC_InclusiveHead(self)

    def Data(self):
        """Data(DListByteIterC self) -> unsigned char"""
        return _Ravl.DListByteIterC_Data(self)

    def __deref__(self):
        """__deref__(DListByteIterC self) -> unsigned char *"""
        return _Ravl.DListByteIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListByteIterC
    __del__ = lambda self : None;
DListByteIterC_swigregister = _Ravl.DListByteIterC_swigregister
DListByteIterC_swigregister(DListByteIterC)

class DListByteConstIterC(DListByteIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListByteIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListByteIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::ConstDLIterC<(RavlN::ByteT)> self) -> DListByteConstIterC
        __init__(RavlN::ConstDLIterC<(RavlN::ByteT)> self, DListByteC copy) -> DListByteConstIterC
        """
        this = _Ravl.new_DListByteConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListByteConstIterC
    __del__ = lambda self : None;
DListByteConstIterC_swigregister = _Ravl.DListByteConstIterC_swigregister
DListByteConstIterC_swigregister(DListByteConstIterC)

class Point2dC(_object):
    """Proxy of C++ RavlN::Point2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::Point2dC self) -> Point2dC
        __init__(RavlN::Point2dC self, RavlN::RealT x, RavlN::RealT y) -> Point2dC
        """
        this = _Ravl.new_Point2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row(self):
        """Row(Point2dC self) -> RavlN::RealT"""
        return _Ravl.Point2dC_Row(self)

    def Col(self):
        """Col(Point2dC self) -> RavlN::RealT"""
        return _Ravl.Point2dC_Col(self)

    def __str__(self):
        """__str__(Point2dC self) -> char const *"""
        return _Ravl.Point2dC___str__(self)

    __swig_destroy__ = _Ravl.delete_Point2dC
    __del__ = lambda self : None;
Point2dC_swigregister = _Ravl.Point2dC_swigregister
Point2dC_swigregister(Point2dC)

class DListPoint2dC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListPoint2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListPoint2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DListC<(RavlN::Point2dC)> self) -> DListPoint2dC"""
        this = _Ravl.new_DListPoint2dC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(DListPoint2dC self)"""
        return _Ravl.DListPoint2dC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(DListPoint2dC self, Point2dC dat)"""
        return _Ravl.DListPoint2dC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(DListPoint2dC self, Point2dC dat)"""
        return _Ravl.DListPoint2dC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(DListPoint2dC self) -> Point2dC"""
        return _Ravl.DListPoint2dC_PopFirst(self)

    def PopLast(self):
        """PopLast(DListPoint2dC self) -> Point2dC"""
        return _Ravl.DListPoint2dC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(DListPoint2dC self, DListPoint2dC lst)"""
        return _Ravl.DListPoint2dC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(DListPoint2dC self, DListPoint2dC lst)"""
        return _Ravl.DListPoint2dC_MoveLast(self, *args)

    def First(self):
        """First(DListPoint2dC self) -> Point2dC"""
        return _Ravl.DListPoint2dC_First(self)

    def Last(self):
        """Last(DListPoint2dC self) -> Point2dC"""
        return _Ravl.DListPoint2dC_Last(self)

    def Del(self, *args):
        """Del(DListPoint2dC self, Point2dC x) -> bool"""
        return _Ravl.DListPoint2dC_Del(self, *args)

    def Contains(self, *args):
        """Contains(DListPoint2dC self, Point2dC x) -> bool"""
        return _Ravl.DListPoint2dC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(DListPoint2dC self, int n) -> Point2dC"""
        return _Ravl.DListPoint2dC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListPoint2dC
    __del__ = lambda self : None;
DListPoint2dC_swigregister = _Ravl.DListPoint2dC_swigregister
DListPoint2dC_swigregister(DListPoint2dC)

class DListPoint2dIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListPoint2dIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListPoint2dIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DLIterC<(RavlN::Point2dC)> self) -> DListPoint2dIterC
        __init__(RavlN::DLIterC<(RavlN::Point2dC)> self, DListPoint2dC lst) -> DListPoint2dIterC
        """
        this = _Ravl.new_DListPoint2dIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(DListPoint2dIterC self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsValid(self)

    def First(self):
        """First(DListPoint2dIterC self)"""
        return _Ravl.DListPoint2dIterC_First(self)

    def Last(self):
        """Last(DListPoint2dIterC self)"""
        return _Ravl.DListPoint2dIterC_Last(self)

    def IsElm(self):
        """IsElm(DListPoint2dIterC self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(DListPoint2dIterC self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(DListPoint2dIterC self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsLast(self)

    def Next(self):
        """Next(DListPoint2dIterC self)"""
        return _Ravl.DListPoint2dIterC_Next(self)

    def Prev(self):
        """Prev(DListPoint2dIterC self)"""
        return _Ravl.DListPoint2dIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(DListPoint2dIterC self)"""
        return _Ravl.DListPoint2dIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(DListPoint2dIterC self)"""
        return _Ravl.DListPoint2dIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(DListPoint2dIterC self, RavlN::IntT n)"""
        return _Ravl.DListPoint2dIterC_Nth(self, *args)

    def NextData(self):
        """NextData(DListPoint2dIterC self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_NextData(self)

    def PrevData(self):
        """PrevData(DListPoint2dIterC self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(DListPoint2dIterC self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(DListPoint2dIterC self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(DListPoint2dIterC self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_Tail(self)

    def Head(self):
        """Head(DListPoint2dIterC self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(DListPoint2dIterC self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(DListPoint2dIterC self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_InclusiveHead(self)

    def Data(self):
        """Data(DListPoint2dIterC self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_Data(self)

    def __deref__(self):
        """__deref__(DListPoint2dIterC self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListPoint2dIterC
    __del__ = lambda self : None;
    def Row(self):
        """Row(DListPoint2dIterC self) -> RavlN::RealT"""
        return _Ravl.DListPoint2dIterC_Row(self)

    def Col(self):
        """Col(DListPoint2dIterC self) -> RavlN::RealT"""
        return _Ravl.DListPoint2dIterC_Col(self)

    def __str__(self):
        """__str__(DListPoint2dIterC self) -> char const *"""
        return _Ravl.DListPoint2dIterC___str__(self)

DListPoint2dIterC_swigregister = _Ravl.DListPoint2dIterC_swigregister
DListPoint2dIterC_swigregister(DListPoint2dIterC)


def ToList(*args):
  """
    ToList(DListRealC list) -> PyObject
    ToList(DListIntC list) -> PyObject
    ToList(DListUIntC list) -> PyObject
    ToList(DListInt64C list) -> PyObject
    ToList(DListInt16C list) -> PyObject
    ToList(DListByteC list) -> PyObject
    ToList(DListPoint2dC list) -> PyObject *
    """
  return _Ravl.ToList(*args)
class IndexC(_object):
    """Proxy of C++ RavlN::IndexC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::IndexC self) -> IndexC
        __init__(RavlN::IndexC self, RavlN::IntT arg2) -> IndexC
        """
        this = _Ravl.new_IndexC(*args)
        try: self.this.append(this)
        except: self.this = this
    def V(self):
        """V(IndexC self) -> RavlN::IntT"""
        return _Ravl.IndexC_V(self)

    __swig_destroy__ = _Ravl.delete_IndexC
    __del__ = lambda self : None;
IndexC_swigregister = _Ravl.IndexC_swigregister
IndexC_swigregister(IndexC)

class IndexRangeC(_object):
    """Proxy of C++ RavlN::IndexRangeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexRangeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexRangeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::IndexRangeC self, size_t dim=0) -> IndexRangeC
        __init__(RavlN::IndexRangeC self) -> IndexRangeC
        __init__(RavlN::IndexRangeC self, IndexC dim) -> IndexRangeC
        __init__(RavlN::IndexRangeC self, SizeC dim) -> IndexRangeC
        __init__(RavlN::IndexRangeC self, IndexC minIndex, IndexC maxIndex) -> IndexRangeC
        """
        this = _Ravl.new_IndexRangeC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(IndexRangeC self) -> RavlN::IntT"""
        return _Ravl.IndexRangeC_Size(self)

    def Range(self):
        """Range(IndexRangeC self) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Range(self)

    def Min(self, *args):
        """
        Min(IndexRangeC self) -> IndexC
        Min(IndexRangeC self) -> IndexC
        """
        return _Ravl.IndexRangeC_Min(self, *args)

    def Max(self, *args):
        """
        Max(IndexRangeC self) -> IndexC
        Max(IndexRangeC self) -> IndexC
        """
        return _Ravl.IndexRangeC_Max(self, *args)

    def Center(self):
        """Center(IndexRangeC self) -> IndexC"""
        return _Ravl.IndexRangeC_Center(self)

    def CenterD(self):
        """CenterD(IndexRangeC self) -> IndexC"""
        return _Ravl.IndexRangeC_CenterD(self)

    def Percentage(self, *args):
        """Percentage(IndexRangeC self, RavlN::RealT const p) -> IndexC"""
        return _Ravl.IndexRangeC_Percentage(self, *args)

    def IsEmpty(self):
        """IsEmpty(IndexRangeC self) -> bool"""
        return _Ravl.IndexRangeC_IsEmpty(self)

    def IsValid(self):
        """IsValid(IndexRangeC self) -> bool"""
        return _Ravl.IndexRangeC_IsValid(self)

    def Contains(self, *args):
        """
        Contains(IndexRangeC self, IndexC i) -> bool
        Contains(IndexRangeC self, RavlN::RealT val) -> bool
        Contains(IndexRangeC self, IndexRangeC range) -> bool
        """
        return _Ravl.IndexRangeC_Contains(self, *args)

    def __eq__(self, *args):
        """__eq__(IndexRangeC self, IndexRangeC range) -> bool"""
        return _Ravl.IndexRangeC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(IndexRangeC self, IndexRangeC range) -> bool"""
        return _Ravl.IndexRangeC___ne__(self, *args)

    def In(self, *args):
        """In(IndexRangeC self, IndexRangeC range) -> bool"""
        return _Ravl.IndexRangeC_In(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(IndexRangeC self, IndexRangeC r) -> bool"""
        return _Ravl.IndexRangeC_IsOverlapping(self, *args)

    def SetOrigin(self, *args):
        """SetOrigin(IndexRangeC self, IndexC position) -> IndexRangeC"""
        return _Ravl.IndexRangeC_SetOrigin(self, *args)

    def __idiv__(self, *args):
        """__idiv__(IndexRangeC self, IndexC i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___idiv__(self, *args)

    def __imul__(self, *args):
        """__imul__(IndexRangeC self, IndexC i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___imul__(self, *args)

    def __div__(self, *args):
        """__div__(IndexRangeC self, IndexC i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___div__(self, *args)

    def __mul__(self, *args):
        """__mul__(IndexRangeC self, IndexC i) -> IndexRangeC"""
        return _Ravl.IndexRangeC___mul__(self, *args)

    def ClipBy(self, *args):
        """ClipBy(IndexRangeC self, IndexRangeC r) -> IndexRangeC"""
        return _Ravl.IndexRangeC_ClipBy(self, *args)

    def Clip(self, *args):
        """
        Clip(IndexRangeC self, IndexRangeC r) -> IndexRangeC
        Clip(IndexRangeC self, IndexC i) -> IndexC
        """
        return _Ravl.IndexRangeC_Clip(self, *args)

    def FirstHalf(self):
        """FirstHalf(IndexRangeC self) -> IndexRangeC"""
        return _Ravl.IndexRangeC_FirstHalf(self)

    def FirstHalfD(self):
        """FirstHalfD(IndexRangeC self) -> IndexRangeC"""
        return _Ravl.IndexRangeC_FirstHalfD(self)

    def Enlarge(self, *args):
        """Enlarge(IndexRangeC self, IndexC f) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Enlarge(self, *args)

    def Expand(self, *args):
        """Expand(IndexRangeC self, IndexC n) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(IndexRangeC self, IndexC n) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Shrink(self, *args)

    def ShrinkHigh(self, *args):
        """ShrinkHigh(IndexRangeC self, IndexC n) -> IndexRangeC"""
        return _Ravl.IndexRangeC_ShrinkHigh(self, *args)

    def Swap(self, *args):
        """Swap(IndexRangeC self, IndexRangeC r) -> IndexRangeC"""
        return _Ravl.IndexRangeC_Swap(self, *args)

    def Involve(self, *args):
        """
        Involve(IndexRangeC self, IndexC i) -> IndexRangeC
        Involve(IndexRangeC self, IndexRangeC subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC_Involve(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(IndexRangeC self, IndexC i) -> IndexRangeC
        __iadd__(IndexRangeC self, RavlN::IntT i) -> IndexRangeC
        __iadd__(IndexRangeC self, RavlN::UIntT i) -> IndexRangeC
        __iadd__(IndexRangeC self, SizeC i) -> IndexRangeC
        __iadd__(IndexRangeC self, IndexRangeC subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(IndexRangeC self, IndexC i) -> IndexRangeC
        __isub__(IndexRangeC self, RavlN::IntT i) -> IndexRangeC
        __isub__(IndexRangeC self, RavlN::UIntT i) -> IndexRangeC
        __isub__(IndexRangeC self, SizeC i) -> IndexRangeC
        __isub__(IndexRangeC self, IndexRangeC subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(IndexRangeC self, IndexC i) -> IndexRangeC
        __add__(IndexRangeC self, RavlN::IntT i) -> IndexRangeC
        __add__(IndexRangeC self, RavlN::UIntT i) -> IndexRangeC
        __add__(IndexRangeC self, SizeC i) -> IndexRangeC
        __add__(IndexRangeC self, IndexRangeC subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(IndexRangeC self, IndexC i) -> IndexRangeC
        __sub__(IndexRangeC self, RavlN::IntT i) -> IndexRangeC
        __sub__(IndexRangeC self, RavlN::UIntT i) -> IndexRangeC
        __sub__(IndexRangeC self, SizeC i) -> IndexRangeC
        __sub__(IndexRangeC self, IndexRangeC subRange) -> IndexRangeC
        """
        return _Ravl.IndexRangeC___sub__(self, *args)

    def AlignWithin(self, *args):
        """AlignWithin(IndexRangeC self, RavlN::IntT alignment) -> IndexRangeC"""
        return _Ravl.IndexRangeC_AlignWithin(self, *args)

    def Hash(self):
        """Hash(IndexRangeC self) -> RavlN::SizeT"""
        return _Ravl.IndexRangeC_Hash(self)

    def __str__(self):
        """__str__(IndexRangeC self) -> char const *"""
        return _Ravl.IndexRangeC___str__(self)

    def __nonzero__(self):
        """__nonzero__(IndexRangeC self) -> bool"""
        return _Ravl.IndexRangeC___nonzero__(self)

    def __len__(self):
        """__len__(IndexRangeC self) -> int"""
        return _Ravl.IndexRangeC___len__(self)

    __swig_destroy__ = _Ravl.delete_IndexRangeC
    __del__ = lambda self : None;
IndexRangeC_swigregister = _Ravl.IndexRangeC_swigregister
IndexRangeC_swigregister(IndexRangeC)

class Index2dC(_object):
    """Proxy of C++ RavlN::Index2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Index2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Index2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::Index2dC self) -> Index2dC
        __init__(RavlN::Index2dC self, RavlN::IntT x, RavlN::IntT y) -> Index2dC
        __init__(RavlN::Index2dC self, IndexC x, IndexC y) -> Index2dC
        """
        this = _Ravl.new_Index2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row(self):
        """Row(Index2dC self) -> IndexC"""
        return _Ravl.Index2dC_Row(self)

    def Col(self):
        """Col(Index2dC self) -> IndexC"""
        return _Ravl.Index2dC_Col(self)

    __swig_destroy__ = _Ravl.delete_Index2dC
    __del__ = lambda self : None;
Index2dC_swigregister = _Ravl.Index2dC_swigregister
Index2dC_swigregister(Index2dC)

class IndexRange2dC(_object):
    """Proxy of C++ RavlN::IndexRange2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexRange2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexRange2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::IndexRange2dC self) -> IndexRange2dC
        __init__(RavlN::IndexRange2dC self, RavlN::IntT rows, RavlN::IntT cols) -> IndexRange2dC
        """
        this = _Ravl.new_IndexRange2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def TRow(self):
        """TRow(IndexRange2dC self) -> IndexC"""
        return _Ravl.IndexRange2dC_TRow(self)

    def BRow(self):
        """BRow(IndexRange2dC self) -> IndexC"""
        return _Ravl.IndexRange2dC_BRow(self)

    def LCol(self):
        """LCol(IndexRange2dC self) -> IndexC"""
        return _Ravl.IndexRange2dC_LCol(self)

    def RCol(self):
        """RCol(IndexRange2dC self) -> IndexC"""
        return _Ravl.IndexRange2dC_RCol(self)

    def TopLeft(self):
        """TopLeft(IndexRange2dC self) -> Index2dC"""
        return _Ravl.IndexRange2dC_TopLeft(self)

    def TopRight(self):
        """TopRight(IndexRange2dC self) -> Index2dC"""
        return _Ravl.IndexRange2dC_TopRight(self)

    def BottomLeft(self):
        """BottomLeft(IndexRange2dC self) -> Index2dC"""
        return _Ravl.IndexRange2dC_BottomLeft(self)

    def BottomRight(self):
        """BottomRight(IndexRange2dC self) -> Index2dC"""
        return _Ravl.IndexRange2dC_BottomRight(self)

    def Center(self):
        """Center(IndexRange2dC self) -> Index2dC"""
        return _Ravl.IndexRange2dC_Center(self)

    def Rows(self):
        """Rows(IndexRange2dC self) -> RavlN::IntT"""
        return _Ravl.IndexRange2dC_Rows(self)

    def Cols(self):
        """Cols(IndexRange2dC self) -> RavlN::IntT"""
        return _Ravl.IndexRange2dC_Cols(self)

    def Area(self):
        """Area(IndexRange2dC self) -> RavlN::SizeT"""
        return _Ravl.IndexRange2dC_Area(self)

    def Contains(self, *args):
        """Contains(IndexRange2dC self, Index2dC index) -> bool"""
        return _Ravl.IndexRange2dC_Contains(self, *args)

    def Expand(self, *args):
        """Expand(IndexRange2dC self, RavlN::IntT n) -> IndexRange2dC"""
        return _Ravl.IndexRange2dC_Expand(self, *args)

    def ClipBy(self, *args):
        """ClipBy(IndexRange2dC self, IndexRange2dC range)"""
        return _Ravl.IndexRange2dC_ClipBy(self, *args)

    __swig_destroy__ = _Ravl.delete_IndexRange2dC
    __del__ = lambda self : None;
IndexRange2dC_swigregister = _Ravl.IndexRange2dC_swigregister
IndexRange2dC_swigregister(IndexRange2dC)

class Array2dByteC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2dByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2dByteC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::Array2dC<(RavlN::ByteT)> self) -> Array2dByteC
        __init__(RavlN::Array2dC<(RavlN::ByteT)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> Array2dByteC
        __init__(RavlN::Array2dC<(RavlN::ByteT)> self, IndexRange2dC range) -> Array2dByteC
        """
        this = _Ravl.new_Array2dByteC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(Array2dByteC self) -> IndexRange2dC"""
        return _Ravl.Array2dByteC_Frame(self)

    def Fill(self, *args):
        """Fill(Array2dByteC self, unsigned char const & value)"""
        return _Ravl.Array2dByteC_Fill(self, *args)

    def Stride(self):
        """Stride(Array2dByteC self) -> RavlN::IntT"""
        return _Ravl.Array2dByteC_Stride(self)

    def Access(self, *args):
        """
        Access(Array2dByteC self, Index2dC index) -> unsigned char
        Access(Array2dByteC self, RavlN::IntT r, RavlN::IntT c) -> unsigned char
        Access(Array2dByteC self, IndexC r, IndexC c) -> unsigned char &
        """
        return _Ravl.Array2dByteC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_Array2dByteC
    __del__ = lambda self : None;
Array2dByteC_swigregister = _Ravl.Array2dByteC_swigregister
Array2dByteC_swigregister(Array2dByteC)

class Array2dRealC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2dRealC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2dRealC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::Array2dC<(RavlN::RealT)> self) -> Array2dRealC
        __init__(RavlN::Array2dC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> Array2dRealC
        __init__(RavlN::Array2dC<(RavlN::RealT)> self, IndexRange2dC range) -> Array2dRealC
        """
        this = _Ravl.new_Array2dRealC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(Array2dRealC self) -> IndexRange2dC"""
        return _Ravl.Array2dRealC_Frame(self)

    def Fill(self, *args):
        """Fill(Array2dRealC self, double const & value)"""
        return _Ravl.Array2dRealC_Fill(self, *args)

    def Stride(self):
        """Stride(Array2dRealC self) -> RavlN::IntT"""
        return _Ravl.Array2dRealC_Stride(self)

    def Access(self, *args):
        """
        Access(Array2dRealC self, Index2dC index) -> double
        Access(Array2dRealC self, RavlN::IntT r, RavlN::IntT c) -> double
        Access(Array2dRealC self, IndexC r, IndexC c) -> double &
        """
        return _Ravl.Array2dRealC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_Array2dRealC
    __del__ = lambda self : None;
Array2dRealC_swigregister = _Ravl.Array2dRealC_swigregister
Array2dRealC_swigregister(Array2dRealC)

class StringC(_object):
    """Proxy of C++ RavlN::StringC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::StringC self) -> StringC
        __init__(RavlN::StringC self, char const * arg2) -> StringC
        """
        this = _Ravl.new_StringC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(StringC self) -> bool"""
        return _Ravl.StringC_IsEmpty(self)

    def chars(self):
        """chars(StringC self) -> char const *"""
        return _Ravl.StringC_chars(self)

    def Size(self):
        """Size(StringC self) -> RavlN::SizeT"""
        return _Ravl.StringC_Size(self)

    def __str__(self):
        """__str__(StringC self) -> char const *"""
        return _Ravl.StringC___str__(self)

    __swig_destroy__ = _Ravl.delete_StringC
    __del__ = lambda self : None;
StringC_swigregister = _Ravl.StringC_swigregister
StringC_swigregister(StringC)


def PrintIOFormats(*args):
  """
    PrintIOFormats(std::ostream & os=std::cout)
    PrintIOFormats()
    """
  return _Ravl.PrintIOFormats(*args)

def PrintIOConversions(*args):
  """
    PrintIOConversions(std::ostream & os=std::cout)
    PrintIOConversions()
    """
  return _Ravl.PrintIOConversions(*args)

def PrintIOClassTypes(*args):
  """
    PrintIOClassTypes(std::ostream & os=std::cout)
    PrintIOClassTypes()
    """
  return _Ravl.PrintIOClassTypes(*args)
class RealRangeC(_object):
    """Proxy of C++ RavlN::RealRangeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRangeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRangeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::RealRangeC self, RavlN::RealT size=0) -> RealRangeC
        __init__(RavlN::RealRangeC self) -> RealRangeC
        __init__(RavlN::RealRangeC self, RavlN::RealT minReal, RavlN::RealT maxReal) -> RealRangeC
        """
        this = _Ravl.new_RealRangeC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(RealRangeC self) -> RavlN::RealT"""
        return _Ravl.RealRangeC_Size(self)

    def Range(self):
        """Range(RealRangeC self) -> RealRangeC"""
        return _Ravl.RealRangeC_Range(self)

    def Min(self, *args):
        """
        Min(RealRangeC self) -> RavlN::RealT const
        Min(RealRangeC self) -> RavlN::RealT &
        """
        return _Ravl.RealRangeC_Min(self, *args)

    def Max(self, *args):
        """
        Max(RealRangeC self) -> RavlN::RealT const
        Max(RealRangeC self) -> RavlN::RealT &
        """
        return _Ravl.RealRangeC_Max(self, *args)

    def Center(self):
        """Center(RealRangeC self) -> RavlN::RealT"""
        return _Ravl.RealRangeC_Center(self)

    def CenterD(self):
        """CenterD(RealRangeC self) -> RavlN::RealT"""
        return _Ravl.RealRangeC_CenterD(self)

    def Percentage(self, *args):
        """Percentage(RealRangeC self, RavlN::RealT p) -> RavlN::RealT"""
        return _Ravl.RealRangeC_Percentage(self, *args)

    def IsEmpty(self):
        """IsEmpty(RealRangeC self) -> bool"""
        return _Ravl.RealRangeC_IsEmpty(self)

    def IsValid(self):
        """IsValid(RealRangeC self) -> bool"""
        return _Ravl.RealRangeC_IsValid(self)

    def Contains(self, *args):
        """
        Contains(RealRangeC self, RavlN::RealT i) -> bool
        Contains(RealRangeC self, RealRangeC range) -> bool
        """
        return _Ravl.RealRangeC_Contains(self, *args)

    def __eq__(self, *args):
        """__eq__(RealRangeC self, RealRangeC range) -> bool"""
        return _Ravl.RealRangeC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RealRangeC self, RealRangeC range) -> bool"""
        return _Ravl.RealRangeC___ne__(self, *args)

    def In(self, *args):
        """In(RealRangeC self, RealRangeC range) -> bool"""
        return _Ravl.RealRangeC_In(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(RealRangeC self, RealRangeC r) -> bool"""
        return _Ravl.RealRangeC_IsOverlapping(self, *args)

    def SetOrigin(self, *args):
        """SetOrigin(RealRangeC self, RavlN::RealT position) -> RealRangeC"""
        return _Ravl.RealRangeC_SetOrigin(self, *args)

    def __iadd__(self, *args):
        """__iadd__(RealRangeC self, RavlN::RealT i) -> RealRangeC"""
        return _Ravl.RealRangeC___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(RealRangeC self, RavlN::RealT i) -> RealRangeC"""
        return _Ravl.RealRangeC___isub__(self, *args)

    def __add__(self, *args):
        """__add__(RealRangeC self, RavlN::RealT i) -> RealRangeC"""
        return _Ravl.RealRangeC___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(RealRangeC self, RavlN::RealT i) -> RealRangeC"""
        return _Ravl.RealRangeC___sub__(self, *args)

    def ClipBy(self, *args):
        """ClipBy(RealRangeC self, RealRangeC r) -> RealRangeC"""
        return _Ravl.RealRangeC_ClipBy(self, *args)

    def Clip(self, *args):
        """Clip(RealRangeC self, RavlN::RealT const & r) -> RavlN::RealT"""
        return _Ravl.RealRangeC_Clip(self, *args)

    def FirstHalf(self):
        """FirstHalf(RealRangeC self) -> RealRangeC"""
        return _Ravl.RealRangeC_FirstHalf(self)

    def FirstHalfD(self):
        """FirstHalfD(RealRangeC self) -> RealRangeC"""
        return _Ravl.RealRangeC_FirstHalfD(self)

    def Enlarge(self, *args):
        """Enlarge(RealRangeC self, RavlN::RealT f) -> RealRangeC"""
        return _Ravl.RealRangeC_Enlarge(self, *args)

    def Expand(self, *args):
        """Expand(RealRangeC self, RavlN::RealT n) -> RealRangeC"""
        return _Ravl.RealRangeC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(RealRangeC self, RavlN::RealT n) -> RealRangeC"""
        return _Ravl.RealRangeC_Shrink(self, *args)

    def ShrinkHigh(self, *args):
        """ShrinkHigh(RealRangeC self, RavlN::RealT n) -> RealRangeC"""
        return _Ravl.RealRangeC_ShrinkHigh(self, *args)

    def Swap(self, *args):
        """Swap(RealRangeC self, RealRangeC r) -> RealRangeC"""
        return _Ravl.RealRangeC_Swap(self, *args)

    def Involve(self, *args):
        """
        Involve(RealRangeC self, RavlN::RealT i) -> RealRangeC
        Involve(RealRangeC self, RealRangeC subRange) -> RealRangeC
        """
        return _Ravl.RealRangeC_Involve(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRangeC
    __del__ = lambda self : None;
RealRangeC_swigregister = _Ravl.RealRangeC_swigregister
RealRangeC_swigregister(RealRangeC)

class RealRange2dC(_object):
    """Proxy of C++ RavlN::RealRange2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRange2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRange2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::RealRange2dC self) -> RealRange2dC
        __init__(RavlN::RealRange2dC self, RavlN::RealT rowNumber, RavlN::RealT colNumber) -> RealRange2dC
        __init__(RavlN::RealRange2dC self, RealRangeC rowRange, RealRangeC colRange) -> RealRange2dC
        __init__(RavlN::RealRange2dC self, RealRange2dC range) -> RealRange2dC
        __init__(RavlN::RealRange2dC self, RavlN::RealT minRow, RavlN::RealT maxRow, RavlN::RealT minCol, RavlN::RealT maxCol) -> RealRange2dC
        """
        this = _Ravl.new_RealRange2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def TRow(self, *args):
        """
        TRow(RealRange2dC self) -> RavlN::RealT
        TRow(RealRange2dC self) -> RavlN::RealT
        """
        return _Ravl.RealRange2dC_TRow(self, *args)

    def LCol(self, *args):
        """
        LCol(RealRange2dC self) -> RavlN::RealT
        LCol(RealRange2dC self) -> RavlN::RealT
        """
        return _Ravl.RealRange2dC_LCol(self, *args)

    def BRow(self, *args):
        """
        BRow(RealRange2dC self) -> RavlN::RealT
        BRow(RealRange2dC self) -> RavlN::RealT
        """
        return _Ravl.RealRange2dC_BRow(self, *args)

    def RCol(self, *args):
        """
        RCol(RealRange2dC self) -> RavlN::RealT
        RCol(RealRange2dC self) -> RavlN::RealT
        """
        return _Ravl.RealRange2dC_RCol(self, *args)

    def Rows(self):
        """Rows(RealRange2dC self) -> RavlN::RealT"""
        return _Ravl.RealRange2dC_Rows(self)

    def Cols(self):
        """Cols(RealRange2dC self) -> RavlN::RealT"""
        return _Ravl.RealRange2dC_Cols(self)

    def Area(self):
        """Area(RealRange2dC self) -> RavlN::RealT"""
        return _Ravl.RealRange2dC_Area(self)

    def Dilate(self):
        """Dilate(RealRange2dC self) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Dilate(self)

    def Erode(self):
        """Erode(RealRange2dC self) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Erode(self)

    def Expand(self, *args):
        """Expand(RealRange2dC self, RavlN::RealT n) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(RealRange2dC self, RavlN::RealT n) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Shrink(self, *args)

    def ClipBy(self, *args):
        """ClipBy(RealRange2dC self, RealRange2dC r) -> RealRange2dC"""
        return _Ravl.RealRange2dC_ClipBy(self, *args)

    def Contains(self, *args):
        """Contains(RealRange2dC self, RealRange2dC oth) -> bool"""
        return _Ravl.RealRange2dC_Contains(self, *args)

    def RowRange(self):
        """RowRange(RealRange2dC self) -> RealRangeC"""
        return _Ravl.RealRange2dC_RowRange(self)

    def ColRange(self):
        """ColRange(RealRange2dC self) -> RealRangeC"""
        return _Ravl.RealRange2dC_ColRange(self)

    def Range1(self):
        """Range1(RealRange2dC self) -> RealRangeC"""
        return _Ravl.RealRange2dC_Range1(self)

    def Range2(self):
        """Range2(RealRange2dC self) -> RealRangeC"""
        return _Ravl.RealRange2dC_Range2(self)

    def Involve(self, *args):
        """Involve(RealRange2dC self, RealRange2dC subrectangle)"""
        return _Ravl.RealRange2dC_Involve(self, *args)

    def IsValid(self):
        """IsValid(RealRange2dC self) -> bool"""
        return _Ravl.RealRange2dC_IsValid(self)

    def __eq__(self, *args):
        """__eq__(RealRange2dC self, RealRange2dC oth) -> bool"""
        return _Ravl.RealRange2dC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RealRange2dC self, RealRange2dC oth) -> bool"""
        return _Ravl.RealRange2dC___ne__(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(RealRange2dC self, RealRange2dC r) -> bool"""
        return _Ravl.RealRange2dC_IsOverlapping(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRange2dC
    __del__ = lambda self : None;
RealRange2dC_swigregister = _Ravl.RealRange2dC_swigregister
RealRange2dC_swigregister(RealRange2dC)

class PointSet2dC(DListPoint2dC):
    """Proxy of C++ RavlN::PointSet2dC class"""
    __swig_setmethods__ = {}
    for _s in [DListPoint2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointSet2dC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListPoint2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointSet2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::PointSet2dC self) -> PointSet2dC"""
        this = _Ravl.new_PointSet2dC()
        try: self.this.append(this)
        except: self.this = this
    def Centroid(self):
        """Centroid(PointSet2dC self) -> Point2dC"""
        return _Ravl.PointSet2dC_Centroid(self)

    def BoundingRectangle(self):
        """BoundingRectangle(PointSet2dC self) -> RealRange2dC"""
        return _Ravl.PointSet2dC_BoundingRectangle(self)

    __swig_destroy__ = _Ravl.delete_PointSet2dC
    __del__ = lambda self : None;
PointSet2dC_swigregister = _Ravl.PointSet2dC_swigregister
PointSet2dC_swigregister(PointSet2dC)

class Polygon2dC(PointSet2dC):
    """Proxy of C++ RavlN::Polygon2dC class"""
    __swig_setmethods__ = {}
    for _s in [PointSet2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon2dC, name, value)
    __swig_getmethods__ = {}
    for _s in [PointSet2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::Polygon2dC self) -> Polygon2dC"""
        this = _Ravl.new_Polygon2dC()
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(Polygon2dC self) -> RavlN::SizeT"""
        return _Ravl.Polygon2dC_Size(self)

    def InsLast(self, *args):
        """InsLast(Polygon2dC self, Point2dC point)"""
        return _Ravl.Polygon2dC_InsLast(self, *args)

    __swig_destroy__ = _Ravl.delete_Polygon2dC
    __del__ = lambda self : None;
Polygon2dC_swigregister = _Ravl.Polygon2dC_swigregister
Polygon2dC_swigregister(Polygon2dC)

class ByteRGBArray2dC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlImageN::ByteRGBValueC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteRGBArray2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteRGBArray2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::Array2dC<(RavlImageN::ByteRGBValueC)> self) -> ByteRGBArray2dC
        __init__(RavlN::Array2dC<(RavlImageN::ByteRGBValueC)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> ByteRGBArray2dC
        __init__(RavlN::Array2dC<(RavlImageN::ByteRGBValueC)> self, IndexRange2dC range) -> ByteRGBArray2dC
        """
        this = _Ravl.new_ByteRGBArray2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(ByteRGBArray2dC self) -> IndexRange2dC"""
        return _Ravl.ByteRGBArray2dC_Frame(self)

    def Fill(self, *args):
        """Fill(ByteRGBArray2dC self, ByteRGBValueC value)"""
        return _Ravl.ByteRGBArray2dC_Fill(self, *args)

    def Stride(self):
        """Stride(ByteRGBArray2dC self) -> RavlN::IntT"""
        return _Ravl.ByteRGBArray2dC_Stride(self)

    def Access(self, *args):
        """
        Access(ByteRGBArray2dC self, Index2dC index) -> ByteRGBValueC
        Access(ByteRGBArray2dC self, RavlN::IntT r, RavlN::IntT c) -> ByteRGBValueC
        Access(ByteRGBArray2dC self, IndexC r, IndexC c) -> ByteRGBValueC
        """
        return _Ravl.ByteRGBArray2dC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_ByteRGBArray2dC
    __del__ = lambda self : None;
ByteRGBArray2dC_swigregister = _Ravl.ByteRGBArray2dC_swigregister
ByteRGBArray2dC_swigregister(ByteRGBArray2dC)

class RealRGBArray2dC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlImageN::RealRGBValueC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRGBArray2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRGBArray2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::Array2dC<(RavlImageN::RealRGBValueC)> self) -> RealRGBArray2dC
        __init__(RavlN::Array2dC<(RavlImageN::RealRGBValueC)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> RealRGBArray2dC
        __init__(RavlN::Array2dC<(RavlImageN::RealRGBValueC)> self, IndexRange2dC range) -> RealRGBArray2dC
        """
        this = _Ravl.new_RealRGBArray2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(RealRGBArray2dC self) -> IndexRange2dC"""
        return _Ravl.RealRGBArray2dC_Frame(self)

    def Fill(self, *args):
        """Fill(RealRGBArray2dC self, RealRGBValueC value)"""
        return _Ravl.RealRGBArray2dC_Fill(self, *args)

    def Stride(self):
        """Stride(RealRGBArray2dC self) -> RavlN::IntT"""
        return _Ravl.RealRGBArray2dC_Stride(self)

    def Access(self, *args):
        """
        Access(RealRGBArray2dC self, Index2dC index) -> RealRGBValueC
        Access(RealRGBArray2dC self, RavlN::IntT r, RavlN::IntT c) -> RealRGBValueC
        Access(RealRGBArray2dC self, IndexC r, IndexC c) -> RealRGBValueC
        """
        return _Ravl.RealRGBArray2dC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRGBArray2dC
    __del__ = lambda self : None;
RealRGBArray2dC_swigregister = _Ravl.RealRGBArray2dC_swigregister
RealRGBArray2dC_swigregister(RealRGBArray2dC)

class RealRGBValueC(_object):
    """Proxy of C++ RavlImageN::RealRGBValueC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRGBValueC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlImageN::RealRGBValueC self, RavlN::RealT r, RavlN::RealT g, RavlN::RealT b) -> RealRGBValueC"""
        this = _Ravl.new_RealRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Red(self):
        """Red(RealRGBValueC self) -> RavlN::RealT"""
        return _Ravl.RealRGBValueC_Red(self)

    def Green(self):
        """Green(RealRGBValueC self) -> RavlN::RealT"""
        return _Ravl.RealRGBValueC_Green(self)

    def Blue(self):
        """Blue(RealRGBValueC self) -> RavlN::RealT"""
        return _Ravl.RealRGBValueC_Blue(self)

    __swig_destroy__ = _Ravl.delete_RealRGBValueC
    __del__ = lambda self : None;
RealRGBValueC_swigregister = _Ravl.RealRGBValueC_swigregister
RealRGBValueC_swigregister(RealRGBValueC)

class ByteRGBValueC(_object):
    """Proxy of C++ RavlImageN::ByteRGBValueC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteRGBValueC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlImageN::ByteRGBValueC self, RavlN::IntT r, RavlN::IntT g, RavlN::IntT b) -> ByteRGBValueC"""
        this = _Ravl.new_ByteRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Red(self):
        """Red(ByteRGBValueC self) -> RavlN::IntT"""
        return _Ravl.ByteRGBValueC_Red(self)

    def Green(self):
        """Green(ByteRGBValueC self) -> RavlN::IntT"""
        return _Ravl.ByteRGBValueC_Green(self)

    def Blue(self):
        """Blue(ByteRGBValueC self) -> RavlN::IntT"""
        return _Ravl.ByteRGBValueC_Blue(self)

    __swig_destroy__ = _Ravl.delete_ByteRGBValueC
    __del__ = lambda self : None;
ByteRGBValueC_swigregister = _Ravl.ByteRGBValueC_swigregister
ByteRGBValueC_swigregister(ByteRGBValueC)

class ImageByteRGBValueC(ByteRGBArray2dC):
    """Proxy of C++ RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> class"""
    __swig_setmethods__ = {}
    for _s in [ByteRGBArray2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageByteRGBValueC, name, value)
    __swig_getmethods__ = {}
    for _s in [ByteRGBArray2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageByteRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> self) -> ImageByteRGBValueC
        __init__(RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> ImageByteRGBValueC
        __init__(RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> self, IndexRange2dC range) -> ImageByteRGBValueC
        __init__(RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> self, RavlN::SizeT rows, RavlN::SizeT cols, ByteRGBValueC data, bool deletable=True) -> ImageByteRGBValueC
        __init__(RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> self, RavlN::SizeT rows, RavlN::SizeT cols, ByteRGBValueC data) -> ImageByteRGBValueC
        __init__(RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> self, ImageByteRGBValueC img, IndexRange2dC range) -> ImageByteRGBValueC
        """
        this = _Ravl.new_ImageByteRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(ImageByteRGBValueC self) -> RavlN::SizeT"""
        return _Ravl.ImageByteRGBValueC_Rows(self)

    def Cols(self):
        """Cols(ImageByteRGBValueC self) -> RavlN::SizeT"""
        return _Ravl.ImageByteRGBValueC_Cols(self)

    def Row(self, *args):
        """Row(ImageByteRGBValueC self, IndexC row) -> ByteRGBValueC"""
        return _Ravl.ImageByteRGBValueC_Row(self, *args)

    def Stride(self):
        """Stride(ImageByteRGBValueC self) -> RavlN::IntT"""
        return _Ravl.ImageByteRGBValueC_Stride(self)

    def DataAsString(self):
        """DataAsString(ImageByteRGBValueC self) -> PyObject *"""
        return _Ravl.ImageByteRGBValueC_DataAsString(self)

    def DataAsStringTriple(self):
        """DataAsStringTriple(ImageByteRGBValueC self) -> PyObject *"""
        return _Ravl.ImageByteRGBValueC_DataAsStringTriple(self)

    __swig_destroy__ = _Ravl.delete_ImageByteRGBValueC
    __del__ = lambda self : None;
ImageByteRGBValueC_swigregister = _Ravl.ImageByteRGBValueC_swigregister
ImageByteRGBValueC_swigregister(ImageByteRGBValueC)

class ImageByteC(Array2dByteC):
    """Proxy of C++ RavlImageN::ImageC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    for _s in [Array2dByteC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageByteC, name, value)
    __swig_getmethods__ = {}
    for _s in [Array2dByteC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageByteC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlImageN::ImageC<(RavlN::ByteT)> self) -> ImageByteC
        __init__(RavlImageN::ImageC<(RavlN::ByteT)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> ImageByteC
        __init__(RavlImageN::ImageC<(RavlN::ByteT)> self, IndexRange2dC range) -> ImageByteC
        __init__(RavlImageN::ImageC<(RavlN::ByteT)> self, RavlN::SizeT rows, RavlN::SizeT cols, unsigned char * data, bool deletable=True) -> ImageByteC
        __init__(RavlImageN::ImageC<(RavlN::ByteT)> self, RavlN::SizeT rows, RavlN::SizeT cols, unsigned char * data) -> ImageByteC
        __init__(RavlImageN::ImageC<(RavlN::ByteT)> self, ImageByteC img, IndexRange2dC range) -> ImageByteC
        """
        this = _Ravl.new_ImageByteC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(ImageByteC self) -> RavlN::SizeT"""
        return _Ravl.ImageByteC_Rows(self)

    def Cols(self):
        """Cols(ImageByteC self) -> RavlN::SizeT"""
        return _Ravl.ImageByteC_Cols(self)

    def Row(self, *args):
        """Row(ImageByteC self, IndexC row) -> unsigned char *"""
        return _Ravl.ImageByteC_Row(self, *args)

    def Stride(self):
        """Stride(ImageByteC self) -> RavlN::IntT"""
        return _Ravl.ImageByteC_Stride(self)

    def DataAsString(self):
        """DataAsString(ImageByteC self) -> PyObject *"""
        return _Ravl.ImageByteC_DataAsString(self)

    def DataAsStringTriple(self):
        """DataAsStringTriple(ImageByteC self) -> PyObject *"""
        return _Ravl.ImageByteC_DataAsStringTriple(self)

    __swig_destroy__ = _Ravl.delete_ImageByteC
    __del__ = lambda self : None;
ImageByteC_swigregister = _Ravl.ImageByteC_swigregister
ImageByteC_swigregister(ImageByteC)


def DrawPolygon(*args):
  """
    DrawPolygon(ByteRGBArray2dC arg1, ByteRGBValueC arg2, Polygon2dC poly, bool fill=False)
    DrawPolygon(ByteRGBArray2dC arg1, ByteRGBValueC arg2, Polygon2dC poly)
    DrawPolygon(Array2dByteC arg1, RavlN::ByteT const & arg2, Polygon2dC poly, bool fill=False)
    DrawPolygon(Array2dByteC arg1, RavlN::ByteT const & arg2, Polygon2dC poly)
    """
  return _Ravl.DrawPolygon(*args)
class FontC(_object):
    """Proxy of C++ RavlImageN::FontC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlImageN::FontC self) -> FontC"""
        this = _Ravl.new_FontC()
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(FontC self) -> bool"""
        return _Ravl.FontC_IsValid(self)

    def Center(self, *args):
        """Center(FontC self, StringC text) -> Index2dC"""
        return _Ravl.FontC_Center(self, *args)

    def Size(self, *args):
        """Size(FontC self, StringC text) -> Index2dC"""
        return _Ravl.FontC_Size(self, *args)

    def Count(self):
        """Count(FontC self) -> RavlN::UIntT"""
        return _Ravl.FontC_Count(self)

    __swig_destroy__ = _Ravl.delete_FontC
    __del__ = lambda self : None;
FontC_swigregister = _Ravl.FontC_swigregister
FontC_swigregister(FontC)


def DefaultFont():
  """DefaultFont() -> FontC"""
  return _Ravl.DefaultFont()

def DrawTextByteRGB(*args):
  """DrawTextByteRGB(FontC font, ByteRGBValueC value, Index2dC offset, StringC text, ImageByteRGBValueC image)"""
  return _Ravl.DrawTextByteRGB(*args)

def DrawTextByte(*args):
  """DrawTextByte(FontC font, unsigned char const & value, Index2dC offset, StringC text, ImageByteC image)"""
  return _Ravl.DrawTextByte(*args)

def DrawTextCenterByteRGB(*args):
  """DrawTextCenterByteRGB(FontC font, ByteRGBValueC value, Index2dC offset, StringC text, ImageByteRGBValueC image)"""
  return _Ravl.DrawTextCenterByteRGB(*args)

def DrawTextCenterByte(*args):
  """DrawTextCenterByte(FontC font, unsigned char const & value, Index2dC offset, StringC text, ImageByteC image)"""
  return _Ravl.DrawTextCenterByte(*args)
class SArray1dUInt(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dUInt, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dUInt"""
        return _Ravl.SArray1dUInt_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray1dC<(RavlN::UIntT)> self) -> SArray1dUInt
        __init__(RavlN::SArray1dC<(RavlN::UIntT)> self, RavlN::SizeT const dim) -> SArray1dUInt
        __init__(RavlN::SArray1dC<(RavlN::UIntT)> self, SArray1dUInt vv) -> SArray1dUInt
        __init__(RavlN::SArray1dC<(RavlN::UIntT)> self, SArray1dUInt vv, RavlN::SizeT dim, RavlN::SizeT offsetInBuff=0) -> SArray1dUInt
        __init__(RavlN::SArray1dC<(RavlN::UIntT)> self, SArray1dUInt vv, RavlN::SizeT dim) -> SArray1dUInt
        __init__(RavlN::SArray1dC<(RavlN::UIntT)> self, unsigned int * data, RavlN::SizeT const dim, bool removable) -> SArray1dUInt
        """
        this = _Ravl.new_SArray1dUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(SArray1dUInt self) -> bool"""
        return _Ravl.SArray1dUInt_IsEmpty(self)

    def Contains(self, *args):
        """Contains(SArray1dUInt self, IndexC i) -> bool"""
        return _Ravl.SArray1dUInt_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray1dUInt self, unsigned int const & d)"""
        return _Ravl.SArray1dUInt_Fill(self, *args)

    def Reverse(self):
        """Reverse(SArray1dUInt self)"""
        return _Ravl.SArray1dUInt_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __mul__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __div__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __add__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __sub__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __iadd__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __isub__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __imul__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray1dUInt self, SArray1dUInt arr) -> SArray1dUInt
        __idiv__(SArray1dUInt self, unsigned int const & number) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt___idiv__(self, *args)

    def Sum(self):
        """Sum(SArray1dUInt self) -> unsigned int"""
        return _Ravl.SArray1dUInt_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(SArray1dUInt self) -> unsigned int"""
        return _Ravl.SArray1dUInt_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(SArray1dUInt self) -> SArray1dUInt
        SArray1d(SArray1dUInt self) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_SArray1d(self, *args)

    def Size(self):
        """Size(SArray1dUInt self) -> RavlN::SizeT"""
        return _Ravl.SArray1dUInt_Size(self)

    def Range(self):
        """Range(SArray1dUInt self) -> IndexRangeC"""
        return _Ravl.SArray1dUInt_Range(self)

    def Join(self, *args):
        """
        Join(SArray1dUInt self, SArray1dUInt Oth) -> SArray1dUInt
        Join(SArray1dUInt self, unsigned int const & Oth) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_Join(self, *args)

    def Append(self, *args):
        """
        Append(SArray1dUInt self, SArray1dUInt a) -> SArray1dUInt
        Append(SArray1dUInt self, unsigned int const & a) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_Append(self, *args)

    def From(self, *args):
        """
        From(SArray1dUInt self, RavlN::UIntT offset) -> SArray1dUInt
        From(SArray1dUInt self, RavlN::UIntT offset, RavlN::UIntT size) -> SArray1dUInt
        """
        return _Ravl.SArray1dUInt_From(self, *args)

    def After(self, *args):
        """After(SArray1dUInt self, RavlN::UIntT offset) -> SArray1dUInt"""
        return _Ravl.SArray1dUInt_After(self, *args)

    def Before(self, *args):
        """Before(SArray1dUInt self, RavlN::UIntT offset) -> SArray1dUInt"""
        return _Ravl.SArray1dUInt_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray1dUInt self, SArray1dUInt vv) -> bool"""
        return _Ravl.SArray1dUInt___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray1dUInt self, SArray1dUInt vv) -> bool"""
        return _Ravl.SArray1dUInt___ne__(self, *args)

    def Hash(self):
        """Hash(SArray1dUInt self) -> RavlN::SizeT"""
        return _Ravl.SArray1dUInt_Hash(self)

    def DataStart(self):
        """DataStart(SArray1dUInt self) -> unsigned int *"""
        return _Ravl.SArray1dUInt_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(SArray1dUInt self, size_t i) -> unsigned int const &"""
        return _Ravl.SArray1dUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SArray1dUInt self, size_t i, unsigned int const & v)"""
        return _Ravl.SArray1dUInt___setitem__(self, *args)

    def __str__(self):
        """__str__(SArray1dUInt self) -> char const *"""
        return _Ravl.SArray1dUInt___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dUInt
    __del__ = lambda self : None;
SArray1dUInt_swigregister = _Ravl.SArray1dUInt_swigregister
SArray1dUInt_swigregister(SArray1dUInt)

def SArray1dUInt_ConstructAligned(*args):
  """SArray1dUInt_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dUInt"""
  return _Ravl.SArray1dUInt_ConstructAligned(*args)

class SArray1dReal(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dReal, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dReal"""
        return _Ravl.SArray1dReal_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray1dC<(RavlN::RealT)> self) -> SArray1dReal
        __init__(RavlN::SArray1dC<(RavlN::RealT)> self, RavlN::SizeT const dim) -> SArray1dReal
        __init__(RavlN::SArray1dC<(RavlN::RealT)> self, SArray1dReal vv) -> SArray1dReal
        __init__(RavlN::SArray1dC<(RavlN::RealT)> self, SArray1dReal vv, RavlN::SizeT dim, RavlN::SizeT offsetInBuff=0) -> SArray1dReal
        __init__(RavlN::SArray1dC<(RavlN::RealT)> self, SArray1dReal vv, RavlN::SizeT dim) -> SArray1dReal
        __init__(RavlN::SArray1dC<(RavlN::RealT)> self, double * data, RavlN::SizeT const dim, bool removable) -> SArray1dReal
        """
        this = _Ravl.new_SArray1dReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(SArray1dReal self) -> bool"""
        return _Ravl.SArray1dReal_IsEmpty(self)

    def Contains(self, *args):
        """Contains(SArray1dReal self, IndexC i) -> bool"""
        return _Ravl.SArray1dReal_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray1dReal self, double const & d)"""
        return _Ravl.SArray1dReal_Fill(self, *args)

    def Reverse(self):
        """Reverse(SArray1dReal self)"""
        return _Ravl.SArray1dReal_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __mul__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __div__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __add__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __sub__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __iadd__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __isub__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __imul__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray1dReal self, SArray1dReal arr) -> SArray1dReal
        __idiv__(SArray1dReal self, double const & number) -> SArray1dReal
        """
        return _Ravl.SArray1dReal___idiv__(self, *args)

    def Sum(self):
        """Sum(SArray1dReal self) -> double"""
        return _Ravl.SArray1dReal_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(SArray1dReal self) -> double"""
        return _Ravl.SArray1dReal_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(SArray1dReal self) -> SArray1dReal
        SArray1d(SArray1dReal self) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_SArray1d(self, *args)

    def Size(self):
        """Size(SArray1dReal self) -> RavlN::SizeT"""
        return _Ravl.SArray1dReal_Size(self)

    def Range(self):
        """Range(SArray1dReal self) -> IndexRangeC"""
        return _Ravl.SArray1dReal_Range(self)

    def Join(self, *args):
        """
        Join(SArray1dReal self, SArray1dReal Oth) -> SArray1dReal
        Join(SArray1dReal self, double const & Oth) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_Join(self, *args)

    def Append(self, *args):
        """
        Append(SArray1dReal self, SArray1dReal a) -> SArray1dReal
        Append(SArray1dReal self, double const & a) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_Append(self, *args)

    def From(self, *args):
        """
        From(SArray1dReal self, RavlN::UIntT offset) -> SArray1dReal
        From(SArray1dReal self, RavlN::UIntT offset, RavlN::UIntT size) -> SArray1dReal
        """
        return _Ravl.SArray1dReal_From(self, *args)

    def After(self, *args):
        """After(SArray1dReal self, RavlN::UIntT offset) -> SArray1dReal"""
        return _Ravl.SArray1dReal_After(self, *args)

    def Before(self, *args):
        """Before(SArray1dReal self, RavlN::UIntT offset) -> SArray1dReal"""
        return _Ravl.SArray1dReal_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray1dReal self, SArray1dReal vv) -> bool"""
        return _Ravl.SArray1dReal___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray1dReal self, SArray1dReal vv) -> bool"""
        return _Ravl.SArray1dReal___ne__(self, *args)

    def Hash(self):
        """Hash(SArray1dReal self) -> RavlN::SizeT"""
        return _Ravl.SArray1dReal_Hash(self)

    def DataStart(self):
        """DataStart(SArray1dReal self) -> double *"""
        return _Ravl.SArray1dReal_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(SArray1dReal self, size_t i) -> double const &"""
        return _Ravl.SArray1dReal___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SArray1dReal self, size_t i, double const & v)"""
        return _Ravl.SArray1dReal___setitem__(self, *args)

    def __str__(self):
        """__str__(SArray1dReal self) -> char const *"""
        return _Ravl.SArray1dReal___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dReal
    __del__ = lambda self : None;
SArray1dReal_swigregister = _Ravl.SArray1dReal_swigregister
SArray1dReal_swigregister(SArray1dReal)

def SArray1dReal_ConstructAligned(*args):
  """SArray1dReal_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dReal"""
  return _Ravl.SArray1dReal_ConstructAligned(*args)

class SArray1dFloat(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dFloat, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dFloat"""
        return _Ravl.SArray1dFloat_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray1dC<(RavlN::FloatT)> self) -> SArray1dFloat
        __init__(RavlN::SArray1dC<(RavlN::FloatT)> self, RavlN::SizeT const dim) -> SArray1dFloat
        __init__(RavlN::SArray1dC<(RavlN::FloatT)> self, SArray1dFloat vv) -> SArray1dFloat
        __init__(RavlN::SArray1dC<(RavlN::FloatT)> self, SArray1dFloat vv, RavlN::SizeT dim, RavlN::SizeT offsetInBuff=0) -> SArray1dFloat
        __init__(RavlN::SArray1dC<(RavlN::FloatT)> self, SArray1dFloat vv, RavlN::SizeT dim) -> SArray1dFloat
        __init__(RavlN::SArray1dC<(RavlN::FloatT)> self, float * data, RavlN::SizeT const dim, bool removable) -> SArray1dFloat
        """
        this = _Ravl.new_SArray1dFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(SArray1dFloat self) -> bool"""
        return _Ravl.SArray1dFloat_IsEmpty(self)

    def Contains(self, *args):
        """Contains(SArray1dFloat self, IndexC i) -> bool"""
        return _Ravl.SArray1dFloat_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray1dFloat self, float const & d)"""
        return _Ravl.SArray1dFloat_Fill(self, *args)

    def Reverse(self):
        """Reverse(SArray1dFloat self)"""
        return _Ravl.SArray1dFloat_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __mul__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __div__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __add__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __sub__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __iadd__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __isub__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __imul__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray1dFloat self, SArray1dFloat arr) -> SArray1dFloat
        __idiv__(SArray1dFloat self, float const & number) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat___idiv__(self, *args)

    def Sum(self):
        """Sum(SArray1dFloat self) -> float"""
        return _Ravl.SArray1dFloat_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(SArray1dFloat self) -> float"""
        return _Ravl.SArray1dFloat_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(SArray1dFloat self) -> SArray1dFloat
        SArray1d(SArray1dFloat self) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_SArray1d(self, *args)

    def Size(self):
        """Size(SArray1dFloat self) -> RavlN::SizeT"""
        return _Ravl.SArray1dFloat_Size(self)

    def Range(self):
        """Range(SArray1dFloat self) -> IndexRangeC"""
        return _Ravl.SArray1dFloat_Range(self)

    def Join(self, *args):
        """
        Join(SArray1dFloat self, SArray1dFloat Oth) -> SArray1dFloat
        Join(SArray1dFloat self, float const & Oth) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_Join(self, *args)

    def Append(self, *args):
        """
        Append(SArray1dFloat self, SArray1dFloat a) -> SArray1dFloat
        Append(SArray1dFloat self, float const & a) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_Append(self, *args)

    def From(self, *args):
        """
        From(SArray1dFloat self, RavlN::UIntT offset) -> SArray1dFloat
        From(SArray1dFloat self, RavlN::UIntT offset, RavlN::UIntT size) -> SArray1dFloat
        """
        return _Ravl.SArray1dFloat_From(self, *args)

    def After(self, *args):
        """After(SArray1dFloat self, RavlN::UIntT offset) -> SArray1dFloat"""
        return _Ravl.SArray1dFloat_After(self, *args)

    def Before(self, *args):
        """Before(SArray1dFloat self, RavlN::UIntT offset) -> SArray1dFloat"""
        return _Ravl.SArray1dFloat_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray1dFloat self, SArray1dFloat vv) -> bool"""
        return _Ravl.SArray1dFloat___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray1dFloat self, SArray1dFloat vv) -> bool"""
        return _Ravl.SArray1dFloat___ne__(self, *args)

    def Hash(self):
        """Hash(SArray1dFloat self) -> RavlN::SizeT"""
        return _Ravl.SArray1dFloat_Hash(self)

    def DataStart(self):
        """DataStart(SArray1dFloat self) -> float *"""
        return _Ravl.SArray1dFloat_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(SArray1dFloat self, size_t i) -> float const &"""
        return _Ravl.SArray1dFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SArray1dFloat self, size_t i, float const & v)"""
        return _Ravl.SArray1dFloat___setitem__(self, *args)

    def __str__(self):
        """__str__(SArray1dFloat self) -> char const *"""
        return _Ravl.SArray1dFloat___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dFloat
    __del__ = lambda self : None;
SArray1dFloat_swigregister = _Ravl.SArray1dFloat_swigregister
SArray1dFloat_swigregister(SArray1dFloat)

def SArray1dFloat_ConstructAligned(*args):
  """SArray1dFloat_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dFloat"""
  return _Ravl.SArray1dFloat_ConstructAligned(*args)

class SArray1dIndexC(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::IndexC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dIndexC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dIndexC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dIndexC"""
        return _Ravl.SArray1dIndexC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray1dC<(RavlN::IndexC)> self) -> SArray1dIndexC
        __init__(RavlN::SArray1dC<(RavlN::IndexC)> self, RavlN::SizeT const dim) -> SArray1dIndexC
        __init__(RavlN::SArray1dC<(RavlN::IndexC)> self, SArray1dIndexC vv) -> SArray1dIndexC
        __init__(RavlN::SArray1dC<(RavlN::IndexC)> self, SArray1dIndexC vv, RavlN::SizeT dim, RavlN::SizeT offsetInBuff=0) -> SArray1dIndexC
        __init__(RavlN::SArray1dC<(RavlN::IndexC)> self, SArray1dIndexC vv, RavlN::SizeT dim) -> SArray1dIndexC
        __init__(RavlN::SArray1dC<(RavlN::IndexC)> self, IndexC data, RavlN::SizeT const dim, bool removable) -> SArray1dIndexC
        """
        this = _Ravl.new_SArray1dIndexC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(SArray1dIndexC self) -> bool"""
        return _Ravl.SArray1dIndexC_IsEmpty(self)

    def Contains(self, *args):
        """Contains(SArray1dIndexC self, IndexC i) -> bool"""
        return _Ravl.SArray1dIndexC_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray1dIndexC self, IndexC d)"""
        return _Ravl.SArray1dIndexC_Fill(self, *args)

    def Reverse(self):
        """Reverse(SArray1dIndexC self)"""
        return _Ravl.SArray1dIndexC_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __mul__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __div__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __add__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __sub__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __iadd__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __isub__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __imul__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray1dIndexC self, SArray1dIndexC arr) -> SArray1dIndexC
        __idiv__(SArray1dIndexC self, IndexC number) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC___idiv__(self, *args)

    def Sum(self):
        """Sum(SArray1dIndexC self) -> IndexC"""
        return _Ravl.SArray1dIndexC_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(SArray1dIndexC self) -> IndexC"""
        return _Ravl.SArray1dIndexC_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(SArray1dIndexC self) -> SArray1dIndexC
        SArray1d(SArray1dIndexC self) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_SArray1d(self, *args)

    def Size(self):
        """Size(SArray1dIndexC self) -> RavlN::SizeT"""
        return _Ravl.SArray1dIndexC_Size(self)

    def Range(self):
        """Range(SArray1dIndexC self) -> IndexRangeC"""
        return _Ravl.SArray1dIndexC_Range(self)

    def Join(self, *args):
        """
        Join(SArray1dIndexC self, SArray1dIndexC Oth) -> SArray1dIndexC
        Join(SArray1dIndexC self, IndexC Oth) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_Join(self, *args)

    def Append(self, *args):
        """
        Append(SArray1dIndexC self, SArray1dIndexC a) -> SArray1dIndexC
        Append(SArray1dIndexC self, IndexC a) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_Append(self, *args)

    def From(self, *args):
        """
        From(SArray1dIndexC self, RavlN::UIntT offset) -> SArray1dIndexC
        From(SArray1dIndexC self, RavlN::UIntT offset, RavlN::UIntT size) -> SArray1dIndexC
        """
        return _Ravl.SArray1dIndexC_From(self, *args)

    def After(self, *args):
        """After(SArray1dIndexC self, RavlN::UIntT offset) -> SArray1dIndexC"""
        return _Ravl.SArray1dIndexC_After(self, *args)

    def Before(self, *args):
        """Before(SArray1dIndexC self, RavlN::UIntT offset) -> SArray1dIndexC"""
        return _Ravl.SArray1dIndexC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray1dIndexC self, SArray1dIndexC vv) -> bool"""
        return _Ravl.SArray1dIndexC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray1dIndexC self, SArray1dIndexC vv) -> bool"""
        return _Ravl.SArray1dIndexC___ne__(self, *args)

    def Hash(self):
        """Hash(SArray1dIndexC self) -> RavlN::SizeT"""
        return _Ravl.SArray1dIndexC_Hash(self)

    def DataStart(self):
        """DataStart(SArray1dIndexC self) -> IndexC"""
        return _Ravl.SArray1dIndexC_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(SArray1dIndexC self, size_t i) -> IndexC"""
        return _Ravl.SArray1dIndexC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SArray1dIndexC self, size_t i, IndexC v)"""
        return _Ravl.SArray1dIndexC___setitem__(self, *args)

    def __str__(self):
        """__str__(SArray1dIndexC self) -> char const *"""
        return _Ravl.SArray1dIndexC___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dIndexC
    __del__ = lambda self : None;
SArray1dIndexC_swigregister = _Ravl.SArray1dIndexC_swigregister
SArray1dIndexC_swigregister(SArray1dIndexC)

def SArray1dIndexC_ConstructAligned(*args):
  """SArray1dIndexC_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dIndexC"""
  return _Ravl.SArray1dIndexC_ConstructAligned(*args)

class SArray1dPoint2dC(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dPoint2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dPoint2dC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dPoint2dC"""
        return _Ravl.SArray1dPoint2dC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray1dC<(RavlN::Point2dC)> self) -> SArray1dPoint2dC
        __init__(RavlN::SArray1dC<(RavlN::Point2dC)> self, RavlN::SizeT const dim) -> SArray1dPoint2dC
        __init__(RavlN::SArray1dC<(RavlN::Point2dC)> self, SArray1dPoint2dC vv) -> SArray1dPoint2dC
        __init__(RavlN::SArray1dC<(RavlN::Point2dC)> self, SArray1dPoint2dC vv, RavlN::SizeT dim, RavlN::SizeT offsetInBuff=0) -> SArray1dPoint2dC
        __init__(RavlN::SArray1dC<(RavlN::Point2dC)> self, SArray1dPoint2dC vv, RavlN::SizeT dim) -> SArray1dPoint2dC
        __init__(RavlN::SArray1dC<(RavlN::Point2dC)> self, Point2dC data, RavlN::SizeT const dim, bool removable) -> SArray1dPoint2dC
        """
        this = _Ravl.new_SArray1dPoint2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(SArray1dPoint2dC self) -> bool"""
        return _Ravl.SArray1dPoint2dC_IsEmpty(self)

    def Contains(self, *args):
        """Contains(SArray1dPoint2dC self, IndexC i) -> bool"""
        return _Ravl.SArray1dPoint2dC_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray1dPoint2dC self, Point2dC d)"""
        return _Ravl.SArray1dPoint2dC_Fill(self, *args)

    def Reverse(self):
        """Reverse(SArray1dPoint2dC self)"""
        return _Ravl.SArray1dPoint2dC_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __mul__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __div__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __add__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __sub__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __iadd__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __isub__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __imul__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray1dPoint2dC self, SArray1dPoint2dC arr) -> SArray1dPoint2dC
        __idiv__(SArray1dPoint2dC self, Point2dC number) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC___idiv__(self, *args)

    def Sum(self):
        """Sum(SArray1dPoint2dC self) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(SArray1dPoint2dC self) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(SArray1dPoint2dC self) -> SArray1dPoint2dC
        SArray1d(SArray1dPoint2dC self) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_SArray1d(self, *args)

    def Size(self):
        """Size(SArray1dPoint2dC self) -> RavlN::SizeT"""
        return _Ravl.SArray1dPoint2dC_Size(self)

    def Range(self):
        """Range(SArray1dPoint2dC self) -> IndexRangeC"""
        return _Ravl.SArray1dPoint2dC_Range(self)

    def Join(self, *args):
        """
        Join(SArray1dPoint2dC self, SArray1dPoint2dC Oth) -> SArray1dPoint2dC
        Join(SArray1dPoint2dC self, Point2dC Oth) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_Join(self, *args)

    def Append(self, *args):
        """
        Append(SArray1dPoint2dC self, SArray1dPoint2dC a) -> SArray1dPoint2dC
        Append(SArray1dPoint2dC self, Point2dC a) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_Append(self, *args)

    def From(self, *args):
        """
        From(SArray1dPoint2dC self, RavlN::UIntT offset) -> SArray1dPoint2dC
        From(SArray1dPoint2dC self, RavlN::UIntT offset, RavlN::UIntT size) -> SArray1dPoint2dC
        """
        return _Ravl.SArray1dPoint2dC_From(self, *args)

    def After(self, *args):
        """After(SArray1dPoint2dC self, RavlN::UIntT offset) -> SArray1dPoint2dC"""
        return _Ravl.SArray1dPoint2dC_After(self, *args)

    def Before(self, *args):
        """Before(SArray1dPoint2dC self, RavlN::UIntT offset) -> SArray1dPoint2dC"""
        return _Ravl.SArray1dPoint2dC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray1dPoint2dC self, SArray1dPoint2dC vv) -> bool"""
        return _Ravl.SArray1dPoint2dC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray1dPoint2dC self, SArray1dPoint2dC vv) -> bool"""
        return _Ravl.SArray1dPoint2dC___ne__(self, *args)

    def Hash(self):
        """Hash(SArray1dPoint2dC self) -> RavlN::SizeT"""
        return _Ravl.SArray1dPoint2dC_Hash(self)

    def DataStart(self):
        """DataStart(SArray1dPoint2dC self) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(SArray1dPoint2dC self, size_t i) -> Point2dC"""
        return _Ravl.SArray1dPoint2dC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SArray1dPoint2dC self, size_t i, Point2dC v)"""
        return _Ravl.SArray1dPoint2dC___setitem__(self, *args)

    def __str__(self):
        """__str__(SArray1dPoint2dC self) -> char const *"""
        return _Ravl.SArray1dPoint2dC___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dPoint2dC
    __del__ = lambda self : None;
SArray1dPoint2dC_swigregister = _Ravl.SArray1dPoint2dC_swigregister
SArray1dPoint2dC_swigregister(SArray1dPoint2dC)

def SArray1dPoint2dC_ConstructAligned(*args):
  """SArray1dPoint2dC_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dPoint2dC"""
  return _Ravl.SArray1dPoint2dC_ConstructAligned(*args)

class SArray1dVectorC(_object):
    """Proxy of C++ RavlN::SArray1dC<(RavlN::VectorC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray1dVectorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray1dVectorC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dVectorC"""
        return _Ravl.SArray1dVectorC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray1dC<(RavlN::VectorC)> self) -> SArray1dVectorC
        __init__(RavlN::SArray1dC<(RavlN::VectorC)> self, RavlN::SizeT const dim) -> SArray1dVectorC
        __init__(RavlN::SArray1dC<(RavlN::VectorC)> self, SArray1dVectorC vv) -> SArray1dVectorC
        __init__(RavlN::SArray1dC<(RavlN::VectorC)> self, SArray1dVectorC vv, RavlN::SizeT dim, RavlN::SizeT offsetInBuff=0) -> SArray1dVectorC
        __init__(RavlN::SArray1dC<(RavlN::VectorC)> self, SArray1dVectorC vv, RavlN::SizeT dim) -> SArray1dVectorC
        __init__(RavlN::SArray1dC<(RavlN::VectorC)> self, VectorC data, RavlN::SizeT const dim, bool removable) -> SArray1dVectorC
        """
        this = _Ravl.new_SArray1dVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(SArray1dVectorC self) -> bool"""
        return _Ravl.SArray1dVectorC_IsEmpty(self)

    def Contains(self, *args):
        """Contains(SArray1dVectorC self, IndexC i) -> bool"""
        return _Ravl.SArray1dVectorC_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray1dVectorC self, VectorC d)"""
        return _Ravl.SArray1dVectorC_Fill(self, *args)

    def Reverse(self):
        """Reverse(SArray1dVectorC self)"""
        return _Ravl.SArray1dVectorC_Reverse(self)

    def __mul__(self, *args):
        """
        __mul__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __mul__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __div__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __add__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __sub__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __iadd__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __isub__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __imul__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray1dVectorC self, SArray1dVectorC arr) -> SArray1dVectorC
        __idiv__(SArray1dVectorC self, VectorC number) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC___idiv__(self, *args)

    def Sum(self):
        """Sum(SArray1dVectorC self) -> VectorC"""
        return _Ravl.SArray1dVectorC_Sum(self)

    def SumOfSqr(self):
        """SumOfSqr(SArray1dVectorC self) -> VectorC"""
        return _Ravl.SArray1dVectorC_SumOfSqr(self)

    def SArray1d(self, *args):
        """
        SArray1d(SArray1dVectorC self) -> SArray1dVectorC
        SArray1d(SArray1dVectorC self) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_SArray1d(self, *args)

    def Size(self):
        """Size(SArray1dVectorC self) -> RavlN::SizeT"""
        return _Ravl.SArray1dVectorC_Size(self)

    def Range(self):
        """Range(SArray1dVectorC self) -> IndexRangeC"""
        return _Ravl.SArray1dVectorC_Range(self)

    def Join(self, *args):
        """
        Join(SArray1dVectorC self, SArray1dVectorC Oth) -> SArray1dVectorC
        Join(SArray1dVectorC self, VectorC Oth) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_Join(self, *args)

    def Append(self, *args):
        """
        Append(SArray1dVectorC self, SArray1dVectorC a) -> SArray1dVectorC
        Append(SArray1dVectorC self, VectorC a) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_Append(self, *args)

    def From(self, *args):
        """
        From(SArray1dVectorC self, RavlN::UIntT offset) -> SArray1dVectorC
        From(SArray1dVectorC self, RavlN::UIntT offset, RavlN::UIntT size) -> SArray1dVectorC
        """
        return _Ravl.SArray1dVectorC_From(self, *args)

    def After(self, *args):
        """After(SArray1dVectorC self, RavlN::UIntT offset) -> SArray1dVectorC"""
        return _Ravl.SArray1dVectorC_After(self, *args)

    def Before(self, *args):
        """Before(SArray1dVectorC self, RavlN::UIntT offset) -> SArray1dVectorC"""
        return _Ravl.SArray1dVectorC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray1dVectorC self, SArray1dVectorC vv) -> bool"""
        return _Ravl.SArray1dVectorC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray1dVectorC self, SArray1dVectorC vv) -> bool"""
        return _Ravl.SArray1dVectorC___ne__(self, *args)

    def Hash(self):
        """Hash(SArray1dVectorC self) -> RavlN::SizeT"""
        return _Ravl.SArray1dVectorC_Hash(self)

    def DataStart(self):
        """DataStart(SArray1dVectorC self) -> VectorC"""
        return _Ravl.SArray1dVectorC_DataStart(self)

    def __getitem__(self, *args):
        """__getitem__(SArray1dVectorC self, size_t i) -> VectorC"""
        return _Ravl.SArray1dVectorC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SArray1dVectorC self, size_t i, VectorC v)"""
        return _Ravl.SArray1dVectorC___setitem__(self, *args)

    def __str__(self):
        """__str__(SArray1dVectorC self) -> char const *"""
        return _Ravl.SArray1dVectorC___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray1dVectorC
    __del__ = lambda self : None;
SArray1dVectorC_swigregister = _Ravl.SArray1dVectorC_swigregister
SArray1dVectorC_swigregister(SArray1dVectorC)

def SArray1dVectorC_ConstructAligned(*args):
  """SArray1dVectorC_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> SArray1dVectorC"""
  return _Ravl.SArray1dVectorC_ConstructAligned(*args)

class SArray2dFloat(_object):
    """Proxy of C++ RavlN::SArray2dC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray2dFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray2dFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, RavlN::SizeT dim1, RavlN::SizeT dim2) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, Index2dC size) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, SArray2dFloat arr, RavlN::SizeT size1, RavlN::SizeT size2) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, SArray2dFloat arr, IndexRange2dC rng) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, float * data, RavlN::SizeT size1, RavlN::SizeT size2, bool copyMemory=False, bool freeMemory=False, 
            RavlN::IntT stride=0) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, float * data, RavlN::SizeT size1, RavlN::SizeT size2, bool copyMemory=False, bool freeMemory=False) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, float * data, RavlN::SizeT size1, RavlN::SizeT size2, bool copyMemory=False) -> SArray2dFloat
        __init__(RavlN::SArray2dC<(RavlN::FloatT)> self, float * data, RavlN::SizeT size1, RavlN::SizeT size2) -> SArray2dFloat
        """
        this = _Ravl.new_SArray2dFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim1, RavlN::SizeT const dim2, RavlN::UIntT align) -> SArray2dFloat"""
        return _Ravl.SArray2dFloat_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def Copy(self):
        """Copy(SArray2dFloat self) -> SArray2dFloat"""
        return _Ravl.SArray2dFloat_Copy(self)

    def Size1(self):
        """Size1(SArray2dFloat self) -> RavlN::SizeT"""
        return _Ravl.SArray2dFloat_Size1(self)

    def Size2(self):
        """Size2(SArray2dFloat self) -> RavlN::SizeT"""
        return _Ravl.SArray2dFloat_Size2(self)

    def Contains(self, *args):
        """Contains(SArray2dFloat self, Index2dC i) -> bool"""
        return _Ravl.SArray2dFloat_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray2dFloat self, float const & d)"""
        return _Ravl.SArray2dFloat_Fill(self, *args)

    def Stride(self):
        """Stride(SArray2dFloat self) -> RavlN::IntT"""
        return _Ravl.SArray2dFloat_Stride(self)

    def IsContinuous(self):
        """IsContinuous(SArray2dFloat self) -> bool"""
        return _Ravl.SArray2dFloat_IsContinuous(self)

    def Frame(self):
        """Frame(SArray2dFloat self) -> IndexRange2dC"""
        return _Ravl.SArray2dFloat_Frame(self)

    def AsVector(self, alwaysCopy=False):
        """
        AsVector(SArray2dFloat self, bool alwaysCopy=False) -> SArray1dFloat
        AsVector(SArray2dFloat self) -> SArray1dFloat
        """
        return _Ravl.SArray2dFloat_AsVector(self, alwaysCopy)

    def __mul__(self, *args):
        """
        __mul__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __mul__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __div__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __add__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __sub__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __iadd__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __isub__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __imul__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray2dFloat self, SArray2dFloat arr) -> SArray2dFloat
        __idiv__(SArray2dFloat self, float const & number) -> SArray2dFloat
        """
        return _Ravl.SArray2dFloat___idiv__(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray2dFloat self, SArray2dFloat op) -> bool"""
        return _Ravl.SArray2dFloat___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray2dFloat self, SArray2dFloat op) -> bool"""
        return _Ravl.SArray2dFloat___ne__(self, *args)

    def SumOfSqr(self):
        """SumOfSqr(SArray2dFloat self) -> float"""
        return _Ravl.SArray2dFloat_SumOfSqr(self)

    def Sum(self):
        """Sum(SArray2dFloat self) -> float"""
        return _Ravl.SArray2dFloat_Sum(self)

    def SliceRow(self, *args):
        """SliceRow(SArray2dFloat self, IndexC i) -> SArray1dFloat"""
        return _Ravl.SArray2dFloat_SliceRow(self, *args)

    def SetColumn(self, *args):
        """
        SetColumn(SArray2dFloat self, IndexC i, SArray1dFloat val)
        SetColumn(SArray2dFloat self, IndexC i, float const & val)
        """
        return _Ravl.SArray2dFloat_SetColumn(self, *args)

    def SetRow(self, *args):
        """
        SetRow(SArray2dFloat self, IndexC i, SArray1dFloat val)
        SetRow(SArray2dFloat self, IndexC i, float const & val)
        """
        return _Ravl.SArray2dFloat_SetRow(self, *args)

    def SetSubArray(self, *args):
        """SetSubArray(SArray2dFloat self, Index2dC origin, SArray2dFloat vals)"""
        return _Ravl.SArray2dFloat_SetSubArray(self, *args)

    def Hash(self):
        """Hash(SArray2dFloat self) -> RavlN::SizeT"""
        return _Ravl.SArray2dFloat_Hash(self)

    def __str__(self):
        """__str__(SArray2dFloat self) -> char const *"""
        return _Ravl.SArray2dFloat___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray2dFloat
    __del__ = lambda self : None;
SArray2dFloat_swigregister = _Ravl.SArray2dFloat_swigregister
SArray2dFloat_swigregister(SArray2dFloat)

def SArray2dFloat_ConstructAligned(*args):
  """SArray2dFloat_ConstructAligned(RavlN::SizeT const dim1, RavlN::SizeT const dim2, RavlN::UIntT align) -> SArray2dFloat"""
  return _Ravl.SArray2dFloat_ConstructAligned(*args)

class SArray2dReal(_object):
    """Proxy of C++ RavlN::SArray2dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArray2dReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArray2dReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, RavlN::SizeT dim1, RavlN::SizeT dim2) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, Index2dC size) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, SArray2dReal arr, RavlN::SizeT size1, RavlN::SizeT size2) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, SArray2dReal arr, IndexRange2dC rng) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, double * data, RavlN::SizeT size1, RavlN::SizeT size2, bool copyMemory=False, bool freeMemory=False, 
            RavlN::IntT stride=0) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, double * data, RavlN::SizeT size1, RavlN::SizeT size2, bool copyMemory=False, bool freeMemory=False) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, double * data, RavlN::SizeT size1, RavlN::SizeT size2, bool copyMemory=False) -> SArray2dReal
        __init__(RavlN::SArray2dC<(RavlN::RealT)> self, double * data, RavlN::SizeT size1, RavlN::SizeT size2) -> SArray2dReal
        """
        this = _Ravl.new_SArray2dReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim1, RavlN::SizeT const dim2, RavlN::UIntT align) -> SArray2dReal"""
        return _Ravl.SArray2dReal_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def Copy(self):
        """Copy(SArray2dReal self) -> SArray2dReal"""
        return _Ravl.SArray2dReal_Copy(self)

    def Size1(self):
        """Size1(SArray2dReal self) -> RavlN::SizeT"""
        return _Ravl.SArray2dReal_Size1(self)

    def Size2(self):
        """Size2(SArray2dReal self) -> RavlN::SizeT"""
        return _Ravl.SArray2dReal_Size2(self)

    def Contains(self, *args):
        """Contains(SArray2dReal self, Index2dC i) -> bool"""
        return _Ravl.SArray2dReal_Contains(self, *args)

    def Fill(self, *args):
        """Fill(SArray2dReal self, double const & d)"""
        return _Ravl.SArray2dReal_Fill(self, *args)

    def Stride(self):
        """Stride(SArray2dReal self) -> RavlN::IntT"""
        return _Ravl.SArray2dReal_Stride(self)

    def IsContinuous(self):
        """IsContinuous(SArray2dReal self) -> bool"""
        return _Ravl.SArray2dReal_IsContinuous(self)

    def Frame(self):
        """Frame(SArray2dReal self) -> IndexRange2dC"""
        return _Ravl.SArray2dReal_Frame(self)

    def AsVector(self, alwaysCopy=False):
        """
        AsVector(SArray2dReal self, bool alwaysCopy=False) -> SArray1dReal
        AsVector(SArray2dReal self) -> SArray1dReal
        """
        return _Ravl.SArray2dReal_AsVector(self, alwaysCopy)

    def __mul__(self, *args):
        """
        __mul__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __mul__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __div__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __add__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __sub__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __iadd__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __isub__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __imul__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(SArray2dReal self, SArray2dReal arr) -> SArray2dReal
        __idiv__(SArray2dReal self, double const & number) -> SArray2dReal
        """
        return _Ravl.SArray2dReal___idiv__(self, *args)

    def __eq__(self, *args):
        """__eq__(SArray2dReal self, SArray2dReal op) -> bool"""
        return _Ravl.SArray2dReal___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SArray2dReal self, SArray2dReal op) -> bool"""
        return _Ravl.SArray2dReal___ne__(self, *args)

    def SumOfSqr(self):
        """SumOfSqr(SArray2dReal self) -> double"""
        return _Ravl.SArray2dReal_SumOfSqr(self)

    def Sum(self):
        """Sum(SArray2dReal self) -> double"""
        return _Ravl.SArray2dReal_Sum(self)

    def SliceRow(self, *args):
        """SliceRow(SArray2dReal self, IndexC i) -> SArray1dReal"""
        return _Ravl.SArray2dReal_SliceRow(self, *args)

    def SetColumn(self, *args):
        """
        SetColumn(SArray2dReal self, IndexC i, SArray1dReal val)
        SetColumn(SArray2dReal self, IndexC i, double const & val)
        """
        return _Ravl.SArray2dReal_SetColumn(self, *args)

    def SetRow(self, *args):
        """
        SetRow(SArray2dReal self, IndexC i, SArray1dReal val)
        SetRow(SArray2dReal self, IndexC i, double const & val)
        """
        return _Ravl.SArray2dReal_SetRow(self, *args)

    def SetSubArray(self, *args):
        """SetSubArray(SArray2dReal self, Index2dC origin, SArray2dReal vals)"""
        return _Ravl.SArray2dReal_SetSubArray(self, *args)

    def Hash(self):
        """Hash(SArray2dReal self) -> RavlN::SizeT"""
        return _Ravl.SArray2dReal_Hash(self)

    def __str__(self):
        """__str__(SArray2dReal self) -> char const *"""
        return _Ravl.SArray2dReal___str__(self)

    __swig_destroy__ = _Ravl.delete_SArray2dReal
    __del__ = lambda self : None;
SArray2dReal_swigregister = _Ravl.SArray2dReal_swigregister
SArray2dReal_swigregister(SArray2dReal)

def SArray2dReal_ConstructAligned(*args):
  """SArray2dReal_ConstructAligned(RavlN::SizeT const dim1, RavlN::SizeT const dim2, RavlN::UIntT align) -> SArray2dReal"""
  return _Ravl.SArray2dReal_ConstructAligned(*args)

class TVectorReal(SArray1dReal):
    """Proxy of C++ RavlN::TVectorC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray1dReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TVectorReal, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray1dReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TVectorReal, name)
    __repr__ = _swig_repr
    def Product(self):
        """Product(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_Product(self)

    def SumOfSqr(self):
        """SumOfSqr(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_SumOfSqr(self)

    def SumOfAbs(self):
        """SumOfAbs(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_SumOfAbs(self)

    def MaxValue(self):
        """MaxValue(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_MaxValue(self)

    def MaxMagnitude(self):
        """MaxMagnitude(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_MaxMagnitude(self)

    def MaxAbsValue(self):
        """MaxAbsValue(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_MaxAbsValue(self)

    def MinValue(self):
        """MinValue(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_MinValue(self)

    def MinAbsValue(self):
        """MinAbsValue(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_MinAbsValue(self)

    def Reciprocal(self):
        """Reciprocal(TVectorReal self) -> TVectorReal"""
        return _Ravl.TVectorReal_Reciprocal(self)

    def Modulus(self):
        """Modulus(TVectorReal self) -> double"""
        return _Ravl.TVectorReal_Modulus(self)

    def TMul(self, *args):
        """TMul(TVectorReal self, TVectorReal b) -> double"""
        return _Ravl.TVectorReal_TMul(self, *args)

    def Dot(self, *args):
        """Dot(TVectorReal self, TVectorReal v) -> double"""
        return _Ravl.TVectorReal_Dot(self, *args)

    def Dot2(self, *args):
        """Dot2(TVectorReal self, TVectorReal v1, TVectorReal v2) -> double"""
        return _Ravl.TVectorReal_Dot2(self, *args)

    def ElemMul(self, *args):
        """ElemMul(TVectorReal self, TVectorReal v2, TVectorReal result)"""
        return _Ravl.TVectorReal_ElemMul(self, *args)

    def ElemSum(self, *args):
        """ElemSum(TVectorReal self, TVectorReal v2, TVectorReal result)"""
        return _Ravl.TVectorReal_ElemSum(self, *args)

    def ElemSubtract(self, *args):
        """ElemSubtract(TVectorReal self, TVectorReal v2, TVectorReal result)"""
        return _Ravl.TVectorReal_ElemSubtract(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(TVectorReal self, double const & min) -> TVectorReal"""
        return _Ravl.TVectorReal_SetSmallToBeZero(self, *args)

    def Unit(self):
        """Unit(TVectorReal self) -> TVectorReal"""
        return _Ravl.TVectorReal_Unit(self)

    def MakeUnit(self):
        """MakeUnit(TVectorReal self) -> TVectorReal"""
        return _Ravl.TVectorReal_MakeUnit(self)

    def MulAdd(self, *args):
        """MulAdd(TVectorReal self, TVectorReal i, double a) -> TVectorReal"""
        return _Ravl.TVectorReal_MulAdd(self, *args)

    def MaxValueDistance(self, *args):
        """MaxValueDistance(TVectorReal self, TVectorReal i) -> double"""
        return _Ravl.TVectorReal_MaxValueDistance(self, *args)

    def CityBlockDistance(self, *args):
        """CityBlockDistance(TVectorReal self, TVectorReal i) -> double"""
        return _Ravl.TVectorReal_CityBlockDistance(self, *args)

    def SqrEuclidDistance(self, *args):
        """SqrEuclidDistance(TVectorReal self, TVectorReal i) -> double"""
        return _Ravl.TVectorReal_SqrEuclidDistance(self, *args)

    def EuclidDistance(self, *args):
        """EuclidDistance(TVectorReal self, TVectorReal i) -> double"""
        return _Ravl.TVectorReal_EuclidDistance(self, *args)

    def MaxIndex(self):
        """MaxIndex(TVectorReal self) -> IndexC"""
        return _Ravl.TVectorReal_MaxIndex(self)

    def MaxAbsIndex(self):
        """MaxAbsIndex(TVectorReal self) -> IndexC"""
        return _Ravl.TVectorReal_MaxAbsIndex(self)

    def MinIndex(self):
        """MinIndex(TVectorReal self) -> IndexC"""
        return _Ravl.TVectorReal_MinIndex(self)

    def MinAbsIndex(self):
        """MinAbsIndex(TVectorReal self) -> IndexC"""
        return _Ravl.TVectorReal_MinAbsIndex(self)

    def __str__(self):
        """__str__(TVectorReal self) -> char const *"""
        return _Ravl.TVectorReal___str__(self)

    def __init__(self): 
        """__init__(RavlN::TVectorC<(RavlN::RealT)> self) -> TVectorReal"""
        this = _Ravl.new_TVectorReal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_TVectorReal
    __del__ = lambda self : None;
TVectorReal_swigregister = _Ravl.TVectorReal_swigregister
TVectorReal_swigregister(TVectorReal)

class TVectorFloat(SArray1dFloat):
    """Proxy of C++ RavlN::TVectorC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray1dFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TVectorFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray1dFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TVectorFloat, name)
    __repr__ = _swig_repr
    def Product(self):
        """Product(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_Product(self)

    def SumOfSqr(self):
        """SumOfSqr(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_SumOfSqr(self)

    def SumOfAbs(self):
        """SumOfAbs(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_SumOfAbs(self)

    def MaxValue(self):
        """MaxValue(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_MaxValue(self)

    def MaxMagnitude(self):
        """MaxMagnitude(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_MaxMagnitude(self)

    def MaxAbsValue(self):
        """MaxAbsValue(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_MaxAbsValue(self)

    def MinValue(self):
        """MinValue(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_MinValue(self)

    def MinAbsValue(self):
        """MinAbsValue(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_MinAbsValue(self)

    def Reciprocal(self):
        """Reciprocal(TVectorFloat self) -> TVectorFloat"""
        return _Ravl.TVectorFloat_Reciprocal(self)

    def Modulus(self):
        """Modulus(TVectorFloat self) -> float"""
        return _Ravl.TVectorFloat_Modulus(self)

    def TMul(self, *args):
        """TMul(TVectorFloat self, TVectorFloat b) -> float"""
        return _Ravl.TVectorFloat_TMul(self, *args)

    def Dot(self, *args):
        """Dot(TVectorFloat self, TVectorFloat v) -> float"""
        return _Ravl.TVectorFloat_Dot(self, *args)

    def Dot2(self, *args):
        """Dot2(TVectorFloat self, TVectorFloat v1, TVectorFloat v2) -> float"""
        return _Ravl.TVectorFloat_Dot2(self, *args)

    def ElemMul(self, *args):
        """ElemMul(TVectorFloat self, TVectorFloat v2, TVectorFloat result)"""
        return _Ravl.TVectorFloat_ElemMul(self, *args)

    def ElemSum(self, *args):
        """ElemSum(TVectorFloat self, TVectorFloat v2, TVectorFloat result)"""
        return _Ravl.TVectorFloat_ElemSum(self, *args)

    def ElemSubtract(self, *args):
        """ElemSubtract(TVectorFloat self, TVectorFloat v2, TVectorFloat result)"""
        return _Ravl.TVectorFloat_ElemSubtract(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(TVectorFloat self, float const & min) -> TVectorFloat"""
        return _Ravl.TVectorFloat_SetSmallToBeZero(self, *args)

    def Unit(self):
        """Unit(TVectorFloat self) -> TVectorFloat"""
        return _Ravl.TVectorFloat_Unit(self)

    def MakeUnit(self):
        """MakeUnit(TVectorFloat self) -> TVectorFloat"""
        return _Ravl.TVectorFloat_MakeUnit(self)

    def MulAdd(self, *args):
        """MulAdd(TVectorFloat self, TVectorFloat i, float a) -> TVectorFloat"""
        return _Ravl.TVectorFloat_MulAdd(self, *args)

    def MaxValueDistance(self, *args):
        """MaxValueDistance(TVectorFloat self, TVectorFloat i) -> float"""
        return _Ravl.TVectorFloat_MaxValueDistance(self, *args)

    def CityBlockDistance(self, *args):
        """CityBlockDistance(TVectorFloat self, TVectorFloat i) -> float"""
        return _Ravl.TVectorFloat_CityBlockDistance(self, *args)

    def SqrEuclidDistance(self, *args):
        """SqrEuclidDistance(TVectorFloat self, TVectorFloat i) -> float"""
        return _Ravl.TVectorFloat_SqrEuclidDistance(self, *args)

    def EuclidDistance(self, *args):
        """EuclidDistance(TVectorFloat self, TVectorFloat i) -> float"""
        return _Ravl.TVectorFloat_EuclidDistance(self, *args)

    def MaxIndex(self):
        """MaxIndex(TVectorFloat self) -> IndexC"""
        return _Ravl.TVectorFloat_MaxIndex(self)

    def MaxAbsIndex(self):
        """MaxAbsIndex(TVectorFloat self) -> IndexC"""
        return _Ravl.TVectorFloat_MaxAbsIndex(self)

    def MinIndex(self):
        """MinIndex(TVectorFloat self) -> IndexC"""
        return _Ravl.TVectorFloat_MinIndex(self)

    def MinAbsIndex(self):
        """MinAbsIndex(TVectorFloat self) -> IndexC"""
        return _Ravl.TVectorFloat_MinAbsIndex(self)

    def __str__(self):
        """__str__(TVectorFloat self) -> char const *"""
        return _Ravl.TVectorFloat___str__(self)

    def __init__(self): 
        """__init__(RavlN::TVectorC<(RavlN::FloatT)> self) -> TVectorFloat"""
        this = _Ravl.new_TVectorFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_TVectorFloat
    __del__ = lambda self : None;
TVectorFloat_swigregister = _Ravl.TVectorFloat_swigregister
TVectorFloat_swigregister(TVectorFloat)

class VectorC(TVectorReal):
    """Proxy of C++ RavlN::VectorC class"""
    __swig_setmethods__ = {}
    for _s in [TVectorReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorC, name, value)
    __swig_getmethods__ = {}
    for _s in [TVectorReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorC, name)
    __repr__ = _swig_repr
    def ConstructAligned(*args):
        """ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> VectorC"""
        return _Ravl.VectorC_ConstructAligned(*args)

    if _newclass:ConstructAligned = staticmethod(ConstructAligned)
    __swig_getmethods__["ConstructAligned"] = lambda x: ConstructAligned
    def __init__(self, *args): 
        """
        __init__(RavlN::VectorC self) -> VectorC
        __init__(RavlN::VectorC self, RavlN::SizeT size) -> VectorC
        __init__(RavlN::VectorC self, SArray1dReal oth) -> VectorC
        __init__(RavlN::VectorC self, TVectorReal oth) -> VectorC
        __init__(RavlN::VectorC self, SArray1dFloat oth) -> VectorC
        __init__(RavlN::VectorC self, RavlN::RealT v1, RavlN::RealT v2) -> VectorC
        __init__(RavlN::VectorC self, RavlN::RealT v1, RavlN::RealT v2, RavlN::RealT v3) -> VectorC
        __init__(RavlN::VectorC self, RavlN::RealT v1, RavlN::RealT v2, RavlN::RealT v3, RavlN::RealT v4) -> VectorC
        __init__(RavlN::VectorC self, RavlN::RealT v1, RavlN::RealT v2, RavlN::RealT v3, RavlN::RealT v4, RavlN::RealT v5) -> VectorC
        __init__(RavlN::VectorC self, RavlN::RealT v1, RavlN::RealT v2, RavlN::RealT v3, RavlN::RealT v4, RavlN::RealT v5, 
            RavlN::RealT v6) -> VectorC
        """
        this = _Ravl.new_VectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsReal(self):
        """IsReal(VectorC self) -> bool"""
        return _Ravl.VectorC_IsReal(self)

    def __mul__(self, *args):
        """
        __mul__(VectorC self, VectorC arr) -> VectorC
        __mul__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___mul__(self, *args)

    def __div__(self, *args):
        """
        __div__(VectorC self, VectorC arr) -> VectorC
        __div__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(VectorC self, VectorC arr) -> VectorC
        __add__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(VectorC self, VectorC arr) -> VectorC
        __sub__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(VectorC self, VectorC arr) -> VectorC
        __iadd__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(VectorC self, VectorC arr) -> VectorC
        __isub__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(VectorC self, VectorC arr) -> VectorC
        __imul__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(VectorC self, VectorC arr) -> VectorC
        __idiv__(VectorC self, RavlN::RealT const & number) -> VectorC
        """
        return _Ravl.VectorC___idiv__(self, *args)

    def Join(self, *args):
        """
        Join(VectorC self, VectorC Oth) -> VectorC
        Join(VectorC self, RavlN::RealT const & Oth) -> VectorC
        """
        return _Ravl.VectorC_Join(self, *args)

    def Append(self, *args):
        """
        Append(VectorC self, VectorC a) -> VectorC
        Append(VectorC self, RavlN::RealT const & a) -> VectorC
        """
        return _Ravl.VectorC_Append(self, *args)

    def From(self, *args):
        """
        From(VectorC self, RavlN::UIntT offset) -> VectorC
        From(VectorC self, RavlN::UIntT offset, RavlN::UIntT size) -> VectorC
        """
        return _Ravl.VectorC_From(self, *args)

    def After(self, *args):
        """After(VectorC self, RavlN::UIntT offset) -> VectorC"""
        return _Ravl.VectorC_After(self, *args)

    def Before(self, *args):
        """Before(VectorC self, RavlN::UIntT offset) -> VectorC"""
        return _Ravl.VectorC_Before(self, *args)

    def __eq__(self, *args):
        """__eq__(VectorC self, VectorC vv) -> bool"""
        return _Ravl.VectorC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(VectorC self, VectorC vv) -> bool"""
        return _Ravl.VectorC___ne__(self, *args)

    def Reciprocal(self):
        """Reciprocal(VectorC self) -> VectorC"""
        return _Ravl.VectorC_Reciprocal(self)

    def TMul(self, *args):
        """TMul(VectorC self, VectorC b) -> RavlN::RealT"""
        return _Ravl.VectorC_TMul(self, *args)

    def Dot(self, *args):
        """Dot(VectorC self, VectorC v) -> RavlN::RealT"""
        return _Ravl.VectorC_Dot(self, *args)

    def Dot2(self, *args):
        """Dot2(VectorC self, VectorC v1, VectorC v2) -> RavlN::RealT"""
        return _Ravl.VectorC_Dot2(self, *args)

    def ElemMul(self, *args):
        """ElemMul(VectorC self, VectorC v2, VectorC result)"""
        return _Ravl.VectorC_ElemMul(self, *args)

    def ElemSum(self, *args):
        """ElemSum(VectorC self, VectorC v2, VectorC result)"""
        return _Ravl.VectorC_ElemSum(self, *args)

    def ElemSubtract(self, *args):
        """ElemSubtract(VectorC self, VectorC v2, VectorC result)"""
        return _Ravl.VectorC_ElemSubtract(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(VectorC self, RavlN::RealT const & min) -> VectorC"""
        return _Ravl.VectorC_SetSmallToBeZero(self, *args)

    def OuterProduct(self, *args):
        """
        OuterProduct(VectorC self, VectorC a) -> MatrixC
        OuterProduct(VectorC self, VectorC a, RavlN::RealT b) -> MatrixC
        OuterProduct(VectorC self) -> MatrixC
        """
        return _Ravl.VectorC_OuterProduct(self, *args)

    def Unit(self):
        """Unit(VectorC self) -> VectorC"""
        return _Ravl.VectorC_Unit(self)

    def MakeUnit(self):
        """MakeUnit(VectorC self) -> VectorC"""
        return _Ravl.VectorC_MakeUnit(self)

    def MulAdd(self, *args):
        """MulAdd(VectorC self, VectorC i, RavlN::RealT a) -> VectorC"""
        return _Ravl.VectorC_MulAdd(self, *args)

    def MaxValueDistance(self, *args):
        """MaxValueDistance(VectorC self, VectorC i) -> RavlN::RealT"""
        return _Ravl.VectorC_MaxValueDistance(self, *args)

    def CityBlockDistance(self, *args):
        """CityBlockDistance(VectorC self, VectorC i) -> RavlN::RealT"""
        return _Ravl.VectorC_CityBlockDistance(self, *args)

    def SqrEuclidDistance(self, *args):
        """SqrEuclidDistance(VectorC self, VectorC i) -> RavlN::RealT"""
        return _Ravl.VectorC_SqrEuclidDistance(self, *args)

    def EuclidDistance(self, *args):
        """EuclidDistance(VectorC self, VectorC i) -> RavlN::RealT"""
        return _Ravl.VectorC_EuclidDistance(self, *args)

    __swig_destroy__ = _Ravl.delete_VectorC
    __del__ = lambda self : None;
VectorC_swigregister = _Ravl.VectorC_swigregister
VectorC_swigregister(VectorC)

def VectorC_ConstructAligned(*args):
  """VectorC_ConstructAligned(RavlN::SizeT const dim, RavlN::UIntT align) -> VectorC"""
  return _Ravl.VectorC_ConstructAligned(*args)


def RandomVector(*args):
  """
    RandomVector(int n, RavlN::RealT scale=1.0) -> VectorC
    RandomVector(int n) -> VectorC
    """
  return _Ravl.RandomVector(*args)

def SetZero(*args):
  """SetZero(VectorC vec)"""
  return _Ravl.SetZero(*args)

def Sigmoid(*args):
  """Sigmoid(VectorC z) -> VectorC"""
  return _Ravl.Sigmoid(*args)

def SigmoidIP(*args):
  """SigmoidIP(VectorC z)"""
  return _Ravl.SigmoidIP(*args)

def Log(*args):
  """Log(VectorC z) -> VectorC"""
  return _Ravl.Log(*args)

def LogIP(*args):
  """LogIP(VectorC z)"""
  return _Ravl.LogIP(*args)

def Exp(*args):
  """Exp(VectorC z) -> VectorC"""
  return _Ravl.Exp(*args)
class TMatrixReal(SArray2dReal):
    """Proxy of C++ RavlN::TMatrixC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray2dReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMatrixReal, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray2dReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMatrixReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, SArray2dReal oth) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, TVectorReal vec) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols, double const * data) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols, double * data, bool useCopy, bool manageMemory=False) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols, double * data, bool useCopy) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols, double const & data) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols, SArray1dReal data, RavlN::SizeT stride=0) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, RavlN::SizeT rows, RavlN::SizeT cols, SArray1dReal data) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, double v1, double v2, double v3, double v4) -> TMatrixReal
        __init__(RavlN::TMatrixC<(RavlN::RealT)> self, double v1, double v2, double v3, double v4, double v5, double v6, double v7, double v8, 
            double v9) -> TMatrixReal
        """
        this = _Ravl.new_TMatrixReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(TMatrixReal self) -> RavlN::SizeT"""
        return _Ravl.TMatrixReal_Rows(self)

    def Cols(self):
        """Cols(TMatrixReal self) -> RavlN::SizeT"""
        return _Ravl.TMatrixReal_Cols(self)

    def __mul__(self, *args):
        """
        __mul__(TMatrixReal self, double val) -> TMatrixReal
        __mul__(TMatrixReal self, TVectorReal vector) -> TVectorReal
        __mul__(TMatrixReal self, TMatrixReal mat) -> TMatrixReal
        """
        return _Ravl.TMatrixReal___mul__(self, *args)

    def MulT(self, *args):
        """MulT(TMatrixReal self, TMatrixReal B) -> TMatrixReal"""
        return _Ravl.TMatrixReal_MulT(self, *args)

    def TMul(self, *args):
        """
        TMul(TMatrixReal self, TMatrixReal B) -> TMatrixReal
        TMul(TMatrixReal self, TVectorReal vec) -> TVectorReal
        """
        return _Ravl.TMatrixReal_TMul(self, *args)

    def AAT(self):
        """AAT(TMatrixReal self) -> TMatrixReal"""
        return _Ravl.TMatrixReal_AAT(self)

    def ATA(self):
        """ATA(TMatrixReal self) -> TMatrixReal"""
        return _Ravl.TMatrixReal_ATA(self)

    def T(self):
        """T(TMatrixReal self) -> TMatrixReal"""
        return _Ravl.TMatrixReal_T(self)

    def Identity(*args):
        """Identity(RavlN::UIntT n) -> TMatrixReal"""
        return _Ravl.TMatrixReal_Identity(*args)

    if _newclass:Identity = staticmethod(Identity)
    __swig_getmethods__["Identity"] = lambda x: Identity
    def SetDiagonal(self, *args):
        """SetDiagonal(TMatrixReal self, TVectorReal d) -> TMatrixReal"""
        return _Ravl.TMatrixReal_SetDiagonal(self, *args)

    def AddDiagonal(self, *args):
        """AddDiagonal(TMatrixReal self, TVectorReal d) -> TMatrixReal"""
        return _Ravl.TMatrixReal_AddDiagonal(self, *args)

    def SubMatrix(self, *args):
        """SubMatrix(TMatrixReal self, RavlN::SizeT size1, RavlN::SizeT size2) -> TMatrixReal"""
        return _Ravl.TMatrixReal_SubMatrix(self, *args)

    def SumOfAbs(self):
        """SumOfAbs(TMatrixReal self) -> double"""
        return _Ravl.TMatrixReal_SumOfAbs(self)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(TMatrixReal self, TVectorReal vec1, TVectorReal vec2) -> TMatrixReal
        AddOuterProduct(TMatrixReal self, TVectorReal vec1, TVectorReal vec2, double const & a) -> TMatrixReal
        """
        return _Ravl.TMatrixReal_AddOuterProduct(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(TMatrixReal self, double const & min) -> TMatrixReal"""
        return _Ravl.TMatrixReal_SetSmallToBeZero(self, *args)

    def MulAdd(self, *args):
        """MulAdd(TMatrixReal self, TMatrixReal i, double a) -> TMatrixReal"""
        return _Ravl.TMatrixReal_MulAdd(self, *args)

    def SwapRows(self, *args):
        """SwapRows(TMatrixReal self, int i, int j)"""
        return _Ravl.TMatrixReal_SwapRows(self, *args)

    __swig_destroy__ = _Ravl.delete_TMatrixReal
    __del__ = lambda self : None;
TMatrixReal_swigregister = _Ravl.TMatrixReal_swigregister
TMatrixReal_swigregister(TMatrixReal)

def TMatrixReal_Identity(*args):
  """TMatrixReal_Identity(RavlN::UIntT n) -> TMatrixReal"""
  return _Ravl.TMatrixReal_Identity(*args)

class TMatrixFloat(SArray2dFloat):
    """Proxy of C++ RavlN::TMatrixC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    for _s in [SArray2dFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMatrixFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [SArray2dFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMatrixFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, SArray2dFloat oth) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, TVectorFloat vec) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols, float const * data) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols, float * data, bool useCopy, bool manageMemory=False) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols, float * data, bool useCopy) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols, float const & data) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols, SArray1dFloat data, RavlN::SizeT stride=0) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, RavlN::SizeT rows, RavlN::SizeT cols, SArray1dFloat data) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, float v1, float v2, float v3, float v4) -> TMatrixFloat
        __init__(RavlN::TMatrixC<(RavlN::FloatT)> self, float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, float v9) -> TMatrixFloat
        """
        this = _Ravl.new_TMatrixFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(TMatrixFloat self) -> RavlN::SizeT"""
        return _Ravl.TMatrixFloat_Rows(self)

    def Cols(self):
        """Cols(TMatrixFloat self) -> RavlN::SizeT"""
        return _Ravl.TMatrixFloat_Cols(self)

    def __mul__(self, *args):
        """
        __mul__(TMatrixFloat self, float val) -> TMatrixFloat
        __mul__(TMatrixFloat self, TVectorFloat vector) -> TVectorFloat
        __mul__(TMatrixFloat self, TMatrixFloat mat) -> TMatrixFloat
        """
        return _Ravl.TMatrixFloat___mul__(self, *args)

    def MulT(self, *args):
        """MulT(TMatrixFloat self, TMatrixFloat B) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_MulT(self, *args)

    def TMul(self, *args):
        """
        TMul(TMatrixFloat self, TMatrixFloat B) -> TMatrixFloat
        TMul(TMatrixFloat self, TVectorFloat vec) -> TVectorFloat
        """
        return _Ravl.TMatrixFloat_TMul(self, *args)

    def AAT(self):
        """AAT(TMatrixFloat self) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_AAT(self)

    def ATA(self):
        """ATA(TMatrixFloat self) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_ATA(self)

    def T(self):
        """T(TMatrixFloat self) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_T(self)

    def Identity(*args):
        """Identity(RavlN::UIntT n) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_Identity(*args)

    if _newclass:Identity = staticmethod(Identity)
    __swig_getmethods__["Identity"] = lambda x: Identity
    def SetDiagonal(self, *args):
        """SetDiagonal(TMatrixFloat self, TVectorFloat d) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_SetDiagonal(self, *args)

    def AddDiagonal(self, *args):
        """AddDiagonal(TMatrixFloat self, TVectorFloat d) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_AddDiagonal(self, *args)

    def SubMatrix(self, *args):
        """SubMatrix(TMatrixFloat self, RavlN::SizeT size1, RavlN::SizeT size2) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_SubMatrix(self, *args)

    def SumOfAbs(self):
        """SumOfAbs(TMatrixFloat self) -> float"""
        return _Ravl.TMatrixFloat_SumOfAbs(self)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(TMatrixFloat self, TVectorFloat vec1, TVectorFloat vec2) -> TMatrixFloat
        AddOuterProduct(TMatrixFloat self, TVectorFloat vec1, TVectorFloat vec2, float const & a) -> TMatrixFloat
        """
        return _Ravl.TMatrixFloat_AddOuterProduct(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(TMatrixFloat self, float const & min) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_SetSmallToBeZero(self, *args)

    def MulAdd(self, *args):
        """MulAdd(TMatrixFloat self, TMatrixFloat i, float a) -> TMatrixFloat"""
        return _Ravl.TMatrixFloat_MulAdd(self, *args)

    def SwapRows(self, *args):
        """SwapRows(TMatrixFloat self, int i, int j)"""
        return _Ravl.TMatrixFloat_SwapRows(self, *args)

    __swig_destroy__ = _Ravl.delete_TMatrixFloat
    __del__ = lambda self : None;
TMatrixFloat_swigregister = _Ravl.TMatrixFloat_swigregister
TMatrixFloat_swigregister(TMatrixFloat)

def TMatrixFloat_Identity(*args):
  """TMatrixFloat_Identity(RavlN::UIntT n) -> TMatrixFloat"""
  return _Ravl.TMatrixFloat_Identity(*args)

class MatrixC(TMatrixReal):
    """Proxy of C++ RavlN::MatrixC class"""
    __swig_setmethods__ = {}
    for _s in [TMatrixReal]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixC, name, value)
    __swig_getmethods__ = {}
    for _s in [TMatrixReal]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixC, name)
    __repr__ = _swig_repr
    def IsReal(self):
        """IsReal(MatrixC self) -> bool"""
        return _Ravl.MatrixC_IsReal(self)

    def __init__(self, *args): 
        """
        __init__(RavlN::MatrixC self) -> MatrixC
        __init__(RavlN::MatrixC self, VectorC vec) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::UIntT rows, RavlN::UIntT cols) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::UIntT rows, RavlN::UIntT cols, RavlN::RealT const * data) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::UIntT rows, RavlN::UIntT cols, RavlN::RealT const & data) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::UIntT rows, RavlN::UIntT cols, VectorC data) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::SizeT rows, RavlN::SizeT cols, VectorC data) -> MatrixC
        __init__(RavlN::MatrixC self, TMatrixReal oth) -> MatrixC
        __init__(RavlN::MatrixC self, SArray2dReal oth) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::RealT v1, RavlN::RealT v2, RavlN::RealT v3, RavlN::RealT v4) -> MatrixC
        __init__(RavlN::MatrixC self, RavlN::RealT v1, RavlN::RealT v2, RavlN::RealT v3, RavlN::RealT v4, RavlN::RealT v5, 
            RavlN::RealT v6, RavlN::RealT v7, RavlN::RealT v8, RavlN::RealT v9) -> MatrixC
        __init__(RavlN::MatrixC self, SArray2dFloat oth) -> MatrixC
        """
        this = _Ravl.new_MatrixC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Inverse(self):
        """Inverse(MatrixC self) -> MatrixC"""
        return _Ravl.MatrixC_Inverse(self)

    def InverseIP(self, *args):
        """
        InverseIP(MatrixC self, RavlN::RealT & det) -> bool
        InverseIP(MatrixC self) -> bool
        """
        return _Ravl.MatrixC_InverseIP(self, *args)

    def PseudoInverse(self, thresh=1e-5):
        """
        PseudoInverse(MatrixC self, RavlN::RealT thresh=1e-5) -> MatrixC
        PseudoInverse(MatrixC self) -> MatrixC
        """
        return _Ravl.MatrixC_PseudoInverse(self, thresh)

    def Det(self):
        """Det(MatrixC self) -> RavlN::RealT"""
        return _Ravl.MatrixC_Det(self)

    def NormaliseRows(self):
        """NormaliseRows(MatrixC self)"""
        return _Ravl.MatrixC_NormaliseRows(self)

    def NormaliseColumns(self):
        """NormaliseColumns(MatrixC self)"""
        return _Ravl.MatrixC_NormaliseColumns(self)

    def AsVector(self, alwaysCopy=False):
        """
        AsVector(MatrixC self, bool alwaysCopy=False) -> VectorC
        AsVector(MatrixC self) -> VectorC
        """
        return _Ravl.MatrixC_AsVector(self, alwaysCopy)

    def __div__(self, *args):
        """
        __div__(MatrixC self, MatrixC arr) -> MatrixC
        __div__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(MatrixC self, MatrixC arr) -> MatrixC
        __add__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(MatrixC self, MatrixC arr) -> MatrixC
        __sub__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(MatrixC self, MatrixC arr) -> MatrixC
        __iadd__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(MatrixC self, MatrixC arr) -> MatrixC
        __isub__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(MatrixC self, MatrixC arr) -> MatrixC
        __imul__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(MatrixC self, MatrixC arr) -> MatrixC
        __idiv__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        """
        return _Ravl.MatrixC___idiv__(self, *args)

    def __eq__(self, *args):
        """__eq__(MatrixC self, MatrixC op) -> bool"""
        return _Ravl.MatrixC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MatrixC self, MatrixC op) -> bool"""
        return _Ravl.MatrixC___ne__(self, *args)

    def SumOfSqr(self):
        """SumOfSqr(MatrixC self) -> RavlN::RealT"""
        return _Ravl.MatrixC_SumOfSqr(self)

    def Sum(self):
        """Sum(MatrixC self) -> RavlN::RealT"""
        return _Ravl.MatrixC_Sum(self)

    def SliceRow(self, *args):
        """SliceRow(MatrixC self, IndexC i) -> VectorC"""
        return _Ravl.MatrixC_SliceRow(self, *args)

    def SetColumn(self, *args):
        """
        SetColumn(MatrixC self, IndexC i, VectorC val)
        SetColumn(MatrixC self, IndexC i, RavlN::RealT const & val)
        """
        return _Ravl.MatrixC_SetColumn(self, *args)

    def SetRow(self, *args):
        """
        SetRow(MatrixC self, IndexC i, VectorC val)
        SetRow(MatrixC self, IndexC i, RavlN::RealT const & val)
        """
        return _Ravl.MatrixC_SetRow(self, *args)

    def SetSubArray(self, *args):
        """SetSubArray(MatrixC self, Index2dC origin, MatrixC vals)"""
        return _Ravl.MatrixC_SetSubArray(self, *args)

    def Hash(self):
        """Hash(MatrixC self) -> RavlN::SizeT"""
        return _Ravl.MatrixC_Hash(self)

    def __mul__(self, *args):
        """
        __mul__(MatrixC self, MatrixC arr) -> MatrixC
        __mul__(MatrixC self, RavlN::RealT const & number) -> MatrixC
        __mul__(MatrixC self, VectorC vector) -> VectorC
        """
        return _Ravl.MatrixC___mul__(self, *args)

    def MulT(self, *args):
        """MulT(MatrixC self, MatrixC B) -> MatrixC"""
        return _Ravl.MatrixC_MulT(self, *args)

    def TMul(self, *args):
        """
        TMul(MatrixC self, MatrixC B) -> MatrixC
        TMul(MatrixC self, VectorC vec) -> VectorC
        """
        return _Ravl.MatrixC_TMul(self, *args)

    def AAT(self):
        """AAT(MatrixC self) -> MatrixC"""
        return _Ravl.MatrixC_AAT(self)

    def ATA(self):
        """ATA(MatrixC self) -> MatrixC"""
        return _Ravl.MatrixC_ATA(self)

    def T(self):
        """T(MatrixC self) -> MatrixC"""
        return _Ravl.MatrixC_T(self)

    def Identity(*args):
        """Identity(RavlN::UIntT n) -> MatrixC"""
        return _Ravl.MatrixC_Identity(*args)

    if _newclass:Identity = staticmethod(Identity)
    __swig_getmethods__["Identity"] = lambda x: Identity
    def SetDiagonal(self, *args):
        """SetDiagonal(MatrixC self, VectorC d) -> MatrixC"""
        return _Ravl.MatrixC_SetDiagonal(self, *args)

    def AddDiagonal(self, *args):
        """AddDiagonal(MatrixC self, VectorC d) -> MatrixC"""
        return _Ravl.MatrixC_AddDiagonal(self, *args)

    def SubMatrix(self, *args):
        """SubMatrix(MatrixC self, RavlN::SizeT size1, RavlN::SizeT size2) -> MatrixC"""
        return _Ravl.MatrixC_SubMatrix(self, *args)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(MatrixC self, TVectorFloat vec1, TVectorFloat vec2) -> TMatrixReal
        AddOuterProduct(MatrixC self, TVectorFloat vec1, TVectorFloat vec2, float const & a) -> TMatrixReal
        AddOuterProduct(MatrixC self, VectorC vec1, VectorC vec2) -> MatrixC
        AddOuterProduct(MatrixC self, VectorC vec1, VectorC vec2, RavlN::RealT const & a) -> MatrixC
        """
        return _Ravl.MatrixC_AddOuterProduct(self, *args)

    def SetSmallToBeZero(self, *args):
        """SetSmallToBeZero(MatrixC self, RavlN::RealT const & min) -> MatrixC"""
        return _Ravl.MatrixC_SetSmallToBeZero(self, *args)

    def MulAdd(self, *args):
        """MulAdd(MatrixC self, MatrixC i, RavlN::RealT a) -> MatrixC"""
        return _Ravl.MatrixC_MulAdd(self, *args)

    __swig_destroy__ = _Ravl.delete_MatrixC
    __del__ = lambda self : None;
MatrixC_swigregister = _Ravl.MatrixC_swigregister
MatrixC_swigregister(MatrixC)

def MatrixC_Identity(*args):
  """MatrixC_Identity(RavlN::UIntT n) -> MatrixC"""
  return _Ravl.MatrixC_Identity(*args)


def SVD(*args):
  """
    SVD(MatrixC M) -> VectorC
    SVD(MatrixC M, MatrixC u, MatrixC v) -> VectorC
    """
  return _Ravl.SVD(*args)

def SVD_IP(*args):
  """
    SVD_IP(MatrixC M) -> VectorC
    SVD_IP(MatrixC M, MatrixC u, MatrixC v) -> VectorC
    """
  return _Ravl.SVD_IP(*args)

def EigenValues(*args):
  """EigenValues(MatrixC M) -> VectorC"""
  return _Ravl.EigenValues(*args)

def EigenValuesIP(*args):
  """EigenValuesIP(MatrixC M) -> VectorC"""
  return _Ravl.EigenValuesIP(*args)

def FastEigenValues(*args):
  """FastEigenValues(MatrixC M) -> VectorC"""
  return _Ravl.FastEigenValues(*args)

def EigenVectors(*args):
  """EigenVectors(MatrixC M, MatrixC E) -> VectorC"""
  return _Ravl.EigenVectors(*args)

def EigenVectorsIP(*args):
  """EigenVectorsIP(MatrixC M) -> VectorC"""
  return _Ravl.EigenVectorsIP(*args)

def FastEigenVectors(*args):
  """FastEigenVectors(MatrixC M) -> VectorC"""
  return _Ravl.FastEigenVectors(*args)

def MaxEigenValue(*args):
  """MaxEigenValue(MatrixC M, VectorC maxv) -> RavlN::RealT"""
  return _Ravl.MaxEigenValue(*args)

def RandomMatrix(*args):
  """
    RandomMatrix(int n, int m, RavlN::RealT scale=1) -> MatrixC
    RandomMatrix(int n, int m) -> MatrixC
    """
  return _Ravl.RandomMatrix(*args)

def RandomSymmetricMatrix(*args):
  """
    RandomSymmetricMatrix(int n, RavlN::RealT scale=1) -> MatrixC
    RandomSymmetricMatrix(int n) -> MatrixC
    """
  return _Ravl.RandomSymmetricMatrix(*args)

def RandomPositiveDefiniteMatrix(*args):
  """RandomPositiveDefiniteMatrix(int n) -> MatrixC"""
  return _Ravl.RandomPositiveDefiniteMatrix(*args)
class MatrixRUTC(MatrixC):
    """Proxy of C++ RavlN::MatrixRUTC class"""
    __swig_setmethods__ = {}
    for _s in [MatrixC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixRUTC, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixRUTC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::MatrixRUTC self) -> MatrixRUTC
        __init__(RavlN::MatrixRUTC self, RavlN::SizeT size) -> MatrixRUTC
        __init__(RavlN::MatrixRUTC self, MatrixC oth) -> MatrixRUTC
        __init__(RavlN::MatrixRUTC self, SArray2dReal oth) -> MatrixRUTC
        """
        this = _Ravl.new_MatrixRUTC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Inverse(self):
        """Inverse(MatrixRUTC self) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC_Inverse(self)

    def InverseIP(self):
        """InverseIP(MatrixRUTC self) -> bool"""
        return _Ravl.MatrixRUTC_InverseIP(self)

    def AddOuterProduct(self, *args):
        """
        AddOuterProduct(MatrixRUTC self, VectorC vec)
        AddOuterProduct(MatrixRUTC self, VectorC vec, RavlN::RealT a)
        """
        return _Ravl.MatrixRUTC_AddOuterProduct(self, *args)

    def SubtractOuterProduct(self, *args):
        """
        SubtractOuterProduct(MatrixRUTC self, VectorC vec)
        SubtractOuterProduct(MatrixRUTC self, VectorC vec, RavlN::RealT a)
        """
        return _Ravl.MatrixRUTC_SubtractOuterProduct(self, *args)

    def __iadd__(self, *args):
        """__iadd__(MatrixRUTC self, MatrixRUTC mat) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(MatrixRUTC self, MatrixRUTC mat) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___isub__(self, *args)

    def __imul__(self, *args):
        """__imul__(MatrixRUTC self, RavlN::RealT val) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(MatrixRUTC self, RavlN::RealT val) -> MatrixRUTC"""
        return _Ravl.MatrixRUTC___idiv__(self, *args)

    def ZeroLowerLeft(self):
        """ZeroLowerLeft(MatrixRUTC self)"""
        return _Ravl.MatrixRUTC_ZeroLowerLeft(self)

    def MakeSymmetric(self):
        """MakeSymmetric(MatrixRUTC self)"""
        return _Ravl.MatrixRUTC_MakeSymmetric(self)

    def Det(self):
        """Det(MatrixRUTC self) -> RavlN::RealT"""
        return _Ravl.MatrixRUTC_Det(self)

    __swig_destroy__ = _Ravl.delete_MatrixRUTC
    __del__ = lambda self : None;
MatrixRUTC_swigregister = _Ravl.MatrixRUTC_swigregister
MatrixRUTC_swigregister(MatrixRUTC)


def OuterProductRUT(*args):
  """
    OuterProductRUT(VectorC vec) -> MatrixRUTC
    OuterProductRUT(VectorC vec, RavlN::RealT a) -> MatrixRUTC
    """
  return _Ravl.OuterProductRUT(*args)

def SolveIP(*args):
  """
    SolveIP(MatrixC A, VectorC b) -> bool
    SolveIP(MatrixC A, MatrixC B) -> bool
    SolveIP(MatrixRUTC A, VectorC b) -> bool
    """
  return _Ravl.SolveIP(*args)

def Solve(*args):
  """
    Solve(MatrixC A, VectorC b) -> VectorC
    Solve(MatrixC A, MatrixC B) -> MatrixC
    Solve(MatrixRUTC A, VectorC b) -> VectorC
    """
  return _Ravl.Solve(*args)
class VectorMatrixC(_object):
    """Proxy of C++ RavlN::VectorMatrixC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMatrixC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMatrixC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::VectorMatrixC self) -> VectorMatrixC
        __init__(RavlN::VectorMatrixC self, RavlN::UIntT const dim) -> VectorMatrixC
        __init__(RavlN::VectorMatrixC self, VectorC vec, MatrixC mat) -> VectorMatrixC
        __init__(RavlN::VectorMatrixC self, VectorMatrixC vm) -> VectorMatrixC
        """
        this = _Ravl.new_VectorMatrixC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Vector(self, *args):
        """
        Vector(VectorMatrixC self) -> VectorC
        Vector(VectorMatrixC self) -> VectorC
        """
        return _Ravl.VectorMatrixC_Vector(self, *args)

    def Matrix(self, *args):
        """
        Matrix(VectorMatrixC self) -> MatrixC
        Matrix(VectorMatrixC self) -> MatrixC
        """
        return _Ravl.VectorMatrixC_Matrix(self, *args)

    def Copy(self):
        """Copy(VectorMatrixC self) -> VectorMatrixC"""
        return _Ravl.VectorMatrixC_Copy(self)

    def SetZero(self):
        """SetZero(VectorMatrixC self)"""
        return _Ravl.VectorMatrixC_SetZero(self)

    def Sort(self):
        """Sort(VectorMatrixC self)"""
        return _Ravl.VectorMatrixC_Sort(self)

    def __str__(self):
        """__str__(VectorMatrixC self) -> char const *"""
        return _Ravl.VectorMatrixC___str__(self)

    __swig_destroy__ = _Ravl.delete_VectorMatrixC
    __del__ = lambda self : None;
VectorMatrixC_swigregister = _Ravl.VectorMatrixC_swigregister
VectorMatrixC_swigregister(VectorMatrixC)

class MeanCovarianceC(_object):
    """Proxy of C++ RavlN::MeanCovarianceC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeanCovarianceC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeanCovarianceC, name)
    __repr__ = _swig_repr
    def Copy(self):
        """Copy(MeanCovarianceC self) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_Copy(self)

    def __init__(self, *args): 
        """
        __init__(RavlN::MeanCovarianceC self) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, MeanCovarianceC meanCov) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, RavlN::SizeT const n) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, unsigned int const n) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, VectorC point) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, RavlN::RealT n, VectorC mean, MatrixC ncov) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, SArray1dVectorC data, bool sampleStatistics=True) -> MeanCovarianceC
        __init__(RavlN::MeanCovarianceC self, SArray1dVectorC data) -> MeanCovarianceC
        """
        this = _Ravl.new_MeanCovarianceC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Number(self):
        """Number(MeanCovarianceC self) -> RavlN::RealT"""
        return _Ravl.MeanCovarianceC_Number(self)

    def Mean(self, *args):
        """
        Mean(MeanCovarianceC self) -> VectorC
        Mean(MeanCovarianceC self) -> VectorC
        """
        return _Ravl.MeanCovarianceC_Mean(self, *args)

    def Covariance(self, *args):
        """
        Covariance(MeanCovarianceC self) -> MatrixC
        Covariance(MeanCovarianceC self) -> MatrixC
        """
        return _Ravl.MeanCovarianceC_Covariance(self, *args)

    def SetZero(self):
        """SetZero(MeanCovarianceC self) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_SetZero(self)

    def __iadd__(self, *args):
        """
        __iadd__(MeanCovarianceC self, VectorC point) -> MeanCovarianceC
        __iadd__(MeanCovarianceC self, MeanCovarianceC meanCov) -> MeanCovarianceC
        """
        return _Ravl.MeanCovarianceC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(MeanCovarianceC self, VectorC point) -> MeanCovarianceC
        __isub__(MeanCovarianceC self, MeanCovarianceC meanCov) -> MeanCovarianceC
        """
        return _Ravl.MeanCovarianceC___isub__(self, *args)

    def Add(self, *args):
        """Add(MeanCovarianceC self, VectorC point, VectorC var) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_Add(self, *args)

    def Remove(self, *args):
        """Remove(MeanCovarianceC self, VectorC point, VectorC var) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_Remove(self, *args)

    def SetSum(self, *args):
        """SetSum(MeanCovarianceC self, MeanCovarianceC meanCov1, MeanCovarianceC meanCov2) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC_SetSum(self, *args)

    def __mul__(self, *args):
        """__mul__(MeanCovarianceC self, MeanCovarianceC oth) -> MeanCovarianceC"""
        return _Ravl.MeanCovarianceC___mul__(self, *args)

    def Gauss(self, *args):
        """Gauss(MeanCovarianceC self, VectorC vec) -> RavlN::RealT"""
        return _Ravl.MeanCovarianceC_Gauss(self, *args)

    def MahalanobisDistance(self, *args):
        """MahalanobisDistance(MeanCovarianceC self, VectorC vec) -> RavlN::RealT"""
        return _Ravl.MeanCovarianceC_MahalanobisDistance(self, *args)

    def ClearCache(self):
        """ClearCache(MeanCovarianceC self)"""
        return _Ravl.MeanCovarianceC_ClearCache(self)

    def Hash(self):
        """Hash(MeanCovarianceC self) -> RavlN::UIntT"""
        return _Ravl.MeanCovarianceC_Hash(self)

    def __str__(self):
        """__str__(MeanCovarianceC self) -> char const *"""
        return _Ravl.MeanCovarianceC___str__(self)

    __swig_destroy__ = _Ravl.delete_MeanCovarianceC
    __del__ = lambda self : None;
MeanCovarianceC_swigregister = _Ravl.MeanCovarianceC_swigregister
MeanCovarianceC_swigregister(MeanCovarianceC)

class Affine2dC(_object):
    """Proxy of C++ RavlN::Affine2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affine2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affine2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::Affine2dC self) -> Affine2dC"""
        this = _Ravl.new_Affine2dC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_Affine2dC
    __del__ = lambda self : None;
Affine2dC_swigregister = _Ravl.Affine2dC_swigregister
Affine2dC_swigregister(Affine2dC)

class DateC(_object):
    """Proxy of C++ RavlN::DateC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateC, name)
    __repr__ = _swig_repr
    def NowUTC():
        """NowUTC() -> DateC"""
        return _Ravl.DateC_NowUTC()

    if _newclass:NowUTC = staticmethod(NowUTC)
    __swig_getmethods__["NowUTC"] = lambda x: NowUTC
    def NowLocal():
        """NowLocal() -> DateC"""
        return _Ravl.DateC_NowLocal()

    if _newclass:NowLocal = staticmethod(NowLocal)
    __swig_getmethods__["NowLocal"] = lambda x: NowLocal
    def NowVirtual():
        """NowVirtual() -> DateC"""
        return _Ravl.DateC_NowVirtual()

    if _newclass:NowVirtual = staticmethod(NowVirtual)
    __swig_getmethods__["NowVirtual"] = lambda x: NowVirtual
    def TimeZoneOffset():
        """TimeZoneOffset() -> DateC"""
        return _Ravl.DateC_TimeZoneOffset()

    if _newclass:TimeZoneOffset = staticmethod(TimeZoneOffset)
    __swig_getmethods__["TimeZoneOffset"] = lambda x: TimeZoneOffset
    def __init__(self, *args): 
        """
        __init__(RavlN::DateC self) -> DateC
        __init__(RavlN::DateC self, bool setval, bool useVirt=False) -> DateC
        __init__(RavlN::DateC self, bool setval) -> DateC
        __init__(RavlN::DateC self, RavlN::RealT val) -> DateC
        __init__(RavlN::DateC self, RavlN::IntT year, RavlN::IntT month, RavlN::IntT day, RavlN::IntT hour=0, RavlN::IntT min=0, 
            RavlN::IntT sec=0, RavlN::IntT usec=0, bool useLocalTimeZone=False) -> DateC
        __init__(RavlN::DateC self, RavlN::IntT year, RavlN::IntT month, RavlN::IntT day, RavlN::IntT hour=0, RavlN::IntT min=0, 
            RavlN::IntT sec=0, RavlN::IntT usec=0) -> DateC
        __init__(RavlN::DateC self, RavlN::IntT year, RavlN::IntT month, RavlN::IntT day, RavlN::IntT hour=0, RavlN::IntT min=0, 
            RavlN::IntT sec=0) -> DateC
        __init__(RavlN::DateC self, RavlN::IntT year, RavlN::IntT month, RavlN::IntT day, RavlN::IntT hour=0, RavlN::IntT min=0) -> DateC
        __init__(RavlN::DateC self, RavlN::IntT year, RavlN::IntT month, RavlN::IntT day, RavlN::IntT hour=0) -> DateC
        __init__(RavlN::DateC self, RavlN::IntT year, RavlN::IntT month, RavlN::IntT day) -> DateC
        __init__(RavlN::DateC self, long xsec, long xusec) -> DateC
        __init__(RavlN::DateC self, DateC val) -> DateC
        __init__(RavlN::DateC self, StringC str) -> DateC
        """
        this = _Ravl.new_DateC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsLeapYear(*args):
        """IsLeapYear(int year) -> bool"""
        return _Ravl.DateC_IsLeapYear(*args)

    if _newclass:IsLeapYear = staticmethod(IsLeapYear)
    __swig_getmethods__["IsLeapYear"] = lambda x: IsLeapYear
    def YearToDaysSince1970(*args):
        """YearToDaysSince1970(int year) -> int"""
        return _Ravl.DateC_YearToDaysSince1970(*args)

    if _newclass:YearToDaysSince1970 = staticmethod(YearToDaysSince1970)
    __swig_getmethods__["YearToDaysSince1970"] = lambda x: YearToDaysSince1970
    def IsValid(self):
        """IsValid(DateC self) -> bool"""
        return _Ravl.DateC_IsValid(self)

    def IsZero(self):
        """IsZero(DateC self) -> bool"""
        return _Ravl.DateC_IsZero(self)

    def SetInvalid(self):
        """SetInvalid(DateC self)"""
        return _Ravl.DateC_SetInvalid(self)

    def SetToNow(self, useVirt=False):
        """
        SetToNow(DateC self, bool useVirt=False)
        SetToNow(DateC self)
        """
        return _Ravl.DateC_SetToNow(self, useVirt)

    def MaxUSeconds(self):
        """MaxUSeconds(DateC self) -> long"""
        return _Ravl.DateC_MaxUSeconds(self)

    def Resolution(self):
        """Resolution(DateC self) -> long"""
        return _Ravl.DateC_Resolution(self)

    def NormalisePos(self):
        """NormalisePos(DateC self)"""
        return _Ravl.DateC_NormalisePos(self)

    def NormaliseNeg(self):
        """NormaliseNeg(DateC self)"""
        return _Ravl.DateC_NormaliseNeg(self)

    def __eq__(self, *args):
        """__eq__(DateC self, DateC oth) -> bool"""
        return _Ravl.DateC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DateC self, DateC oth) -> bool"""
        return _Ravl.DateC___ne__(self, *args)

    def __gt__(self, *args):
        """__gt__(DateC self, DateC oth) -> bool"""
        return _Ravl.DateC___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(DateC self, DateC oth) -> bool"""
        return _Ravl.DateC___lt__(self, *args)

    def __ge__(self, *args):
        """__ge__(DateC self, DateC oth) -> bool"""
        return _Ravl.DateC___ge__(self, *args)

    def __le__(self, *args):
        """__le__(DateC self, DateC oth) -> bool"""
        return _Ravl.DateC___le__(self, *args)

    def __add__(self, *args):
        """__add__(DateC self, DateC oth) -> DateC"""
        return _Ravl.DateC___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(DateC self, DateC oth) -> DateC"""
        return _Ravl.DateC___sub__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(DateC self, DateC val) -> DateC
        __isub__(DateC self, double val) -> DateC
        """
        return _Ravl.DateC___isub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(DateC self, DateC val) -> DateC
        __iadd__(DateC self, double val) -> DateC
        """
        return _Ravl.DateC___iadd__(self, *args)

    def Text(self):
        """Text(DateC self) -> StringC"""
        return _Ravl.DateC_Text(self)

    def ODBC(self, convertUTCToLocal=False):
        """
        ODBC(DateC self, bool convertUTCToLocal=False) -> StringC
        ODBC(DateC self) -> StringC
        """
        return _Ravl.DateC_ODBC(self, convertUTCToLocal)

    def SetODBC(self, *args):
        """SetODBC(DateC self, StringC odbcStr) -> bool"""
        return _Ravl.DateC_SetODBC(self, *args)

    def CTime(self, convertUTCToLocal=False):
        """
        CTime(DateC self, bool convertUTCToLocal=False) -> StringC
        CTime(DateC self) -> StringC
        """
        return _Ravl.DateC_CTime(self, convertUTCToLocal)

    def CTimeShort(self, convertUTCToLocal=False):
        """
        CTimeShort(DateC self, bool convertUTCToLocal=False) -> StringC
        CTimeShort(DateC self) -> StringC
        """
        return _Ravl.DateC_CTimeShort(self, convertUTCToLocal)

    def USeconds(self):
        """USeconds(DateC self) -> long"""
        return _Ravl.DateC_USeconds(self)

    def TotalSeconds(self):
        """TotalSeconds(DateC self) -> long"""
        return _Ravl.DateC_TotalSeconds(self)

    def Double(self):
        """Double(DateC self) -> double"""
        return _Ravl.DateC_Double(self)

    def Seconds(self, convertUTCToLocal=False):
        """
        Seconds(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        Seconds(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_Seconds(self, convertUTCToLocal)

    def Minute(self, convertUTCToLocal=False):
        """
        Minute(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        Minute(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_Minute(self, convertUTCToLocal)

    def Hour(self, convertUTCToLocal=False):
        """
        Hour(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        Hour(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_Hour(self, convertUTCToLocal)

    def Month(self, convertUTCToLocal=False):
        """
        Month(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        Month(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_Month(self, convertUTCToLocal)

    def Year(self, convertUTCToLocal=False):
        """
        Year(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        Year(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_Year(self, convertUTCToLocal)

    def DayInMonth(self, convertUTCToLocal=False):
        """
        DayInMonth(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        DayInMonth(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_DayInMonth(self, convertUTCToLocal)

    def DayInYear(self, convertUTCToLocal=False):
        """
        DayInYear(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        DayInYear(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_DayInYear(self, convertUTCToLocal)

    def DayInWeek(self, convertUTCToLocal=False):
        """
        DayInWeek(DateC self, bool convertUTCToLocal=False) -> RavlN::IntT
        DayInWeek(DateC self) -> RavlN::IntT
        """
        return _Ravl.DateC_DayInWeek(self, convertUTCToLocal)

    def TextDayInWeek(self, convertUTCToLocal=False):
        """
        TextDayInWeek(DateC self, bool convertUTCToLocal=False) -> StringC
        TextDayInWeek(DateC self) -> StringC
        """
        return _Ravl.DateC_TextDayInWeek(self, convertUTCToLocal)

    def DaylightSaving(self):
        """DaylightSaving(DateC self) -> bool"""
        return _Ravl.DateC_DaylightSaving(self)

    def Wait(self):
        """Wait(DateC self) -> bool"""
        return _Ravl.DateC_Wait(self)

    __swig_destroy__ = _Ravl.delete_DateC
    __del__ = lambda self : None;
DateC_swigregister = _Ravl.DateC_swigregister
DateC_swigregister(DateC)

def DateC_NowUTC():
  """DateC_NowUTC() -> DateC"""
  return _Ravl.DateC_NowUTC()

def DateC_NowLocal():
  """DateC_NowLocal() -> DateC"""
  return _Ravl.DateC_NowLocal()

def DateC_NowVirtual():
  """DateC_NowVirtual() -> DateC"""
  return _Ravl.DateC_NowVirtual()

def DateC_TimeZoneOffset():
  """DateC_TimeZoneOffset() -> DateC"""
  return _Ravl.DateC_TimeZoneOffset()

def DateC_IsLeapYear(*args):
  """DateC_IsLeapYear(int year) -> bool"""
  return _Ravl.DateC_IsLeapYear(*args)

def DateC_YearToDaysSince1970(*args):
  """DateC_YearToDaysSince1970(int year) -> int"""
  return _Ravl.DateC_YearToDaysSince1970(*args)

class HashInt64Int64C(_object):
    """Proxy of C++ RavlN::HashC<(RavlN::Int64T,RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashInt64Int64C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashInt64Int64C, name)
    __repr__ = _swig_repr
    def __init__(self, nBins=23): 
        """
        __init__(RavlN::HashC<(RavlN::Int64T,RavlN::Int64T)> self, RavlN::UIntT nBins=23) -> HashInt64Int64C
        __init__(RavlN::HashC<(RavlN::Int64T,RavlN::Int64T)> self) -> HashInt64Int64C
        """
        this = _Ravl.new_HashInt64Int64C(nBins)
        try: self.this.append(this)
        except: self.this = this
    def Lookup(self, *args):
        """Lookup(HashInt64Int64C self, long const & key) -> bool"""
        return _Ravl.HashInt64Int64C_Lookup(self, *args)

    def Update(self, *args):
        """
        Update(HashInt64Int64C self, long const & key, long const & data) -> bool
        Update(HashInt64Int64C self, long const & key) -> long &
        """
        return _Ravl.HashInt64Int64C_Update(self, *args)

    def Insert(self, *args):
        """Insert(HashInt64Int64C self, long const & key, long const & data) -> bool"""
        return _Ravl.HashInt64Int64C_Insert(self, *args)

    def Access(self, *args):
        """
        Access(HashInt64Int64C self, long const & key, long const & default=long()) -> long
        Access(HashInt64Int64C self, long const & key) -> long &
        """
        return _Ravl.HashInt64Int64C_Access(self, *args)

    def AccessCopy(self, *args):
        """
        AccessCopy(HashInt64Int64C self, long const & key, long const & default=long()) -> long
        AccessCopy(HashInt64Int64C self, long const & key) -> long &
        """
        return _Ravl.HashInt64Int64C_AccessCopy(self, *args)

    def Del(self, *args):
        """
        Del(HashInt64Int64C self, long const & key, bool allowResize=True) -> bool
        Del(HashInt64Int64C self, long const & key) -> bool
        """
        return _Ravl.HashInt64Int64C_Del(self, *args)

    def Get(self, *args):
        """
        Get(HashInt64Int64C self, long const & key, bool allowResize=True) -> long
        Get(HashInt64Int64C self, long const & key) -> long
        """
        return _Ravl.HashInt64Int64C_Get(self, *args)

    def IsElm(self, *args):
        """IsElm(HashInt64Int64C self, long const & key) -> bool"""
        return _Ravl.HashInt64Int64C_IsElm(self, *args)

    def Empty(self):
        """Empty(HashInt64Int64C self)"""
        return _Ravl.HashInt64Int64C_Empty(self)

    def Bins(self):
        """Bins(HashInt64Int64C self) -> RavlN::UIntT"""
        return _Ravl.HashInt64Int64C_Bins(self)

    def Resize(self, *args):
        """Resize(HashInt64Int64C self, RavlN::SizeT newSize)"""
        return _Ravl.HashInt64Int64C_Resize(self, *args)

    __swig_destroy__ = _Ravl.delete_HashInt64Int64C
    __del__ = lambda self : None;
HashInt64Int64C_swigregister = _Ravl.HashInt64Int64C_swigregister
HashInt64Int64C_swigregister(HashInt64Int64C)

class HashInt64Int64IterC(_object):
    """Proxy of C++ RavlN::HashIterC<(RavlN::Int64T,RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashInt64Int64IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashInt64Int64IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::HashIterC<(RavlN::Int64T,RavlN::Int64T)> self) -> HashInt64Int64IterC
        __init__(RavlN::HashIterC<(RavlN::Int64T,RavlN::Int64T)> self, HashInt64Int64C nTab) -> HashInt64Int64IterC
        __init__(RavlN::HashIterC<(RavlN::Int64T,RavlN::Int64T)> self, HashInt64Int64IterC oth) -> HashInt64Int64IterC
        """
        this = _Ravl.new_HashInt64Int64IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def First(self):
        """First(HashInt64Int64IterC self) -> bool"""
        return _Ravl.HashInt64Int64IterC_First(self)

    def Next(self):
        """Next(HashInt64Int64IterC self) -> bool"""
        return _Ravl.HashInt64Int64IterC_Next(self)

    def IsElm(self):
        """IsElm(HashInt64Int64IterC self) -> bool"""
        return _Ravl.HashInt64Int64IterC_IsElm(self)

    def Key(self):
        """Key(HashInt64Int64IterC self) -> long const &"""
        return _Ravl.HashInt64Int64IterC_Key(self)

    def Data(self, *args):
        """
        Data(HashInt64Int64IterC self) -> long const
        Data(HashInt64Int64IterC self) -> long &
        """
        return _Ravl.HashInt64Int64IterC_Data(self, *args)

    def Del(self):
        """Del(HashInt64Int64IterC self) -> bool"""
        return _Ravl.HashInt64Int64IterC_Del(self)

    __swig_destroy__ = _Ravl.delete_HashInt64Int64IterC
    __del__ = lambda self : None;
HashInt64Int64IterC_swigregister = _Ravl.HashInt64Int64IterC_swigregister
HashInt64Int64IterC_swigregister(HashInt64Int64IterC)

class DPIPortImageByteC(_object):
    """Proxy of C++ RavlN::DPIPortC<(RavlImageN::ImageC<(RavlN::ByteT)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPIPortImageByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPIPortImageByteC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DPIPortC<(RavlImageN::ImageC<(RavlN::ByteT)>)> self) -> DPIPortImageByteC"""
        this = _Ravl.new_DPIPortImageByteC()
        try: self.this.append(this)
        except: self.this = this
    def Get(self, *args):
        """Get(DPIPortImageByteC self, ImageByteC buff) -> bool"""
        return _Ravl.DPIPortImageByteC_Get(self, *args)

    def SetAttr(self, *args):
        """SetAttr(DPIPortImageByteC self, StringC attrName, StringC attrValue) -> bool"""
        return _Ravl.DPIPortImageByteC_SetAttr(self, *args)

    def GetAttr(self, *args):
        """GetAttr(DPIPortImageByteC self, StringC attrName, StringC attrValue) -> bool"""
        return _Ravl.DPIPortImageByteC_GetAttr(self, *args)

    __swig_destroy__ = _Ravl.delete_DPIPortImageByteC
    __del__ = lambda self : None;
DPIPortImageByteC_swigregister = _Ravl.DPIPortImageByteC_swigregister
DPIPortImageByteC_swigregister(DPIPortImageByteC)


def OpenISequence(*args):
  """OpenISequence(DPIPortImageByteC arg1, StringC arg2) -> bool"""
  return _Ravl.OpenISequence(*args)

def SysLogOpen(*args):
  """
    SysLogOpen(StringC name, bool logPid=False, bool sendStdErr=True, bool stdErrOnly=False, int facility=-1, 
        bool logFileLine=False) -> bool
    SysLogOpen(StringC name, bool logPid=False, bool sendStdErr=True, bool stdErrOnly=False, int facility=-1) -> bool
    SysLogOpen(StringC name, bool logPid=False, bool sendStdErr=True, bool stdErrOnly=False) -> bool
    SysLogOpen(StringC name, bool logPid=False, bool sendStdErr=True) -> bool
    SysLogOpen(StringC name, bool logPid=False) -> bool
    SysLogOpen(StringC name) -> bool
    """
  return _Ravl.SysLogOpen(*args)
class XMLFactoryContextC(_object):
    """Proxy of C++ RavlN::XMLFactoryContextC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLFactoryContextC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLFactoryContextC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlN::XMLFactoryContextC self, StringC configFile) -> XMLFactoryContextC"""
        this = _Ravl.new_XMLFactoryContextC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_XMLFactoryContextC
    __del__ = lambda self : None;
XMLFactoryContextC_swigregister = _Ravl.XMLFactoryContextC_swigregister
XMLFactoryContextC_swigregister(XMLFactoryContextC)

class CollectionUInt(_object):
    """Proxy of C++ RavlN::CollectionC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::CollectionC<(RavlN::UIntT)> self, RavlN::UIntT size=10) -> CollectionUInt
        __init__(RavlN::CollectionC<(RavlN::UIntT)> self) -> CollectionUInt
        __init__(RavlN::CollectionC<(RavlN::UIntT)> self, RavlN::SizeT maxSize, RavlN::SizeT used=0) -> CollectionUInt
        __init__(RavlN::CollectionC<(RavlN::UIntT)> self, RavlN::SizeT maxSize) -> CollectionUInt
        __init__(RavlN::CollectionC<(RavlN::UIntT)> self, SArray1dUInt dat) -> CollectionUInt
        __init__(RavlN::CollectionC<(RavlN::UIntT)> self, DListUIntC list) -> CollectionUInt
        """
        this = _Ravl.new_CollectionUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(CollectionUInt self) -> CollectionUInt"""
        return _Ravl.CollectionUInt_Copy(self)

    def Insert(self, *args):
        """Insert(CollectionUInt self, unsigned int const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionUInt_Insert(self, *args)

    def Append(self, *args):
        """Append(CollectionUInt self, unsigned int const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionUInt_Append(self, *args)

    def InsertRandom(self, *args):
        """InsertRandom(CollectionUInt self, unsigned int const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionUInt_InsertRandom(self, *args)

    def Delete(self, *args):
        """Delete(CollectionUInt self, IndexC ind)"""
        return _Ravl.CollectionUInt_Delete(self, *args)

    def __iadd__(self, *args):
        """__iadd__(CollectionUInt self, unsigned int const & dat)"""
        return _Ravl.CollectionUInt___iadd__(self, *args)

    def Pick(self):
        """Pick(CollectionUInt self) -> unsigned int"""
        return _Ravl.CollectionUInt_Pick(self)

    def Shuffle(self):
        """Shuffle(CollectionUInt self) -> CollectionUInt"""
        return _Ravl.CollectionUInt_Shuffle(self)

    def ShuffleIP(self):
        """ShuffleIP(CollectionUInt self)"""
        return _Ravl.CollectionUInt_ShuffleIP(self)

    def Merge(self, *args):
        """
        Merge(CollectionUInt self, CollectionUInt x)
        Merge(CollectionUInt self, SArray1dUInt x)
        """
        return _Ravl.CollectionUInt_Merge(self, *args)

    def IsEmpty(self):
        """IsEmpty(CollectionUInt self) -> bool"""
        return _Ravl.CollectionUInt_IsEmpty(self)

    def Empty(self):
        """Empty(CollectionUInt self)"""
        return _Ravl.CollectionUInt_Empty(self)

    def Size(self):
        """Size(CollectionUInt self) -> RavlN::SizeT"""
        return _Ravl.CollectionUInt_Size(self)

    def SArray1d(self, *args):
        """
        SArray1d(CollectionUInt self) -> SArray1dUInt
        SArray1d(CollectionUInt self) -> SArray1dUInt
        """
        return _Ravl.CollectionUInt_SArray1d(self, *args)

    def Split(self, *args):
        """Split(CollectionUInt self, RavlN::SizeT ne) -> CollectionUInt"""
        return _Ravl.CollectionUInt_Split(self, *args)

    def Sample(self, *args):
        """Sample(CollectionUInt self, RavlN::SizeT ne) -> CollectionUInt"""
        return _Ravl.CollectionUInt_Sample(self, *args)

    def Last(self, *args):
        """
        Last(CollectionUInt self) -> unsigned int
        Last(CollectionUInt self) -> unsigned int const &
        """
        return _Ravl.CollectionUInt_Last(self, *args)

    def First(self, *args):
        """
        First(CollectionUInt self) -> unsigned int
        First(CollectionUInt self) -> unsigned int const &
        """
        return _Ravl.CollectionUInt_First(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CollectionUInt self, size_t i) -> unsigned int const &"""
        return _Ravl.CollectionUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(CollectionUInt self, size_t i, unsigned int const & v)"""
        return _Ravl.CollectionUInt___setitem__(self, *args)

    def __str__(self):
        """__str__(CollectionUInt self) -> char const *"""
        return _Ravl.CollectionUInt___str__(self)

    __swig_destroy__ = _Ravl.delete_CollectionUInt
    __del__ = lambda self : None;
CollectionUInt_swigregister = _Ravl.CollectionUInt_swigregister
CollectionUInt_swigregister(CollectionUInt)

class CollectionReal(_object):
    """Proxy of C++ RavlN::CollectionC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionReal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::CollectionC<(RavlN::RealT)> self, RavlN::UIntT size=10) -> CollectionReal
        __init__(RavlN::CollectionC<(RavlN::RealT)> self) -> CollectionReal
        __init__(RavlN::CollectionC<(RavlN::RealT)> self, RavlN::SizeT maxSize, RavlN::SizeT used=0) -> CollectionReal
        __init__(RavlN::CollectionC<(RavlN::RealT)> self, RavlN::SizeT maxSize) -> CollectionReal
        __init__(RavlN::CollectionC<(RavlN::RealT)> self, SArray1dReal dat) -> CollectionReal
        __init__(RavlN::CollectionC<(RavlN::RealT)> self, DListRealC list) -> CollectionReal
        """
        this = _Ravl.new_CollectionReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(CollectionReal self) -> CollectionReal"""
        return _Ravl.CollectionReal_Copy(self)

    def Insert(self, *args):
        """Insert(CollectionReal self, double const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionReal_Insert(self, *args)

    def Append(self, *args):
        """Append(CollectionReal self, double const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionReal_Append(self, *args)

    def InsertRandom(self, *args):
        """InsertRandom(CollectionReal self, double const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionReal_InsertRandom(self, *args)

    def Delete(self, *args):
        """Delete(CollectionReal self, IndexC ind)"""
        return _Ravl.CollectionReal_Delete(self, *args)

    def __iadd__(self, *args):
        """__iadd__(CollectionReal self, double const & dat)"""
        return _Ravl.CollectionReal___iadd__(self, *args)

    def Pick(self):
        """Pick(CollectionReal self) -> double"""
        return _Ravl.CollectionReal_Pick(self)

    def Shuffle(self):
        """Shuffle(CollectionReal self) -> CollectionReal"""
        return _Ravl.CollectionReal_Shuffle(self)

    def ShuffleIP(self):
        """ShuffleIP(CollectionReal self)"""
        return _Ravl.CollectionReal_ShuffleIP(self)

    def Merge(self, *args):
        """
        Merge(CollectionReal self, CollectionReal x)
        Merge(CollectionReal self, SArray1dReal x)
        """
        return _Ravl.CollectionReal_Merge(self, *args)

    def IsEmpty(self):
        """IsEmpty(CollectionReal self) -> bool"""
        return _Ravl.CollectionReal_IsEmpty(self)

    def Empty(self):
        """Empty(CollectionReal self)"""
        return _Ravl.CollectionReal_Empty(self)

    def Size(self):
        """Size(CollectionReal self) -> RavlN::SizeT"""
        return _Ravl.CollectionReal_Size(self)

    def SArray1d(self, *args):
        """
        SArray1d(CollectionReal self) -> SArray1dReal
        SArray1d(CollectionReal self) -> SArray1dReal
        """
        return _Ravl.CollectionReal_SArray1d(self, *args)

    def Split(self, *args):
        """Split(CollectionReal self, RavlN::SizeT ne) -> CollectionReal"""
        return _Ravl.CollectionReal_Split(self, *args)

    def Sample(self, *args):
        """Sample(CollectionReal self, RavlN::SizeT ne) -> CollectionReal"""
        return _Ravl.CollectionReal_Sample(self, *args)

    def Last(self, *args):
        """
        Last(CollectionReal self) -> double
        Last(CollectionReal self) -> double const &
        """
        return _Ravl.CollectionReal_Last(self, *args)

    def First(self, *args):
        """
        First(CollectionReal self) -> double
        First(CollectionReal self) -> double const &
        """
        return _Ravl.CollectionReal_First(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CollectionReal self, size_t i) -> double const &"""
        return _Ravl.CollectionReal___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(CollectionReal self, size_t i, double const & v)"""
        return _Ravl.CollectionReal___setitem__(self, *args)

    def __str__(self):
        """__str__(CollectionReal self) -> char const *"""
        return _Ravl.CollectionReal___str__(self)

    __swig_destroy__ = _Ravl.delete_CollectionReal
    __del__ = lambda self : None;
CollectionReal_swigregister = _Ravl.CollectionReal_swigregister
CollectionReal_swigregister(CollectionReal)

class CollectionFloat(_object):
    """Proxy of C++ RavlN::CollectionC<(RavlN::FloatT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::CollectionC<(RavlN::FloatT)> self, RavlN::UIntT size=10) -> CollectionFloat
        __init__(RavlN::CollectionC<(RavlN::FloatT)> self) -> CollectionFloat
        __init__(RavlN::CollectionC<(RavlN::FloatT)> self, RavlN::SizeT maxSize, RavlN::SizeT used=0) -> CollectionFloat
        __init__(RavlN::CollectionC<(RavlN::FloatT)> self, RavlN::SizeT maxSize) -> CollectionFloat
        __init__(RavlN::CollectionC<(RavlN::FloatT)> self, SArray1dFloat dat) -> CollectionFloat
        __init__(RavlN::CollectionC<(RavlN::FloatT)> self, RavlN::DListC< float > const & list) -> CollectionFloat
        """
        this = _Ravl.new_CollectionFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(CollectionFloat self) -> CollectionFloat"""
        return _Ravl.CollectionFloat_Copy(self)

    def Insert(self, *args):
        """Insert(CollectionFloat self, float const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionFloat_Insert(self, *args)

    def Append(self, *args):
        """Append(CollectionFloat self, float const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionFloat_Append(self, *args)

    def InsertRandom(self, *args):
        """InsertRandom(CollectionFloat self, float const & dat) -> RavlN::UIntT"""
        return _Ravl.CollectionFloat_InsertRandom(self, *args)

    def Delete(self, *args):
        """Delete(CollectionFloat self, IndexC ind)"""
        return _Ravl.CollectionFloat_Delete(self, *args)

    def __iadd__(self, *args):
        """__iadd__(CollectionFloat self, float const & dat)"""
        return _Ravl.CollectionFloat___iadd__(self, *args)

    def Pick(self):
        """Pick(CollectionFloat self) -> float"""
        return _Ravl.CollectionFloat_Pick(self)

    def Shuffle(self):
        """Shuffle(CollectionFloat self) -> CollectionFloat"""
        return _Ravl.CollectionFloat_Shuffle(self)

    def ShuffleIP(self):
        """ShuffleIP(CollectionFloat self)"""
        return _Ravl.CollectionFloat_ShuffleIP(self)

    def Merge(self, *args):
        """
        Merge(CollectionFloat self, CollectionFloat x)
        Merge(CollectionFloat self, SArray1dFloat x)
        """
        return _Ravl.CollectionFloat_Merge(self, *args)

    def IsEmpty(self):
        """IsEmpty(CollectionFloat self) -> bool"""
        return _Ravl.CollectionFloat_IsEmpty(self)

    def Empty(self):
        """Empty(CollectionFloat self)"""
        return _Ravl.CollectionFloat_Empty(self)

    def Size(self):
        """Size(CollectionFloat self) -> RavlN::SizeT"""
        return _Ravl.CollectionFloat_Size(self)

    def SArray1d(self, *args):
        """
        SArray1d(CollectionFloat self) -> SArray1dFloat
        SArray1d(CollectionFloat self) -> SArray1dFloat
        """
        return _Ravl.CollectionFloat_SArray1d(self, *args)

    def Split(self, *args):
        """Split(CollectionFloat self, RavlN::SizeT ne) -> CollectionFloat"""
        return _Ravl.CollectionFloat_Split(self, *args)

    def Sample(self, *args):
        """Sample(CollectionFloat self, RavlN::SizeT ne) -> CollectionFloat"""
        return _Ravl.CollectionFloat_Sample(self, *args)

    def Last(self, *args):
        """
        Last(CollectionFloat self) -> float
        Last(CollectionFloat self) -> float const &
        """
        return _Ravl.CollectionFloat_Last(self, *args)

    def First(self, *args):
        """
        First(CollectionFloat self) -> float
        First(CollectionFloat self) -> float const &
        """
        return _Ravl.CollectionFloat_First(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CollectionFloat self, size_t i) -> float const &"""
        return _Ravl.CollectionFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(CollectionFloat self, size_t i, float const & v)"""
        return _Ravl.CollectionFloat___setitem__(self, *args)

    def __str__(self):
        """__str__(CollectionFloat self) -> char const *"""
        return _Ravl.CollectionFloat___str__(self)

    __swig_destroy__ = _Ravl.delete_CollectionFloat
    __del__ = lambda self : None;
CollectionFloat_swigregister = _Ravl.CollectionFloat_swigregister
CollectionFloat_swigregister(CollectionFloat)

class CollectionIndexC(_object):
    """Proxy of C++ RavlN::CollectionC<(RavlN::IndexC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionIndexC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionIndexC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::CollectionC<(RavlN::IndexC)> self, RavlN::UIntT size=10) -> CollectionIndexC
        __init__(RavlN::CollectionC<(RavlN::IndexC)> self) -> CollectionIndexC
        __init__(RavlN::CollectionC<(RavlN::IndexC)> self, RavlN::SizeT maxSize, RavlN::SizeT used=0) -> CollectionIndexC
        __init__(RavlN::CollectionC<(RavlN::IndexC)> self, RavlN::SizeT maxSize) -> CollectionIndexC
        __init__(RavlN::CollectionC<(RavlN::IndexC)> self, SArray1dIndexC dat) -> CollectionIndexC
        __init__(RavlN::CollectionC<(RavlN::IndexC)> self, RavlN::DListC< RavlN::IndexC > const & list) -> CollectionIndexC
        """
        this = _Ravl.new_CollectionIndexC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(CollectionIndexC self) -> CollectionIndexC"""
        return _Ravl.CollectionIndexC_Copy(self)

    def Insert(self, *args):
        """Insert(CollectionIndexC self, IndexC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionIndexC_Insert(self, *args)

    def Append(self, *args):
        """Append(CollectionIndexC self, IndexC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionIndexC_Append(self, *args)

    def InsertRandom(self, *args):
        """InsertRandom(CollectionIndexC self, IndexC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionIndexC_InsertRandom(self, *args)

    def Delete(self, *args):
        """Delete(CollectionIndexC self, IndexC ind)"""
        return _Ravl.CollectionIndexC_Delete(self, *args)

    def __iadd__(self, *args):
        """__iadd__(CollectionIndexC self, IndexC dat)"""
        return _Ravl.CollectionIndexC___iadd__(self, *args)

    def Pick(self):
        """Pick(CollectionIndexC self) -> IndexC"""
        return _Ravl.CollectionIndexC_Pick(self)

    def Shuffle(self):
        """Shuffle(CollectionIndexC self) -> CollectionIndexC"""
        return _Ravl.CollectionIndexC_Shuffle(self)

    def ShuffleIP(self):
        """ShuffleIP(CollectionIndexC self)"""
        return _Ravl.CollectionIndexC_ShuffleIP(self)

    def Merge(self, *args):
        """
        Merge(CollectionIndexC self, CollectionIndexC x)
        Merge(CollectionIndexC self, SArray1dIndexC x)
        """
        return _Ravl.CollectionIndexC_Merge(self, *args)

    def IsEmpty(self):
        """IsEmpty(CollectionIndexC self) -> bool"""
        return _Ravl.CollectionIndexC_IsEmpty(self)

    def Empty(self):
        """Empty(CollectionIndexC self)"""
        return _Ravl.CollectionIndexC_Empty(self)

    def Size(self):
        """Size(CollectionIndexC self) -> RavlN::SizeT"""
        return _Ravl.CollectionIndexC_Size(self)

    def SArray1d(self, *args):
        """
        SArray1d(CollectionIndexC self) -> SArray1dIndexC
        SArray1d(CollectionIndexC self) -> SArray1dIndexC
        """
        return _Ravl.CollectionIndexC_SArray1d(self, *args)

    def Split(self, *args):
        """Split(CollectionIndexC self, RavlN::SizeT ne) -> CollectionIndexC"""
        return _Ravl.CollectionIndexC_Split(self, *args)

    def Sample(self, *args):
        """Sample(CollectionIndexC self, RavlN::SizeT ne) -> CollectionIndexC"""
        return _Ravl.CollectionIndexC_Sample(self, *args)

    def Last(self, *args):
        """
        Last(CollectionIndexC self) -> IndexC
        Last(CollectionIndexC self) -> IndexC
        """
        return _Ravl.CollectionIndexC_Last(self, *args)

    def First(self, *args):
        """
        First(CollectionIndexC self) -> IndexC
        First(CollectionIndexC self) -> IndexC
        """
        return _Ravl.CollectionIndexC_First(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CollectionIndexC self, size_t i) -> IndexC"""
        return _Ravl.CollectionIndexC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(CollectionIndexC self, size_t i, IndexC v)"""
        return _Ravl.CollectionIndexC___setitem__(self, *args)

    def __str__(self):
        """__str__(CollectionIndexC self) -> char const *"""
        return _Ravl.CollectionIndexC___str__(self)

    __swig_destroy__ = _Ravl.delete_CollectionIndexC
    __del__ = lambda self : None;
CollectionIndexC_swigregister = _Ravl.CollectionIndexC_swigregister
CollectionIndexC_swigregister(CollectionIndexC)

class CollectionPoint2dC(_object):
    """Proxy of C++ RavlN::CollectionC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionPoint2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionPoint2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::CollectionC<(RavlN::Point2dC)> self, RavlN::UIntT size=10) -> CollectionPoint2dC
        __init__(RavlN::CollectionC<(RavlN::Point2dC)> self) -> CollectionPoint2dC
        __init__(RavlN::CollectionC<(RavlN::Point2dC)> self, RavlN::SizeT maxSize, RavlN::SizeT used=0) -> CollectionPoint2dC
        __init__(RavlN::CollectionC<(RavlN::Point2dC)> self, RavlN::SizeT maxSize) -> CollectionPoint2dC
        __init__(RavlN::CollectionC<(RavlN::Point2dC)> self, SArray1dPoint2dC dat) -> CollectionPoint2dC
        __init__(RavlN::CollectionC<(RavlN::Point2dC)> self, DListPoint2dC list) -> CollectionPoint2dC
        """
        this = _Ravl.new_CollectionPoint2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(CollectionPoint2dC self) -> CollectionPoint2dC"""
        return _Ravl.CollectionPoint2dC_Copy(self)

    def Insert(self, *args):
        """Insert(CollectionPoint2dC self, Point2dC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionPoint2dC_Insert(self, *args)

    def Append(self, *args):
        """Append(CollectionPoint2dC self, Point2dC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionPoint2dC_Append(self, *args)

    def InsertRandom(self, *args):
        """InsertRandom(CollectionPoint2dC self, Point2dC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionPoint2dC_InsertRandom(self, *args)

    def Delete(self, *args):
        """Delete(CollectionPoint2dC self, IndexC ind)"""
        return _Ravl.CollectionPoint2dC_Delete(self, *args)

    def __iadd__(self, *args):
        """__iadd__(CollectionPoint2dC self, Point2dC dat)"""
        return _Ravl.CollectionPoint2dC___iadd__(self, *args)

    def Pick(self):
        """Pick(CollectionPoint2dC self) -> Point2dC"""
        return _Ravl.CollectionPoint2dC_Pick(self)

    def Shuffle(self):
        """Shuffle(CollectionPoint2dC self) -> CollectionPoint2dC"""
        return _Ravl.CollectionPoint2dC_Shuffle(self)

    def ShuffleIP(self):
        """ShuffleIP(CollectionPoint2dC self)"""
        return _Ravl.CollectionPoint2dC_ShuffleIP(self)

    def Merge(self, *args):
        """
        Merge(CollectionPoint2dC self, CollectionPoint2dC x)
        Merge(CollectionPoint2dC self, SArray1dPoint2dC x)
        """
        return _Ravl.CollectionPoint2dC_Merge(self, *args)

    def IsEmpty(self):
        """IsEmpty(CollectionPoint2dC self) -> bool"""
        return _Ravl.CollectionPoint2dC_IsEmpty(self)

    def Empty(self):
        """Empty(CollectionPoint2dC self)"""
        return _Ravl.CollectionPoint2dC_Empty(self)

    def Size(self):
        """Size(CollectionPoint2dC self) -> RavlN::SizeT"""
        return _Ravl.CollectionPoint2dC_Size(self)

    def SArray1d(self, *args):
        """
        SArray1d(CollectionPoint2dC self) -> SArray1dPoint2dC
        SArray1d(CollectionPoint2dC self) -> SArray1dPoint2dC
        """
        return _Ravl.CollectionPoint2dC_SArray1d(self, *args)

    def Split(self, *args):
        """Split(CollectionPoint2dC self, RavlN::SizeT ne) -> CollectionPoint2dC"""
        return _Ravl.CollectionPoint2dC_Split(self, *args)

    def Sample(self, *args):
        """Sample(CollectionPoint2dC self, RavlN::SizeT ne) -> CollectionPoint2dC"""
        return _Ravl.CollectionPoint2dC_Sample(self, *args)

    def Last(self, *args):
        """
        Last(CollectionPoint2dC self) -> Point2dC
        Last(CollectionPoint2dC self) -> Point2dC
        """
        return _Ravl.CollectionPoint2dC_Last(self, *args)

    def First(self, *args):
        """
        First(CollectionPoint2dC self) -> Point2dC
        First(CollectionPoint2dC self) -> Point2dC
        """
        return _Ravl.CollectionPoint2dC_First(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CollectionPoint2dC self, size_t i) -> Point2dC"""
        return _Ravl.CollectionPoint2dC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(CollectionPoint2dC self, size_t i, Point2dC v)"""
        return _Ravl.CollectionPoint2dC___setitem__(self, *args)

    def __str__(self):
        """__str__(CollectionPoint2dC self) -> char const *"""
        return _Ravl.CollectionPoint2dC___str__(self)

    __swig_destroy__ = _Ravl.delete_CollectionPoint2dC
    __del__ = lambda self : None;
CollectionPoint2dC_swigregister = _Ravl.CollectionPoint2dC_swigregister
CollectionPoint2dC_swigregister(CollectionPoint2dC)

class CollectionVectorC(_object):
    """Proxy of C++ RavlN::CollectionC<(RavlN::VectorC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionVectorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::CollectionC<(RavlN::VectorC)> self, RavlN::UIntT size=10) -> CollectionVectorC
        __init__(RavlN::CollectionC<(RavlN::VectorC)> self) -> CollectionVectorC
        __init__(RavlN::CollectionC<(RavlN::VectorC)> self, RavlN::SizeT maxSize, RavlN::SizeT used=0) -> CollectionVectorC
        __init__(RavlN::CollectionC<(RavlN::VectorC)> self, RavlN::SizeT maxSize) -> CollectionVectorC
        __init__(RavlN::CollectionC<(RavlN::VectorC)> self, SArray1dVectorC dat) -> CollectionVectorC
        __init__(RavlN::CollectionC<(RavlN::VectorC)> self, RavlN::DListC< RavlN::VectorC > const & list) -> CollectionVectorC
        """
        this = _Ravl.new_CollectionVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(CollectionVectorC self) -> CollectionVectorC"""
        return _Ravl.CollectionVectorC_Copy(self)

    def Insert(self, *args):
        """Insert(CollectionVectorC self, VectorC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionVectorC_Insert(self, *args)

    def Append(self, *args):
        """Append(CollectionVectorC self, VectorC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionVectorC_Append(self, *args)

    def InsertRandom(self, *args):
        """InsertRandom(CollectionVectorC self, VectorC dat) -> RavlN::UIntT"""
        return _Ravl.CollectionVectorC_InsertRandom(self, *args)

    def Delete(self, *args):
        """Delete(CollectionVectorC self, IndexC ind)"""
        return _Ravl.CollectionVectorC_Delete(self, *args)

    def __iadd__(self, *args):
        """__iadd__(CollectionVectorC self, VectorC dat)"""
        return _Ravl.CollectionVectorC___iadd__(self, *args)

    def Pick(self):
        """Pick(CollectionVectorC self) -> VectorC"""
        return _Ravl.CollectionVectorC_Pick(self)

    def Shuffle(self):
        """Shuffle(CollectionVectorC self) -> CollectionVectorC"""
        return _Ravl.CollectionVectorC_Shuffle(self)

    def ShuffleIP(self):
        """ShuffleIP(CollectionVectorC self)"""
        return _Ravl.CollectionVectorC_ShuffleIP(self)

    def Merge(self, *args):
        """
        Merge(CollectionVectorC self, CollectionVectorC x)
        Merge(CollectionVectorC self, SArray1dVectorC x)
        """
        return _Ravl.CollectionVectorC_Merge(self, *args)

    def IsEmpty(self):
        """IsEmpty(CollectionVectorC self) -> bool"""
        return _Ravl.CollectionVectorC_IsEmpty(self)

    def Empty(self):
        """Empty(CollectionVectorC self)"""
        return _Ravl.CollectionVectorC_Empty(self)

    def Size(self):
        """Size(CollectionVectorC self) -> RavlN::SizeT"""
        return _Ravl.CollectionVectorC_Size(self)

    def SArray1d(self, *args):
        """
        SArray1d(CollectionVectorC self) -> SArray1dVectorC
        SArray1d(CollectionVectorC self) -> SArray1dVectorC
        """
        return _Ravl.CollectionVectorC_SArray1d(self, *args)

    def Split(self, *args):
        """Split(CollectionVectorC self, RavlN::SizeT ne) -> CollectionVectorC"""
        return _Ravl.CollectionVectorC_Split(self, *args)

    def Sample(self, *args):
        """Sample(CollectionVectorC self, RavlN::SizeT ne) -> CollectionVectorC"""
        return _Ravl.CollectionVectorC_Sample(self, *args)

    def Last(self, *args):
        """
        Last(CollectionVectorC self) -> VectorC
        Last(CollectionVectorC self) -> VectorC
        """
        return _Ravl.CollectionVectorC_Last(self, *args)

    def First(self, *args):
        """
        First(CollectionVectorC self) -> VectorC
        First(CollectionVectorC self) -> VectorC
        """
        return _Ravl.CollectionVectorC_First(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CollectionVectorC self, size_t i) -> VectorC"""
        return _Ravl.CollectionVectorC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(CollectionVectorC self, size_t i, VectorC v)"""
        return _Ravl.CollectionVectorC___setitem__(self, *args)

    def __str__(self):
        """__str__(CollectionVectorC self) -> char const *"""
        return _Ravl.CollectionVectorC___str__(self)

    __swig_destroy__ = _Ravl.delete_CollectionVectorC
    __del__ = lambda self : None;
CollectionVectorC_swigregister = _Ravl.CollectionVectorC_swigregister
CollectionVectorC_swigregister(CollectionVectorC)

class RCHashStringPointsC(_object):
    """Proxy of C++ RavlN::RCHashC<(RavlN::StringC,RavlN::CollectionC<(RavlN::Point2dC)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCHashStringPointsC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCHashStringPointsC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::RCHashC<(RavlN::StringC,RavlN::CollectionC<(RavlN::Point2dC)>)> self, bool makeBod=True) -> RCHashStringPointsC
        __init__(RavlN::RCHashC<(RavlN::StringC,RavlN::CollectionC<(RavlN::Point2dC)>)> self) -> RCHashStringPointsC
        __init__(RavlN::RCHashC<(RavlN::StringC,RavlN::CollectionC<(RavlN::Point2dC)>)> self, RavlN::SizeT nBins) -> RCHashStringPointsC
        """
        this = _Ravl.new_RCHashStringPointsC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Del(self, *args):
        """Del(RCHashStringPointsC self, StringC aKey) -> bool"""
        return _Ravl.RCHashStringPointsC_Del(self, *args)

    def IsElm(self, *args):
        """IsElm(RCHashStringPointsC self, StringC aKey) -> bool"""
        return _Ravl.RCHashStringPointsC_IsElm(self, *args)

    def Move(self, *args):
        """Move(RCHashStringPointsC self, RCHashStringPointsC oth)"""
        return _Ravl.RCHashStringPointsC_Move(self, *args)

    def IsEmpty(self):
        """IsEmpty(RCHashStringPointsC self) -> bool"""
        return _Ravl.RCHashStringPointsC_IsEmpty(self)

    def Empty(self):
        """Empty(RCHashStringPointsC self)"""
        return _Ravl.RCHashStringPointsC_Empty(self)

    def Insert(self, *args):
        """Insert(RCHashStringPointsC self, StringC aKey, CollectionPoint2dC data) -> bool"""
        return _Ravl.RCHashStringPointsC_Insert(self, *args)

    def Size(self):
        """Size(RCHashStringPointsC self) -> RavlN::SizeT"""
        return _Ravl.RCHashStringPointsC_Size(self)

    def Lookup(self, *args):
        """
        Lookup(RCHashStringPointsC self, StringC aKey) -> CollectionPoint2dC
        Lookup(RCHashStringPointsC self, StringC aKey) -> CollectionPoint2dC
        Lookup(RCHashStringPointsC self, StringC aKey, CollectionPoint2dC data) -> bool
        """
        return _Ravl.RCHashStringPointsC_Lookup(self, *args)

    def Update(self, *args):
        """
        Update(RCHashStringPointsC self, StringC key, CollectionPoint2dC data) -> bool
        Update(RCHashStringPointsC self, StringC key) -> CollectionPoint2dC
        """
        return _Ravl.RCHashStringPointsC_Update(self, *args)

    def Access(self, *args):
        """
        Access(RCHashStringPointsC self, StringC key, CollectionPoint2dC dat=RavlN::CollectionC< RavlN::Point2dC >()) -> CollectionPoint2dC
        Access(RCHashStringPointsC self, StringC key) -> CollectionPoint2dC
        """
        return _Ravl.RCHashStringPointsC_Access(self, *args)

    def AddFrom(self, *args):
        """
        AddFrom(RCHashStringPointsC self, RCHashStringPointsC oth, bool replace=True)
        AddFrom(RCHashStringPointsC self, RCHashStringPointsC oth)
        """
        return _Ravl.RCHashStringPointsC_AddFrom(self, *args)

    def NormaliseKey(self, *args):
        """NormaliseKey(RCHashStringPointsC self, StringC value) -> bool"""
        return _Ravl.RCHashStringPointsC_NormaliseKey(self, *args)

    def Hash(self):
        """Hash(RCHashStringPointsC self) -> RavlN::SizeT"""
        return _Ravl.RCHashStringPointsC_Hash(self)

    def __eq__(self, *args):
        """
        __eq__(RCHashStringPointsC self, RCHashStringPointsC oth) -> bool
        __eq__(RCHashStringPointsC self, RavlN::HashC< RavlN::StringC,RavlN::CollectionC< RavlN::Point2dC > > const & oth) -> bool
        """
        return _Ravl.RCHashStringPointsC___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(RCHashStringPointsC self, RCHashStringPointsC oth) -> bool
        __ne__(RCHashStringPointsC self, RavlN::HashC< RavlN::StringC,RavlN::CollectionC< RavlN::Point2dC > > const & oth) -> bool
        """
        return _Ravl.RCHashStringPointsC___ne__(self, *args)

    __swig_destroy__ = _Ravl.delete_RCHashStringPointsC
    __del__ = lambda self : None;
RCHashStringPointsC_swigregister = _Ravl.RCHashStringPointsC_swigregister
RCHashStringPointsC_swigregister(RCHashStringPointsC)

class ClassifierC(_object):
    """Proxy of C++ RavlN::ClassifierC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassifierC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassifierC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::ClassifierC self) -> ClassifierC"""
        this = _Ravl.new_ClassifierC()
        try: self.this.append(this)
        except: self.this = this
    def Classify(self, *args):
        """Classify(ClassifierC self, VectorC vector) -> RavlN::UIntT"""
        return _Ravl.ClassifierC_Classify(self, *args)

    def Confidence(self, *args):
        """Confidence(ClassifierC self, VectorC vector) -> VectorC"""
        return _Ravl.ClassifierC_Confidence(self, *args)

    __swig_destroy__ = _Ravl.delete_ClassifierC
    __del__ = lambda self : None;
ClassifierC_swigregister = _Ravl.ClassifierC_swigregister
ClassifierC_swigregister(ClassifierC)

class FunctionC(_object):
    """Proxy of C++ RavlN::FunctionC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionC, name)
    __repr__ = _swig_repr
    def Apply(self, *args):
        """Apply(FunctionC self, VectorC data) -> VectorC"""
        return _Ravl.FunctionC_Apply(self, *args)

    def InputSize(self):
        """InputSize(FunctionC self) -> RavlN::UIntT"""
        return _Ravl.FunctionC_InputSize(self)

    def OutputSize(self):
        """OutputSize(FunctionC self) -> RavlN::UIntT"""
        return _Ravl.FunctionC_OutputSize(self)

    def __str__(self):
        """__str__(FunctionC self) -> char const *"""
        return _Ravl.FunctionC___str__(self)

    def __nonzero__(self):
        """__nonzero__(FunctionC self) -> bool"""
        return _Ravl.FunctionC___nonzero__(self)

    def __init__(self): 
        """__init__(RavlN::FunctionC self) -> FunctionC"""
        this = _Ravl.new_FunctionC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_FunctionC
    __del__ = lambda self : None;
FunctionC_swigregister = _Ravl.FunctionC_swigregister
FunctionC_swigregister(FunctionC)

class ClassifierPreprocessC(ClassifierC):
    """Proxy of C++ RavlN::ClassifierPreprocessC class"""
    __swig_setmethods__ = {}
    for _s in [ClassifierC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassifierPreprocessC, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassifierC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassifierPreprocessC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlN::ClassifierPreprocessC self, FunctionC function, ClassifierC classifier) -> ClassifierPreprocessC"""
        this = _Ravl.new_ClassifierPreprocessC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_ClassifierPreprocessC
    __del__ = lambda self : None;
ClassifierPreprocessC_swigregister = _Ravl.ClassifierPreprocessC_swigregister
ClassifierPreprocessC_swigregister(ClassifierPreprocessC)


def Load(*args):
  """
    Load(StringC filename, ImageByteC arg2) -> bool
    Load(StringC filename, RavlImageN::ImageC< RavlN::RealT > & arg2) -> bool
    Load(StringC filename, ImageByteRGBValueC arg2) -> bool
    Load(StringC filename, ClassifierC classifier) -> bool
    Load(StringC filename, FunctionC classifier) -> bool
    """
  return _Ravl.Load(*args)

def Save(*args):
  """
    Save(StringC filename, ImageByteC arg2) -> bool
    Save(StringC filename, RavlImageN::ImageC< RavlN::RealT > const & arg2) -> bool
    Save(StringC filename, ImageByteRGBValueC arg2) -> bool
    Save(StringC filename, ClassifierC classifier) -> bool
    Save(StringC filename, FunctionC classifier) -> bool
    """
  return _Ravl.Save(*args)
class SampleOfUInt(_object):
    """Proxy of C++ RavlN::SampleC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleOfUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleOfUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SampleC<(RavlN::UIntT)> self, RavlN::SizeT maxSize=10) -> SampleOfUInt
        __init__(RavlN::SampleC<(RavlN::UIntT)> self) -> SampleOfUInt
        __init__(RavlN::SampleC<(RavlN::UIntT)> self, SArray1dUInt dat) -> SampleOfUInt
        """
        this = _Ravl.new_SampleOfUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(SampleOfUInt self) -> SampleOfUInt"""
        return _Ravl.SampleOfUInt_Copy(self)

    def CompactFrom(self, *args):
        """
        CompactFrom(SampleOfUInt self, IndexC start, RavlN::SizeT size) -> SampleOfUInt
        CompactFrom(SampleOfUInt self, IndexC start, RavlN::SizeT size) -> SampleOfUInt
        """
        return _Ravl.SampleOfUInt_CompactFrom(self, *args)

    def ExtractEntry(self, *args):
        """ExtractEntry(SampleOfUInt self, int ind) -> unsigned int"""
        return _Ravl.SampleOfUInt_ExtractEntry(self, *args)

    def Fill(self, *args):
        """Fill(SampleOfUInt self, unsigned int const & value)"""
        return _Ravl.SampleOfUInt_Fill(self, *args)

    def Append(self, *args):
        """
        Append(SampleOfUInt self, unsigned int const & dat) -> IndexC
        Append(SampleOfUInt self, SampleOfUInt newData) -> IndexC
        """
        return _Ravl.SampleOfUInt_Append(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SampleOfUInt self, unsigned int const & dat) -> IndexC"""
        return _Ravl.SampleOfUInt___iadd__(self, *args)

    def Size(self):
        """Size(SampleOfUInt self) -> RavlN::SizeT"""
        return _Ravl.SampleOfUInt_Size(self)

    def PickElement(self, *args):
        """PickElement(SampleOfUInt self, RavlN::UIntT i) -> unsigned int"""
        return _Ravl.SampleOfUInt_PickElement(self, *args)

    def Nth(self, *args):
        """
        Nth(SampleOfUInt self, RavlN::UIntT i) -> unsigned int
        Nth(SampleOfUInt self, RavlN::UIntT i) -> unsigned int const &
        """
        return _Ravl.SampleOfUInt_Nth(self, *args)

    def Pick(self):
        """Pick(SampleOfUInt self) -> unsigned int"""
        return _Ravl.SampleOfUInt_Pick(self)

    def Sample(self, *args):
        """
        Sample(SampleOfUInt self) -> unsigned int const
        Sample(SampleOfUInt self) -> unsigned int &
        """
        return _Ravl.SampleOfUInt_Sample(self, *args)

    def First(self, *args):
        """
        First(SampleOfUInt self) -> unsigned int
        First(SampleOfUInt self) -> unsigned int const &
        """
        return _Ravl.SampleOfUInt_First(self, *args)

    def Last(self, *args):
        """
        Last(SampleOfUInt self) -> unsigned int
        Last(SampleOfUInt self) -> unsigned int const &
        """
        return _Ravl.SampleOfUInt_Last(self, *args)

    def IsEmpty(self):
        """IsEmpty(SampleOfUInt self) -> bool"""
        return _Ravl.SampleOfUInt_IsEmpty(self)

    def IsValid(self):
        """IsValid(SampleOfUInt self) -> bool"""
        return _Ravl.SampleOfUInt_IsValid(self)

    def __getitem__(self, *args):
        """__getitem__(SampleOfUInt self, size_t i) -> unsigned int const &"""
        return _Ravl.SampleOfUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SampleOfUInt self, size_t i, unsigned int const & v)"""
        return _Ravl.SampleOfUInt___setitem__(self, *args)

    def __str__(self):
        """__str__(SampleOfUInt self) -> char const *"""
        return _Ravl.SampleOfUInt___str__(self)

    __swig_destroy__ = _Ravl.delete_SampleOfUInt
    __del__ = lambda self : None;
SampleOfUInt_swigregister = _Ravl.SampleOfUInt_swigregister
SampleOfUInt_swigregister(SampleOfUInt)

class SampleOfVectorC(_object):
    """Proxy of C++ RavlN::SampleC<(RavlN::VectorC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleOfVectorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleOfVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SampleC<(RavlN::VectorC)> self, RavlN::SizeT maxSize=10) -> SampleOfVectorC
        __init__(RavlN::SampleC<(RavlN::VectorC)> self) -> SampleOfVectorC
        __init__(RavlN::SampleC<(RavlN::VectorC)> self, SArray1dVectorC dat) -> SampleOfVectorC
        """
        this = _Ravl.new_SampleOfVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self):
        """Copy(SampleOfVectorC self) -> SampleOfVectorC"""
        return _Ravl.SampleOfVectorC_Copy(self)

    def CompactFrom(self, *args):
        """
        CompactFrom(SampleOfVectorC self, IndexC start, RavlN::SizeT size) -> SampleOfVectorC
        CompactFrom(SampleOfVectorC self, IndexC start, RavlN::SizeT size) -> SampleOfVectorC
        """
        return _Ravl.SampleOfVectorC_CompactFrom(self, *args)

    def ExtractEntry(self, *args):
        """ExtractEntry(SampleOfVectorC self, int ind) -> VectorC"""
        return _Ravl.SampleOfVectorC_ExtractEntry(self, *args)

    def Fill(self, *args):
        """Fill(SampleOfVectorC self, VectorC value)"""
        return _Ravl.SampleOfVectorC_Fill(self, *args)

    def Append(self, *args):
        """
        Append(SampleOfVectorC self, VectorC dat) -> IndexC
        Append(SampleOfVectorC self, SampleOfVectorC newData) -> IndexC
        """
        return _Ravl.SampleOfVectorC_Append(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SampleOfVectorC self, VectorC dat) -> IndexC"""
        return _Ravl.SampleOfVectorC___iadd__(self, *args)

    def Size(self):
        """Size(SampleOfVectorC self) -> RavlN::SizeT"""
        return _Ravl.SampleOfVectorC_Size(self)

    def PickElement(self, *args):
        """PickElement(SampleOfVectorC self, RavlN::UIntT i) -> VectorC"""
        return _Ravl.SampleOfVectorC_PickElement(self, *args)

    def Nth(self, *args):
        """
        Nth(SampleOfVectorC self, RavlN::UIntT i) -> VectorC
        Nth(SampleOfVectorC self, RavlN::UIntT i) -> VectorC
        """
        return _Ravl.SampleOfVectorC_Nth(self, *args)

    def Pick(self):
        """Pick(SampleOfVectorC self) -> VectorC"""
        return _Ravl.SampleOfVectorC_Pick(self)

    def Sample(self, *args):
        """
        Sample(SampleOfVectorC self) -> VectorC
        Sample(SampleOfVectorC self) -> VectorC
        """
        return _Ravl.SampleOfVectorC_Sample(self, *args)

    def First(self, *args):
        """
        First(SampleOfVectorC self) -> VectorC
        First(SampleOfVectorC self) -> VectorC
        """
        return _Ravl.SampleOfVectorC_First(self, *args)

    def Last(self, *args):
        """
        Last(SampleOfVectorC self) -> VectorC
        Last(SampleOfVectorC self) -> VectorC
        """
        return _Ravl.SampleOfVectorC_Last(self, *args)

    def IsEmpty(self):
        """IsEmpty(SampleOfVectorC self) -> bool"""
        return _Ravl.SampleOfVectorC_IsEmpty(self)

    def IsValid(self):
        """IsValid(SampleOfVectorC self) -> bool"""
        return _Ravl.SampleOfVectorC_IsValid(self)

    def __getitem__(self, *args):
        """__getitem__(SampleOfVectorC self, size_t i) -> VectorC"""
        return _Ravl.SampleOfVectorC___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(SampleOfVectorC self, size_t i, VectorC v)"""
        return _Ravl.SampleOfVectorC___setitem__(self, *args)

    def __str__(self):
        """__str__(SampleOfVectorC self) -> char const *"""
        return _Ravl.SampleOfVectorC___str__(self)

    __swig_destroy__ = _Ravl.delete_SampleOfVectorC
    __del__ = lambda self : None;
SampleOfVectorC_swigregister = _Ravl.SampleOfVectorC_swigregister
SampleOfVectorC_swigregister(SampleOfVectorC)

DATASET_NORMALISE_NONE = _Ravl.DATASET_NORMALISE_NONE
DATASET_NORMALISE_MEAN = _Ravl.DATASET_NORMALISE_MEAN
DATASET_NORMALISE_SCALE = _Ravl.DATASET_NORMALISE_SCALE
class SampleVectorC(SampleOfVectorC):
    """Proxy of C++ RavlN::SampleVectorC class"""
    __swig_setmethods__ = {}
    for _s in [SampleOfVectorC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleVectorC, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleOfVectorC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SampleVectorC self, RavlN::SizeT maxSize=10) -> SampleVectorC
        __init__(RavlN::SampleVectorC self) -> SampleVectorC
        __init__(RavlN::SampleVectorC self, SArray1dVectorC dat) -> SampleVectorC
        __init__(RavlN::SampleVectorC self, SampleOfVectorC svec) -> SampleVectorC
        __init__(RavlN::SampleVectorC self, SampleOfVectorC svec, SArray1dIndexC featureSet) -> SampleVectorC
        __init__(RavlN::SampleVectorC self, MeanCovarianceC meanCovariance) -> SampleVectorC
        """
        this = _Ravl.new_SampleVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def VectorSize(self):
        """VectorSize(SampleVectorC self) -> RavlN::UIntT"""
        return _Ravl.SampleVectorC_VectorSize(self)

    def Mean(self, *args):
        """
        Mean(SampleVectorC self) -> VectorC
        Mean(SampleVectorC self, RavlN::SampleC< RavlN::RealT > const & weights) -> VectorC
        """
        return _Ravl.SampleVectorC_Mean(self, *args)

    def MeanCovariance(self, *args):
        """
        MeanCovariance(SampleVectorC self, bool sampleStatistics=True) -> MeanCovarianceC
        MeanCovariance(SampleVectorC self) -> MeanCovarianceC
        MeanCovariance(SampleVectorC self, RavlN::SampleC< RavlN::RealT > const & weights, bool sampleStatistics=True) -> MeanCovarianceC
        MeanCovariance(SampleVectorC self, RavlN::SampleC< RavlN::RealT > const & weights) -> MeanCovarianceC
        """
        return _Ravl.SampleVectorC_MeanCovariance(self, *args)

    def SumOuterProducts(self, *args):
        """
        SumOuterProducts(SampleVectorC self) -> MatrixRUTC
        SumOuterProducts(SampleVectorC self, RavlN::SampleC< RavlN::RealT > const & w) -> MatrixRUTC
        """
        return _Ravl.SampleVectorC_SumOuterProducts(self, *args)

    def TMul(self, *args):
        """
        TMul(SampleVectorC self, SampleOfVectorC sam2) -> MatrixC
        TMul(SampleVectorC self, SampleOfVectorC sam2, RavlN::SampleC< RavlN::RealT > const & w) -> MatrixC
        """
        return _Ravl.SampleVectorC_TMul(self, *args)

    def Normalise(self, *args):
        """
        Normalise(SampleVectorC self, RavlN::DataSetNormaliseT normType) -> FunctionC
        Normalise(SampleVectorC self, FunctionC func)
        """
        return _Ravl.SampleVectorC_Normalise(self, *args)

    __swig_destroy__ = _Ravl.delete_SampleVectorC
    __del__ = lambda self : None;
SampleVectorC_swigregister = _Ravl.SampleVectorC_swigregister
SampleVectorC_swigregister(SampleVectorC)

class SampleLabelC(SampleOfUInt):
    """Proxy of C++ RavlN::SampleLabelC class"""
    __swig_setmethods__ = {}
    for _s in [SampleOfUInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleLabelC, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleOfUInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleLabelC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::SampleLabelC self, RavlN::SizeT maxSize=10) -> SampleLabelC
        __init__(RavlN::SampleLabelC self) -> SampleLabelC
        __init__(RavlN::SampleLabelC self, SArray1dUInt dat) -> SampleLabelC
        __init__(RavlN::SampleLabelC self, SampleOfUInt sample) -> SampleLabelC
        """
        this = _Ravl.new_SampleLabelC(*args)
        try: self.this.append(this)
        except: self.this = this
    def MaxValue(self):
        """MaxValue(SampleLabelC self) -> RavlN::UIntT"""
        return _Ravl.SampleLabelC_MaxValue(self)

    def LabelSums(self):
        """LabelSums(SampleLabelC self) -> SArray1dUInt"""
        return _Ravl.SampleLabelC_LabelSums(self)

    def SampleVector(self, *args):
        """
        SampleVector(SampleLabelC self, RavlN::RealT inClass=1, RavlN::RealT outClass=0, RavlN::IntT maxLabel=-1) -> SampleOfVectorC
        SampleVector(SampleLabelC self, RavlN::RealT inClass=1, RavlN::RealT outClass=0) -> SampleOfVectorC
        SampleVector(SampleLabelC self, RavlN::RealT inClass=1) -> SampleOfVectorC
        SampleVector(SampleLabelC self) -> SampleOfVectorC
        """
        return _Ravl.SampleLabelC_SampleVector(self, *args)

    def SetClassName(self, *args):
        """SetClassName(SampleLabelC self, RavlN::UIntT label, StringC className) -> bool"""
        return _Ravl.SampleLabelC_SetClassName(self, *args)

    def GetClassName(self, *args):
        """GetClassName(SampleLabelC self, RavlN::UIntT label, StringC className) -> bool"""
        return _Ravl.SampleLabelC_GetClassName(self, *args)

    def Label2ClassNames(self):
        """Label2ClassNames(SampleLabelC self) -> RavlN::RCHashC< RavlN::UIntT,RavlN::StringC > const &"""
        return _Ravl.SampleLabelC_Label2ClassNames(self)

    __swig_destroy__ = _Ravl.delete_SampleLabelC
    __del__ = lambda self : None;
SampleLabelC_swigregister = _Ravl.SampleLabelC_swigregister
SampleLabelC_swigregister(SampleLabelC)

class DataSetBaseC(_object):
    """Proxy of C++ RavlN::DataSetBaseC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetBaseC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetBaseC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::DataSetBaseC self) -> DataSetBaseC"""
        this = _Ravl.new_DataSetBaseC()
        try: self.this.append(this)
        except: self.this = this
    def Shuffle(self):
        """Shuffle(DataSetBaseC self)"""
        return _Ravl.DataSetBaseC_Shuffle(self)

    __swig_destroy__ = _Ravl.delete_DataSetBaseC
    __del__ = lambda self : None;
DataSetBaseC_swigregister = _Ravl.DataSetBaseC_swigregister
DataSetBaseC_swigregister(DataSetBaseC)

class DataSet1SampleVectorC(DataSetBaseC):
    """Proxy of C++ RavlN::DataSet1C<(RavlN::SampleVectorC)> class"""
    __swig_setmethods__ = {}
    for _s in [DataSetBaseC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet1SampleVectorC, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSetBaseC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet1SampleVectorC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DataSet1C<(RavlN::SampleVectorC)> self) -> DataSet1SampleVectorC
        __init__(RavlN::DataSet1C<(RavlN::SampleVectorC)> self, RavlN::UIntT sizeEstimate) -> DataSet1SampleVectorC
        __init__(RavlN::DataSet1C<(RavlN::SampleVectorC)> self, SampleVectorC dat) -> DataSet1SampleVectorC
        """
        this = _Ravl.new_DataSet1SampleVectorC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Sample1(self, *args):
        """
        Sample1(DataSet1SampleVectorC self) -> SampleVectorC
        Sample1(DataSet1SampleVectorC self) -> SampleVectorC
        """
        return _Ravl.DataSet1SampleVectorC_Sample1(self, *args)

    def Append(self, *args):
        """
        Append(DataSet1SampleVectorC self, RavlN::DataSet1C< RavlN::SampleVectorC >::Element1T const & data) -> IndexC
        Append(DataSet1SampleVectorC self, DataSet1SampleVectorC data)
        """
        return _Ravl.DataSet1SampleVectorC_Append(self, *args)

    def ExtractSample(self, *args):
        """ExtractSample(DataSet1SampleVectorC self, RavlN::RealT proportion) -> DataSet1SampleVectorC"""
        return _Ravl.DataSet1SampleVectorC_ExtractSample(self, *args)

    def Size(self):
        """Size(DataSet1SampleVectorC self) -> RavlN::UIntT"""
        return _Ravl.DataSet1SampleVectorC_Size(self)

    __swig_destroy__ = _Ravl.delete_DataSet1SampleVectorC
    __del__ = lambda self : None;
DataSet1SampleVectorC_swigregister = _Ravl.DataSet1SampleVectorC_swigregister
DataSet1SampleVectorC_swigregister(DataSet1SampleVectorC)

class DataSet2SampleVectorSampleLabelC(DataSet1SampleVectorC):
    """Proxy of C++ RavlN::DataSet2C<(RavlN::SampleVectorC,RavlN::SampleLabelC)> class"""
    __swig_setmethods__ = {}
    for _s in [DataSet1SampleVectorC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet2SampleVectorSampleLabelC, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSet1SampleVectorC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet2SampleVectorSampleLabelC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DataSet2C<(RavlN::SampleVectorC,RavlN::SampleLabelC)> self) -> DataSet2SampleVectorSampleLabelC
        __init__(RavlN::DataSet2C<(RavlN::SampleVectorC,RavlN::SampleLabelC)> self, RavlN::UIntT sizeEstimate) -> DataSet2SampleVectorSampleLabelC
        __init__(RavlN::DataSet2C<(RavlN::SampleVectorC,RavlN::SampleLabelC)> self, SampleVectorC dat1, SampleLabelC dat2) -> DataSet2SampleVectorSampleLabelC
        """
        this = _Ravl.new_DataSet2SampleVectorSampleLabelC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Sample2(self, *args):
        """
        Sample2(DataSet2SampleVectorSampleLabelC self) -> SampleLabelC
        Sample2(DataSet2SampleVectorSampleLabelC self) -> SampleLabelC
        """
        return _Ravl.DataSet2SampleVectorSampleLabelC_Sample2(self, *args)

    def Append(self, *args):
        """
        Append(DataSet2SampleVectorSampleLabelC self, RavlN::DataSet2C< RavlN::SampleVectorC,RavlN::SampleLabelC >::Element1T const & data1, 
            RavlN::DataSet2C< RavlN::SampleVectorC,RavlN::SampleLabelC >::Element2T const & data2) -> IndexC
        Append(DataSet2SampleVectorSampleLabelC self, DataSet2SampleVectorSampleLabelC data)
        Append(DataSet2SampleVectorSampleLabelC self, RavlN::SampleC< RavlN::DataSet2C< RavlN::SampleVectorC,RavlN::SampleLabelC >::Element1T > const & sample1, 
            RavlN::DataSet2C< RavlN::SampleVectorC,RavlN::SampleLabelC >::Element2T const & element2)
        """
        return _Ravl.DataSet2SampleVectorSampleLabelC_Append(self, *args)

    def ExtractSample(self, *args):
        """ExtractSample(DataSet2SampleVectorSampleLabelC self, RavlN::RealT proportion) -> DataSet2SampleVectorSampleLabelC"""
        return _Ravl.DataSet2SampleVectorSampleLabelC_ExtractSample(self, *args)

    __swig_destroy__ = _Ravl.delete_DataSet2SampleVectorSampleLabelC
    __del__ = lambda self : None;
DataSet2SampleVectorSampleLabelC_swigregister = _Ravl.DataSet2SampleVectorSampleLabelC_swigregister
DataSet2SampleVectorSampleLabelC_swigregister(DataSet2SampleVectorSampleLabelC)

class DataSetVectorLabelC(DataSet2SampleVectorSampleLabelC):
    """Proxy of C++ RavlN::DataSetVectorLabelC class"""
    __swig_setmethods__ = {}
    for _s in [DataSet2SampleVectorSampleLabelC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetVectorLabelC, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSet2SampleVectorSampleLabelC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetVectorLabelC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DataSetVectorLabelC self) -> DataSetVectorLabelC
        __init__(RavlN::DataSetVectorLabelC self, DataSet2SampleVectorSampleLabelC dataSet) -> DataSetVectorLabelC
        __init__(RavlN::DataSetVectorLabelC self, RavlN::UIntT sizeEstimate) -> DataSetVectorLabelC
        __init__(RavlN::DataSetVectorLabelC self, SampleVectorC vec, SampleLabelC lab) -> DataSetVectorLabelC
        __init__(RavlN::DataSetVectorLabelC self, RavlN::SArray1dC< RavlN::MeanCovarianceC > const & stats) -> DataSetVectorLabelC
        """
        this = _Ravl.new_DataSetVectorLabelC(*args)
        try: self.this.append(this)
        except: self.this = this
    def SeperateLabels(self):
        """SeperateLabels(DataSetVectorLabelC self) -> RavlN::SArray1dC< RavlN::SampleVectorC >"""
        return _Ravl.DataSetVectorLabelC_SeperateLabels(self)

    def GlobalMean(self):
        """GlobalMean(DataSetVectorLabelC self) -> VectorC"""
        return _Ravl.DataSetVectorLabelC_GlobalMean(self)

    def ClassMeans(self):
        """ClassMeans(DataSetVectorLabelC self) -> SArray1dVectorC"""
        return _Ravl.DataSetVectorLabelC_ClassMeans(self)

    def ClassMeansLabels(self):
        """ClassMeansLabels(DataSetVectorLabelC self) -> DataSetVectorLabelC"""
        return _Ravl.DataSetVectorLabelC_ClassMeansLabels(self)

    def ClassNums(self):
        """ClassNums(DataSetVectorLabelC self) -> SArray1dUInt"""
        return _Ravl.DataSetVectorLabelC_ClassNums(self)

    def ClassStats(self, sampleStatistics=True):
        """
        ClassStats(DataSetVectorLabelC self, bool sampleStatistics=True) -> RavlN::SArray1dC< RavlN::MeanCovarianceC >
        ClassStats(DataSetVectorLabelC self) -> RavlN::SArray1dC< RavlN::MeanCovarianceC >
        """
        return _Ravl.DataSetVectorLabelC_ClassStats(self, sampleStatistics)

    def BetweenClassScatter(self):
        """BetweenClassScatter(DataSetVectorLabelC self) -> MatrixC"""
        return _Ravl.DataSetVectorLabelC_BetweenClassScatter(self)

    def WithinClassScatter(self, sampleStatistics=False):
        """
        WithinClassScatter(DataSetVectorLabelC self, bool sampleStatistics=False) -> MatrixC
        WithinClassScatter(DataSetVectorLabelC self) -> MatrixC
        """
        return _Ravl.DataSetVectorLabelC_WithinClassScatter(self, sampleStatistics)

    def ExtractPerLabel(self, *args):
        """ExtractPerLabel(DataSetVectorLabelC self, RavlN::UIntT numSamples) -> DataSetVectorLabelC"""
        return _Ravl.DataSetVectorLabelC_ExtractPerLabel(self, *args)

    def ExtractSample(self, *args):
        """ExtractSample(DataSetVectorLabelC self, RavlN::RealT proportion) -> DataSetVectorLabelC"""
        return _Ravl.DataSetVectorLabelC_ExtractSample(self, *args)

    def __str__(self):
        """__str__(DataSetVectorLabelC self) -> char const *"""
        return _Ravl.DataSetVectorLabelC___str__(self)

    __swig_destroy__ = _Ravl.delete_DataSetVectorLabelC
    __del__ = lambda self : None;
DataSetVectorLabelC_swigregister = _Ravl.DataSetVectorLabelC_swigregister
DataSetVectorLabelC_swigregister(DataSetVectorLabelC)


def CreateDataSet(dimension=2, classes=2, samplesPerClass=1000, dist=3.0):
  """
    CreateDataSet(RavlN::UIntT dimension=2, RavlN::UIntT classes=2, RavlN::UIntT samplesPerClass=1000, 
        RavlN::RealT dist=3.0) -> DataSetVectorLabelC
    CreateDataSet(RavlN::UIntT dimension=2, RavlN::UIntT classes=2, RavlN::UIntT samplesPerClass=1000) -> DataSetVectorLabelC
    CreateDataSet(RavlN::UIntT dimension=2, RavlN::UIntT classes=2) -> DataSetVectorLabelC
    CreateDataSet(RavlN::UIntT dimension=2) -> DataSetVectorLabelC
    CreateDataSet() -> DataSetVectorLabelC
    """
  return _Ravl.CreateDataSet(dimension, classes, samplesPerClass, dist)

def SaveDataSetVectorLabel(*args):
  """SaveDataSetVectorLabel(StringC filename, DataSetVectorLabelC dataset) -> bool"""
  return _Ravl.SaveDataSetVectorLabel(*args)
def LoadDataSet(filename):
	"""
	Load a Ravl data set from file
	"""
	dataSet = DataSetVectorLabelC()
	if LoadDataSetVectorLabel(filename, dataSet) == False:
		raise RuntimeError("Unable to load dataset")
	return dataSet 
	
def SaveDataSet(filename, dataSet):
	"""
	Save a Ravl data set to file
	"""
	if SaveDataSetVectorLabel(filename, dataSet) == False:
		raise RuntimeError("Failed to save dataset")
	return False 


def LoadDataSetVectorLabel(*args):
  """
    LoadDataSetVectorLabel(StringC filename, DataSetVectorLabelC dataset) -> bool
    LoadDataSetVectorLabel(StringC dataSetFile, bool shuffle, bool equaliseSamples, RavlN::UIntT samplesPerClass, 
        SArray1dIndexC features, FunctionC normaliseFunc, DataSetVectorLabelC dataSet) -> bool
    LoadDataSetVectorLabel(StringC dataSetFile, bool shuffle, bool equaliseSamples, RavlN::UIntT samplesPerClass, 
        SArray1dIndexC features, RavlN::DataSetNormaliseT normType, FunctionC normaliseFunc, 
        DataSetVectorLabelC dataSet) -> bool
    """
  return _Ravl.LoadDataSetVectorLabel(*args)

def SaveDataSetVectorLabelCSV(*args):
  """SaveDataSetVectorLabelCSV(StringC filename, DataSetVectorLabelC dataset) -> bool"""
  return _Ravl.SaveDataSetVectorLabelCSV(*args)

def LoadDataSetVectorLabelCSV(*args):
  """LoadDataSetVectorLabelCSV(StringC filename, DataSetVectorLabelC dataset) -> bool"""
  return _Ravl.LoadDataSetVectorLabelCSV(*args)
class ClassifierDiscriminantFunctionC(ClassifierC):
    """Proxy of C++ RavlN::ClassifierDiscriminantFunctionC class"""
    __swig_setmethods__ = {}
    for _s in [ClassifierC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassifierDiscriminantFunctionC, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassifierC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassifierDiscriminantFunctionC, name)
    __repr__ = _swig_repr
    def Discriminant(self):
        """Discriminant(ClassifierDiscriminantFunctionC self) -> FunctionC"""
        return _Ravl.ClassifierDiscriminantFunctionC_Discriminant(self)

    def __init__(self): 
        """__init__(RavlN::ClassifierDiscriminantFunctionC self) -> ClassifierDiscriminantFunctionC"""
        this = _Ravl.new_ClassifierDiscriminantFunctionC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_ClassifierDiscriminantFunctionC
    __del__ = lambda self : None;
ClassifierDiscriminantFunctionC_swigregister = _Ravl.ClassifierDiscriminantFunctionC_swigregister
ClassifierDiscriminantFunctionC_swigregister(ClassifierDiscriminantFunctionC)

class DesignFunctionSupervisedC(_object):
    """Proxy of C++ RavlN::DesignFunctionSupervisedC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignFunctionSupervisedC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignFunctionSupervisedC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DesignFunctionSupervisedC self) -> DesignFunctionSupervisedC
        __init__(RavlN::DesignFunctionSupervisedC self, DesignFunctionSupervisedC other) -> DesignFunctionSupervisedC
        """
        this = _Ravl.new_DesignFunctionSupervisedC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Apply(self, *args):
        """
        Apply(DesignFunctionSupervisedC self, SampleOfVectorC data, SampleOfVectorC out) -> FunctionC
        Apply(DesignFunctionSupervisedC self, SampleOfVectorC data, SampleOfVectorC out, RavlN::SampleC< RavlN::RealT > const & weight) -> FunctionC
        Apply(DesignFunctionSupervisedC self, RavlN::SampleC< RavlN::TVectorC< float > > const & data, RavlN::SampleC< RavlN::TVectorC< float > > const & out) -> FunctionC
        Apply(DesignFunctionSupervisedC self, RavlN::SampleC< RavlN::TVectorC< float > > const & data, RavlN::SampleC< RavlN::TVectorC< float > > const & out, 
            RavlN::SampleC< float > const & weight) -> FunctionC
        """
        return _Ravl.DesignFunctionSupervisedC_Apply(self, *args)

    __swig_destroy__ = _Ravl.delete_DesignFunctionSupervisedC
    __del__ = lambda self : None;
DesignFunctionSupervisedC_swigregister = _Ravl.DesignFunctionSupervisedC_swigregister
DesignFunctionSupervisedC_swigregister(DesignFunctionSupervisedC)

class DesignFuncLSQC(DesignFunctionSupervisedC):
    """Proxy of C++ RavlN::DesignFuncLSQC class"""
    __swig_setmethods__ = {}
    for _s in [DesignFunctionSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignFuncLSQC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignFunctionSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignFuncLSQC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlN::DesignFuncLSQC self, RavlN::UIntT order, bool orthogonal) -> DesignFuncLSQC"""
        this = _Ravl.new_DesignFuncLSQC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignFuncLSQC
    __del__ = lambda self : None;
DesignFuncLSQC_swigregister = _Ravl.DesignFuncLSQC_swigregister
DesignFuncLSQC_swigregister(DesignFuncLSQC)

class DesignClassifierSupervisedC(_object):
    """Proxy of C++ RavlN::DesignClassifierSupervisedC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignClassifierSupervisedC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignClassifierSupervisedC, name)
    __repr__ = _swig_repr
    def Apply(self, *args):
        """
        Apply(DesignClassifierSupervisedC self, SampleOfVectorC data, SampleOfUInt out) -> ClassifierC
        Apply(DesignClassifierSupervisedC self, SampleOfVectorC data, SampleOfUInt out, RavlN::SampleC< RavlN::RealT > const & weight) -> ClassifierC
        Apply(DesignClassifierSupervisedC self, SampleOfVectorC data, SampleOfUInt out, SArray1dIndexC featureSet) -> ClassifierC
        Apply(DesignClassifierSupervisedC self, SampleOfVectorC data, SampleOfUInt out, SArray1dIndexC featureSet, RavlN::SampleC< RavlN::RealT > const & weight) -> ClassifierC
        Apply(DesignClassifierSupervisedC self, DataSetVectorLabelC dset) -> ClassifierC
        """
        return _Ravl.DesignClassifierSupervisedC_Apply(self, *args)

    def __init__(self): 
        """__init__(RavlN::DesignClassifierSupervisedC self) -> DesignClassifierSupervisedC"""
        this = _Ravl.new_DesignClassifierSupervisedC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignClassifierSupervisedC
    __del__ = lambda self : None;
DesignClassifierSupervisedC_swigregister = _Ravl.DesignClassifierSupervisedC_swigregister
DesignClassifierSupervisedC_swigregister(DesignClassifierSupervisedC)

class DesignDiscriminantFunctionC(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignDiscriminantFunctionC class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignDiscriminantFunctionC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignDiscriminantFunctionC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlN::DesignDiscriminantFunctionC self, DesignFunctionSupervisedC designFunc) -> DesignDiscriminantFunctionC"""
        this = _Ravl.new_DesignDiscriminantFunctionC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignDiscriminantFunctionC
    __del__ = lambda self : None;
DesignDiscriminantFunctionC_swigregister = _Ravl.DesignDiscriminantFunctionC_swigregister
DesignDiscriminantFunctionC_swigregister(DesignDiscriminantFunctionC)

class DesignKNearestNeighbourC(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignKNearestNeighbourC class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignKNearestNeighbourC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignKNearestNeighbourC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlN::DesignKNearestNeighbourC self, RavlN::UIntT k) -> DesignKNearestNeighbourC"""
        this = _Ravl.new_DesignKNearestNeighbourC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignKNearestNeighbourC
    __del__ = lambda self : None;
DesignKNearestNeighbourC_swigregister = _Ravl.DesignKNearestNeighbourC_swigregister
DesignKNearestNeighbourC_swigregister(DesignKNearestNeighbourC)

class DesignClassifierNeuralNetwork2C(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignClassifierNeuralNetwork2C class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignClassifierNeuralNetwork2C, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignClassifierNeuralNetwork2C, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation, RavlN::RealT regularisation=0, 
            RavlN::RealT desiredError=0.00001, RavlN::UIntT maxEpochs=5000, 
            RavlN::UIntT displayEpochs=0, bool useSigmoid=True, RavlN::UIntT threads=1) -> DesignClassifierNeuralNetwork2C
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation, RavlN::RealT regularisation=0, 
            RavlN::RealT desiredError=0.00001, RavlN::UIntT maxEpochs=5000, 
            RavlN::UIntT displayEpochs=0, bool useSigmoid=True) -> DesignClassifierNeuralNetwork2C
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation, RavlN::RealT regularisation=0, 
            RavlN::RealT desiredError=0.00001, RavlN::UIntT maxEpochs=5000, 
            RavlN::UIntT displayEpochs=0) -> DesignClassifierNeuralNetwork2C
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation, RavlN::RealT regularisation=0, 
            RavlN::RealT desiredError=0.00001, RavlN::UIntT maxEpochs=5000) -> DesignClassifierNeuralNetwork2C
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation, RavlN::RealT regularisation=0, 
            RavlN::RealT desiredError=0.00001) -> DesignClassifierNeuralNetwork2C
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation, RavlN::RealT regularisation=0) -> DesignClassifierNeuralNetwork2C
        __init__(RavlN::DesignClassifierNeuralNetwork2C self, RavlN::UIntT nLayers, RavlN::UIntT nHidden, bool doNormalisation) -> DesignClassifierNeuralNetwork2C
        """
        this = _Ravl.new_DesignClassifierNeuralNetwork2C(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignClassifierNeuralNetwork2C
    __del__ = lambda self : None;
DesignClassifierNeuralNetwork2C_swigregister = _Ravl.DesignClassifierNeuralNetwork2C_swigregister
DesignClassifierNeuralNetwork2C_swigregister(DesignClassifierNeuralNetwork2C)

class DesignClassifierLogisticRegressionC(DesignClassifierSupervisedC):
    """Proxy of C++ RavlN::DesignClassifierLogisticRegressionC class"""
    __swig_setmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignClassifierLogisticRegressionC, name, value)
    __swig_getmethods__ = {}
    for _s in [DesignClassifierSupervisedC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignClassifierLogisticRegressionC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RavlN::DesignClassifierLogisticRegressionC self, RavlN::RealT regularisation) -> DesignClassifierLogisticRegressionC"""
        this = _Ravl.new_DesignClassifierLogisticRegressionC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DesignClassifierLogisticRegressionC
    __del__ = lambda self : None;
DesignClassifierLogisticRegressionC_swigregister = _Ravl.DesignClassifierLogisticRegressionC_swigregister
DesignClassifierLogisticRegressionC_swigregister(DesignClassifierLogisticRegressionC)

class ErrorC(_object):
    """Proxy of C++ RavlN::ErrorC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::ErrorC self) -> ErrorC"""
        this = _Ravl.new_ErrorC()
        try: self.this.append(this)
        except: self.this = this
    def Error(self, *args):
        """Error(ErrorC self, ClassifierC classifier, DataSetVectorLabelC dset) -> RavlN::RealT"""
        return _Ravl.ErrorC_Error(self, *args)

    __swig_destroy__ = _Ravl.delete_ErrorC
    __del__ = lambda self : None;
ErrorC_swigregister = _Ravl.ErrorC_swigregister
ErrorC_swigregister(ErrorC)

class ErrorBinaryClassifierC(ErrorC):
    """Proxy of C++ RavlN::ErrorBinaryClassifierC class"""
    __swig_setmethods__ = {}
    for _s in [ErrorC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorBinaryClassifierC, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorBinaryClassifierC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RavlN::ErrorBinaryClassifierC self) -> ErrorBinaryClassifierC"""
        this = _Ravl.new_ErrorBinaryClassifierC()
        try: self.this.append(this)
        except: self.this = this
    def FalseRejectRate(self, *args):
        """FalseRejectRate(ErrorBinaryClassifierC self, ClassifierC classifier, DataSetVectorLabelC dset, double falseAcceptRate) -> RavlN::RealT"""
        return _Ravl.ErrorBinaryClassifierC_FalseRejectRate(self, *args)

    def FalseAcceptRate(self, *args):
        """FalseAcceptRate(ErrorBinaryClassifierC self, ClassifierC classifier, DataSetVectorLabelC dset, double falseRejectRate) -> RavlN::RealT"""
        return _Ravl.ErrorBinaryClassifierC_FalseAcceptRate(self, *args)

    __swig_destroy__ = _Ravl.delete_ErrorBinaryClassifierC
    __del__ = lambda self : None;
ErrorBinaryClassifierC_swigregister = _Ravl.ErrorBinaryClassifierC_swigregister
ErrorBinaryClassifierC_swigregister(ErrorBinaryClassifierC)

class GnuPlot2dC(_object):
    """Proxy of C++ RavlN::GnuPlot2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnuPlot2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnuPlot2dC, name)
    __repr__ = _swig_repr
    def __init__(self, title="My Plot"): 
        """
        __init__(RavlN::GnuPlot2dC self, StringC title="My Plot") -> GnuPlot2dC
        __init__(RavlN::GnuPlot2dC self) -> GnuPlot2dC
        """
        this = _Ravl.new_GnuPlot2dC(title)
        try: self.this.append(this)
        except: self.this = this
    def Plot(self, *args):
        """
        Plot(GnuPlot2dC self, SArray1dPoint2dC points, StringC dataName="") -> bool
        Plot(GnuPlot2dC self, SArray1dPoint2dC points) -> bool
        Plot(GnuPlot2dC self, RCHashStringPointsC data) -> bool
        Plot(GnuPlot2dC self, StringC function) -> bool
        Plot(GnuPlot2dC self, DataSetVectorLabelC dataSet, RavlN::UIntT fv1=0, RavlN::UIntT fv2=1, RavlN::UIntT samplesPerClass=0) -> bool
        Plot(GnuPlot2dC self, DataSetVectorLabelC dataSet, RavlN::UIntT fv1=0, RavlN::UIntT fv2=1) -> bool
        Plot(GnuPlot2dC self, DataSetVectorLabelC dataSet, RavlN::UIntT fv1=0) -> bool
        Plot(GnuPlot2dC self, DataSetVectorLabelC dataSet) -> bool
        """
        return _Ravl.GnuPlot2dC_Plot(self, *args)

    def SetXLabel(self, *args):
        """SetXLabel(GnuPlot2dC self, StringC xlabel) -> bool"""
        return _Ravl.GnuPlot2dC_SetXLabel(self, *args)

    def SetYLabel(self, *args):
        """SetYLabel(GnuPlot2dC self, StringC ylabel) -> bool"""
        return _Ravl.GnuPlot2dC_SetYLabel(self, *args)

    def SetXRange(self, *args):
        """SetXRange(GnuPlot2dC self, RealRangeC xrange) -> bool"""
        return _Ravl.GnuPlot2dC_SetXRange(self, *args)

    def SetYRange(self, *args):
        """SetYRange(GnuPlot2dC self, RealRangeC yrange) -> bool"""
        return _Ravl.GnuPlot2dC_SetYRange(self, *args)

    def SetLineStyle(self, *args):
        """SetLineStyle(GnuPlot2dC self, StringC lineStyle) -> bool"""
        return _Ravl.GnuPlot2dC_SetLineStyle(self, *args)

    def SetOutput(self, *args):
        """
        SetOutput(GnuPlot2dC self, StringC output, IndexRange2dC rec=RavlN::IndexRange2dC(512, 512)) -> bool
        SetOutput(GnuPlot2dC self, StringC output) -> bool
        """
        return _Ravl.GnuPlot2dC_SetOutput(self, *args)

    def Command(self, *args):
        """Command(GnuPlot2dC self, StringC command) -> bool"""
        return _Ravl.GnuPlot2dC_Command(self, *args)

    __swig_destroy__ = _Ravl.delete_GnuPlot2dC
    __del__ = lambda self : None;
GnuPlot2dC_swigregister = _Ravl.GnuPlot2dC_swigregister
GnuPlot2dC_swigregister(GnuPlot2dC)

def Plot(data, title = "My Data"):
	"""
	Try to automatically plot anything then GnuPlot2d is capable of
	"""
	gnuplot = GnuPlot2dC(title)
	gnuplot.Plot(data)
	return gnuplot 
	
def PlotFile(data, filename, title = "My Data", rows=750, cols=1000):
	"""
	Try to automatically plot anything as an image and save it to file that GnuPlot2d is capable of.
	"""
	gnuplot = GnuPlot2dC(title)
	rec = IndexRange2dC(rows, cols);
	gnuplot.SetOutput(filename, rec)
	gnuplot.Plot(data)
	return gnuplot

# This file is compatible with both classic and new-style classes.


