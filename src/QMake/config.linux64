###########################
# Make info for solaris systems
# $Id$

#######################
# Programs to use.

ifdef GCCPATH
 GCCPATH:=$(strip $(GCCPATH))#
 RAVL_CC  = $(GCCPATH)/bin/gcc -B$(GCCPATH)/bin
 RAVL_CXX = $(GCCPATH)/bin/g++ -B$(GCCPATH)/bin
 EXTRA_LDFLAGS += -Wl,-rpath=$(GCCPATH)/lib
endif

ifdef RAVL_CC
 CC = $(RAVL_CC)
else
 CC = gcc
endif

ifdef RAVL_CXX
 CXX = $(RAVL_CXX) 
else 
 CXX = g++
endif 

MKDEPFLAGS = -MM

ifdef RAVL_AR
 AR = $(RAVL_AR) 
else 
 AR = ar
endif 

ifndef XARGS 
 XARGS = xargs 
endif 

ifndef TR 
 TR = tr	
endif 

ifndef DYNAMICFLAG
 DYNAMICFLAG = -rdynamic 
endif 

ARFLAGS = ruc
MKDIR = mkdir -p
CP = cp
CHMOD = chmod
TOUCH=/bin/touch
RM=rm

LIBPATHSWITCH = -Wl,-rpath=#

AMKDEPFLAGS = -Wp,-MMD,$(WORKTMP)/$*.d
MKDEPUP = echo -n '$$(INST_OBJS)/' > $(INST_DEPEND)/$*.d ; cat $(WORKTMP)/$*.d  >> $(INST_DEPEND)/$*.d ; \
 rm $(WORKTMP)/$*.d

NOLIBRARYPRELINK=1



############################
# Universal flags.

CFLAGS   = -Wall -pipe -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE
CFLAGS   += $(EXTRA_CFLAGS) 

CCFLAGS  = -pipe -Wall -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE 
CCFLAGS  += $(EXTRA_CCFLAGS)

CCPPFLAGS= -DGNU -Dunix
CPPFLAGS = -DGNU -Dunix

LDFLAGS = -B/home/charles/bin
LDFLAGS += $(EXTRA_LDFLAGS)

PAR_MAKE = --jobs=$(PROCS)

UNDEFSYMB = -u #


COMPILER_VERSION:=$(strip $(shell $(CC) -dumpversion))#
COMPILER_MAJOR_VERSION=$(basename $(COMPILER_VERSION))
COMPILER_MINOR_VERSION=$(suffix $(COMPILER_VERSION))


############################

# Optimisation Flags
#
# Add -march=native to fully optimise to your machines processor. Please be
# aware that doing this will restrict cross-machine portability of your
# binaries. Older compilers (pre 4.2 ?) do not support -march=native; with 
# these you will need to explicitly specify the appropriate processor type
# for your machine.
#

ifeq ($(COMPILER_MAJOR_VERSION),3)
 OPTFLAGS = -fno-math-errno
else
ifeq ($(COMPILER_MAJOR_VERSION),4)
# NOTE: gcc 4.x sometimes produces incorrect code (even where the aliasing rules are followed) with stict-aliasing.
# Version 2 had the issue, 7 doesn't the rest are disabled to be safe
ifneq (,$(findstring $(COMPILER_MINOR_VERSION),0 1 2 3 4 5 6))
 OPTFLAGS = -fno-math-errno -fno-strict-aliasing
else
# Version 7 onward should be fine
 OPTFLAGS = -fno-math-errno 
endif
endif
endif

# NOTE: gcc 4.x sometimes produces incorrect code (even where the aliasing rules are followed) with stict-aliasing.
ifndef OPTCFLAGS
  OPTCFLAGS  = -O2 $(OPTFLAGS) 
endif
ifndef OPTCCFLAGS
  OPTCCFLAGS = -O2 $(OPTFLAGS) 
endif
ifndef LOWOPT
  LOWOPT = -O $(OPTFLAGS) 
endif

# While using fno-math-errno breaks full standards compliance, it is used to
# give us a consistant environment across platforms as the math library on OSX
# never actually sets errno anyway. There is no point in setting this switch
# globally (i.e. in {C}CFLAGS rather than OPTC{C}FLAGS) as it is not actually
# enabled if we are not performing an optimised compile.


############################
# 'debug' variant.

ifeq ($(VAR),debug)
 CFLAGS += -g  -DQMAKE_CHECK -DQMAKE_PARANOID
 CCFLAGS += -g -DQMAKE_CHECK -DQMAKE_PARANOID
 LDFLAGS += -g  
endif

############################
# 'check' variant.

ifeq ($(VAR),check)
 CFLAGS += $(LOWOPT) -DQMAKE_CHECK
 CCFLAGS += $(LOWOPT)  -DQMAKE_CHECK
 LDFLAGS += -O 
endif

############################
# 'opt' variant.

ifeq ($(VAR),opt)
 CFLAGS += -g -fno-omit-frame-pointer $(OPTCFLAGS) 
 CCFLAGS += -g -fno-omit-frame-pointer $(OPTCFLAGS)
 LDFLAGS += -O -g 
endif

############################
# 'shared' variant.

#ifeq ($(VAR),shared)
 ifdef SHAREDBUILD
 CFLAGS += -fPIC -shared 
 CCFLAGS += -fPIC -shared  
 LDLIBFLAGS = -fPIC -shared
 LDFLAGS +=  -rdynamic  
#-Wl,-rpath=$(PROJECT_OUT)/lib/RAVL/$(ARC)/$(VAR)/shared
# -Wl,-export-dynamic
endif

############################
# 'prof' variant.

ifeq ($(VAR),prof)
 CFLAGS += -p -g $(OPTCFLAGS)
 CCFLAGS += -p -g $(OPTCFLAGS)
 LDFLAGS += -p -O2 -g
endif

############################
# 'gprof' variant.

ifeq ($(VAR),gprof)
 CFLAGS += -pg -g   $(OPTCFLAGS)
 CCFLAGS += -pg -g $(OPTCFLAGS)
 LDFLAGS += -pg -g -O2
endif


