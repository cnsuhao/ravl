
#######################
# Programs to use.

ifdef GCCPATH
 GCCPATH:=$(strip $(GCCPATH))#
 RAVL_CC  = $(GCCPATH)/bin/gcc -B$(GCCPATH)/bin
 RAVL_CXX = $(GCCPATH)/bin/g++ -B$(GCCPATH)/bin
 EXTRA_LDFLAGS += 
endif

ifdef RAVL_CC
 CC = $(RAVL_CC)
else
 CC = gcc
endif

ifdef RAVL_CXX
 CXX = $(RAVL_CXX) 
else 
 CXX = g++
endif 

MKDEPFLAGS = -MM

ifdef RAVL_AR
 AR = $(RAVL_AR) 
else 
 AR = ar
endif 

ifndef XARGS 
 XARGS = xargs 
endif 

ifndef TR 
 TR = tr	
endif 

ULF=-l#

#EXELIB := -framework libstdc++ 

SHAREDEXT=dylib#

ifndef DYNAMICFLAG
 DYNAMICFLAG = #-dynamiclib -dynamic
endif 

ARFLAGS = ruc
MKDIR = mkdir -p
CP = cp
CHMOD = chmod
TOUCH=/usr/bin/touch
RM=rm

LIBPATHSWITCH = -Wl,-F#

AMKDEPFLAGS = -Wp,-MMD,$(WORKTMP)/$*.d
MKDEPUP = /bin/bash -c "echo -n '\$$(INST_OBJS)/'" > $(INST_DEPEND)/$*.d ; cat $(WORKTMP)/$*.d  >> $(INST_DEPEND)/$*.d ; \
 rm $(WORKTMP)/$*.d

NOLIBRARYPRELINK=1

DYNAMICLIBEXT=dylib#

############################
# Universal flags.

CFLAGS   = -Wall -pipe -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -m64
CFLAGS   += $(EXTRA_CFLAGS) 

CCFLAGS  = -pipe -Wall -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -m64
CCFLAGS  += $(EXTRA_CCFLAGS)

CCPPFLAGS= -DGNU -Dunix -I /sw/include
CPPFLAGS = -DGNU -Dunix -I /sw/include
LDFLAGS = -m64
LDFLAGS += $(EXTRA_LDFLAGS)
NVCCFLAGS = -m64

PAR_MAKE = --jobs=$(PROCS)

UNDEFSYMB = -u #


COMPILER_VERSION:=$(strip $(shell $(CC) -dumpversion))#
COMPILER_MAJOR_VERSION=$(basename $(COMPILER_VERSION))


############################

# Optimisation Flags
#
# Add -march=native to fully optimise to your machines processor. Please be
# aware that doing this will restrict cross-machine portability of your
# binaries. Older compilers (pre 4.2 ?) do not support -march=native; with 
# these you will need to explicitly specify the appropriate processor type
# for your machine.
#
# The -fno-math-errno switch used on other x86 platforms is implicit on OSX as
# the math library does not set errno
#
ifeq ($(COMPILER_MAJOR_VERSION),3)
 OPTCFLAGS  = -O2
 OPTCCFLAGS = -O2
 LOWOPT = -O
else
 # NOTE: gcc 4.x sometimes produces incorrect code (even where the aliasing
 # rules are followed) with stict-aliasing.
 OPTCFLAGS= -O2 -fno-strict-aliasing
 OPTCCFLAGS= -O2 -fno-strict-aliasing
 LOWOPT = -O -fno-strict-aliasing
endif

############################
# 'debug' variant.

ifeq ($(VAR),debug)
 CFLAGS += -g  -DQMAKE_CHECK -DQMAKE_PARANOID
 CCFLAGS += -g -DQMAKE_CHECK -DQMAKE_PARANOID
 LDFLAGS += -g  
endif

############################
# 'check' variant.

ifeq ($(VAR),check)
 CFLAGS += $(LOWOPT) -DQMAKE_CHECK
 CCFLAGS += $(LOWOPT)  -DQMAKE_CHECK
 LDFLAGS += -O 
endif

############################
# 'opt' variant.

ifeq ($(VAR),opt)
 CFLAGS += -g $(OPTCFLAGS) 
 CCFLAGS += -g $(OPTCFLAGS)
 LDFLAGS += -O -g
endif

############################
# 'shared' variant.

ifdef SHAREDBUILD
 CFLAGS += -fPIC 
 CCFLAGS += -fPIC   
 LDLIBFLAGS = -dynamiclib -F$(INST_LIB)
 LDFLAGS +=
endif

############################
# 'prof' variant.

ifeq ($(VAR),prof)
 CFLAGS += -p -g $(OPTCFLAGS)
 CCFLAGS += -p -g $(OPTCFLAGS)
 LDFLAGS += -p -O2 -g
endif

############################
# 'gprof' variant.

ifeq ($(VAR),gprof)
 CFLAGS += -g $(OPTCFLAGS)
 CCFLAGS +=  -g $(OPTCFLAGS)
 LDFLAGS += -g -O2
endif


