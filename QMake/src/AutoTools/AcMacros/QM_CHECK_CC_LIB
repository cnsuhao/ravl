dnl This file is part of QMake, Quick Make System
dnl Copyright (C) 2011-16, University of Surrey
dnl This code may be redistributed under the terms of the GNU General
dnl Public License (GPL). See the gpl.licence file for details or
dnl see http://www.gnu.org/copyleft/gpl.html
dnl
dnl file-header-ends-here


dnl QM_CHECK_CC_LIB
dnl
dnl Macro to check if the given library package exits on the system. This
dnl will check for both the library itself and its header files. This macro
dnl is intended for checking those libraries that do not come with a 
dnl pkg-configure file.
dnl
dnl Macro parameters are:
dnl       p1: QMake name for library
dnl       p2: Error message. Should the user wish an unsuccessful test for
dnl           the external library package to result in an fatal error, this
dnl           parameter should contain the text to be used for the error. If
dnl           the supplied parameter is null, no error will be generated.
dnl
dnl
dnl Global variables used:
dnl
dnl   All variables listed with a <lib> in their name exist for each library
dnl   that has been declared (via a QM_DEFINE_EXTLIB_[CP]C) with the <lib>
dnl   being replaced by the resource name of the package. For example,
dnl   the OpenCV package will have variables named with_OpenCV_prq;
dnl   use_OpenCV; etc. Similarly, libGTK2 has variables use_libGTK2;
dnl   with_libGTK2_prq; etc.
dnl
dnl       use_<lib>                  Flag specifying usage of the library
dnl                                  package, <lib>. Initially primed from the
dnl                                  command line settings, this will be
dnl                                  updated to reflect the availability of
dnl                                  the library <lib>.
dnl       with_<lib>_hdr             Name(s) of the header files required to
dnl                                  compile with the library package <lib>.
dnl       with_<lib>_inc             Path (in pre-processor -I/x/y/z form) to
dnl                                  the library's headers. Variable may
dnl                                  actually include other, non-path related,
dnl                                  pre-processor settings.
dnl       with_<lib>_libpath         Path (in linker -L/x/y/z form) to the
dnl                                  location of the library files needed to
dnl                                  compile with the external library
dnl                                  package <lib>. Variable may actually
dnl                                  include other, non-path related, linker
dnl                                  settings.
dnl       with_<lib>_lnklibs         List of the library files (in -lXXXX 
dnl                                  form) needed to compile with library
dnl                                  package <lib>. For library packages that
dnl                                  vary the names of the libraries required,
dnl                                  this may be a set of alternative lists
dnl                                  separated by a pipe symbol (|). As an
dnl                                  example, the Socket package offers the
dnl                                  setting " | -lsocket | -lsocket -lnsl "
dnl                                  as the socket() function may be available
dnl                                  in the default libraries (no additional
dnl                                  library is required - hence the leading
dnl                                  " | " setting, i.e. a null list); in the
dnl                                  socket library itself; or the socket 
dnl                                  library may also depend on libnsl.
dnl       with_<lib>_prq             Space separated list of pre-requisites
dnl                                  of the external library package <lib>.
dnl       with_<lib>_tstcd           Code with which to test that the external
dnl                                  library, <lib>, will link.
dnl       <lib>_CFLAGS               Substitution variable holding the CFLAGS
dnl                                  required when compiling with the
dnl                                  external library, <lib>. 
dnl       <lib>_LIBS                 Substitution variable holding the link
dnl                                  line settings needed to link with the
dnl                                  <lib> package. This info is supplied
dnl                                  as on the link line itself  i.e. library
dnl                                  names are specified in -lX form and the
dnl                                  setting may include -Lpath entries. 
dnl       CPPFLAGS                   C preprocessor flags, temporarily
dnl                                  re-assigned during this macro as part of
dnl                                  the testing process.
dnl       preserve_CPPFLAGS          Interim variable used to preserve the
dnl                                  global CPPFLAGS settings during 
dnl                                  operation of this macro.
dnl       save_ifs                   Interim variable preserves the system
dnl                                  IFS setting while the macro manipulates
dnl                                  the active setting for processing the
dnl                                  searchlist.
dnl       IFS                        UNIX Internal Field Separator variable,
dnl                                  temporarily modified by this macro when
dnl                                  processing the searchlist.
dnl       LIB_CPPFLAGS               Interim variable used to build up the 
dnl                                  CPPFLAGS to be used when testing for the
dnl                                  header files associated with the library
dnl                                  package being tested.
dnl       LDFLAGS                    Linker flags, temporarily re-assigned
dnl                                  during this macro as part of the testing
dnl                                  process.
dnl       preserve_LDFLAGS           Interim variable used to preserve the
dnl                                  global LDFLAGS settings during operation
dnl                                  of this macro.
dnl       LIB_LDFLAGS                Interim variable used to build up the 
dnl                                  LDFLAGS to be used when testing 
dnl                                  compilation ot the library being tested.
dnl       dependencies               Interim variable used to process the
dnl                                  dependent packages required by the <lib>
dnl                                  being tested.
dnl       fix_expan                  Interim variable used to overcome the 
dnl                                  limitation over using a macro parameter
dnl                                  as part of a variable name. This macro
dnl                                  uses the first parameter to form the
dnl                                  name of several shell variables used
dnl                                  within it (eg with_$1_lnklibs). If the
dnl                                  user of the macro supplies a literal as
dnl                                  the first parameter, this poses no issue.
dnl                                  If the user wishes to use a variable,
dnl                                  then normally they would have to remember
dnl                                  to specify the variable as ${variable}
dnl                                  when making the macro call. By utilising
dnl                                  this fix_expan variable in the macro,
dnl                                  this limitation is removed and the user
dnl                                  can use $variable as is more normal.
dnl       found                      Interim variable maintains the current
dnl                                  success or failure of the library check.
dnl       hf                         Interim iterator, used while checking
dnl                                  for the library package's header files.
dnl       new_prereqlib              Interim variable used when determining
dnl                                  the libraries to be added to the link
dnl                                  line for a particular pre-requisite.
dnl       preamble                   Interim variable used to include all of
dnl                                  the external library header files in the
dnl                                  source used for the link test
dnl       prereqlibs                 Interim variable that receives all the
dnl                                  libraries that must be used during the
dnl                                  test link, so that the pre-requisites
dnl                                  are satisfied.
dnl       prereqlib                  Interim iterator for processing the
dnl                                  pre-requisite library packages.
dnl       TRACE_INDENT               Variable used for indenting trace debug
dnl                                  messages (when DBG is set). The current
dnl                                  convention in this script is to employ
dnl                                  an indent of 5 spaces per level of 
dnl                                  nesting in the code i.e. set the var to
dnl                                  "     " for the first for loop, set it
dnl                                  to "          " for the second, etc.           
dnl
AC_DEFUN([QM_CHECK_CC_LIB],
         [
          fix_expan=$1

          eval LIB_LDFLAGS="\$with_${fix_expan}_libpath"
          if ( test "X$LIB_LDFLAGS" != X )
          then
             TRACE_INDENT="     "
             trace 3 Setting LDFLAGS for library to $LIB_LDFLAGS
          fi
          eval LIB_CPPFLAGS="\$with_${fix_expan}_inc"
          if ( test "X$LIB_CPPFLAGS" != X )
          then
             TRACE_INDENT="     "
             trace 3 Setting CPPFLAGS for library to $LIB_CPPFLAGS
          fi
          eval dependencies="\$with_${fix_expan}_prq"
          prereqincs=""
          prereqlibs=""
          for prereqlib in $dependencies
          do
             TRACE_INDENT="     "
             eval new_prereqinc="\$${prereqlib}_CFLAGS"
             if ( test "X$new_prereqinc" != X )
             then
                trace 3 Appending $new_prereqinc to CFLAGS
                prereqincs="$prereqincs $new_prereqinc"
             fi
             eval new_prereqlib="\$${prereqlib}_LIBS"
             if ( test "X$new_prereqlib" != X )
             then
                trace 3 Appending $new_prereqlib to link line
                prereqlibs="$prereqlibs $new_prereqlib"
             fi
          done
          TRACE_INDENT="     "
          preserve_LDFLAGS=$LDFLAGS
          preserve_CPPFLAGS=$CPPFLAGS
          preserve_LIBS=$LIBS
          CPPFLAGS="$LIB_CPPFLAGS $prereqincs"
          AC_MSG_CHECKING([for external package $1])
          AC_MSG_RESULT([])
          dnl# We use AC_MSG_CHECKING as AC_MSG_NOTICE prefixes a configure:
          dnl# to the output. We then use AC_MSG_RESULT with an empty string
          dnl# to force output of a newline
          eval hdr_lst="\$with_${fix_expan}_hdr"
          preamble=""
          found=true
          if ( test X"$hdr_lst" != X )
          then
             for hf in $hdr_lst 
             do
                if ( test X$found = Xtrue )
                then
                   AC_CHECK_HEADER([$hf], 
                                   [found=true], 
                                   [found=false], 
                                   [AC_INCLUDES_DEFAULT]
                                  )
                   if ( test X$found = Xtrue )
                   then
                      preamble=$preamble'
#include <'$hf'>'
                      # N.B. Above line split is to embed a newline into the
                      # preamble variable
                   fi
                fi
             done
          fi

          # Did we find all the header files?
          if ( test X$found = Xtrue )
          then
             # We did: perform the link test...

             eval test_code="\$with_${fix_expan}_tstcd"

             eval lib_sets=\"\$with_${fix_expan}_lnklibs\"

             # with_<lib>_lnklibs is either a single set of libraries we need
             # to attempt to link with or, possibly, a | separated list of
             # multiple sets libraries we need to try.
             #
             # Change IFS to split on the set seperator (|) and loop over the
             # library sets specified...

             save_ifs="$IFS"
             IFS="|"
             for try_libs in $lib_sets
             do
                IFS="$save_ifs"
                # Reset IFS as soon as possible. The for should have the
                # possible sets already cached so we do not need to reset IFS
                # back to the pipe symbol on any further iteration through the
                # loop.

                LIBS="$LIB_LDFLAGS $try_libs $prereqlibs"
                AC_MSG_CHECKING([ability to link against @<:@$LIBS@:>@])
                AC_LINK_IFELSE([AC_LANG_PROGRAM([$preamble],[$test_code])], [found=true], [found=false])

                if ( test X$found = Xtrue )
                then
                   AC_MSG_RESULT([yes])
                   LIB_LDFLAGS=$LIBS
                   # Set LIB_LDFLAGS to the LDFLAGS we were successful with
                   break
                   # We accept the first set of libs that compile, hence we
                   # break out of the loop to not consider any remaining
                   # library sets
                else
                   AC_MSG_RESULT([no])
                fi
             done
             # Reset IFS in case of null lib_sets
             IFS="$save_ifs"
          fi
          CPPFLAGS=$preserve_CPPFLAGS
          LDFLAGS=$preserve_LDFLAGS
          LIBS=$preserve_LIBS
          if ( test X$found = Xtrue )
          then
             TRACE_INDENT="     "
             trace 4 Library package $1 found
             if ( test "X$prereqincs" != X )
             then
                AS_VAR_SET(${fix_expan}_CFLAGS, ["$LIB_CPPFLAGS $prereqincs"])
             else
                AS_VAR_SET(${fix_expan}_CFLAGS, [$LIB_CPPFLAGS])
             fi
             AS_VAR_SET(${fix_expan}_LIBS, [$LIB_LDFLAGS])
             AS_VAR_SET(use_${fix_expan}, [present])
          else
             TRACE_INDENT="     "
             trace 3 Library package $1 not found
             AS_VAR_SET(use_${fix_expan}, [missing])
             if ( test "X$2" != X )
             then
                AC_MSG_FAILURE([$2])
             fi
          fi
         ]
        )

