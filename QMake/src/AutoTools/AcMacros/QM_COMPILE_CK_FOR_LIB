dnl This file is part of QMake, Quick Make System
dnl Copyright (C) 2011-16, University of Surrey
dnl This code may be redistributed under the terms of the GNU General
dnl Public License (GPL). See the gpl.licence file for details or
dnl see http://www.gnu.org/copyleft/gpl.html
dnl
dnl file-header-ends-here


dnl QM_COMPILE_CK_FOR_LIB
dnl
dnl Macro to check if the given library package exits on the system. This
dnl will check for both the library itself and its header files. This macro
dnl is intended for checking those libraries that do not come with a 
dnl pkg-configure file.
dnl
dnl Macro parameters are:
dnl       p1: QMake name for library
dnl       p2: Library to test for (-lxx)
dnl       p3: Code to link against the library to test for it
dnl       p4: Path to the library if not on system defaults
dnl       p5: List of header files to test for
dnl       p6: Path to the library's headers if not in system defaults
dnl       p7: Action to take if the library package is present and usable
dnl       p8: Action to take if the library package is missing or unusable
dnl       p9: Other libraries that are needed for the link test; then
dnl           pre-requisites of the library being tested
dnl
dnl
dnl Global variables used:
dnl
dnl   All variables listed with a <lib> in their name exist for each library
dnl   that has been declared via a QM_DEFINE_EXTLIB_CC with the <lib> being
dnl   replaced by the resource name of the package. For example, the OpenCV
dnl   package will have variables named with_OpenCV_prq; use_OpenCV; etc.
dnl   Similarly, libGTK2 has variables use_libGTK2; with_libGTK2_prq; etc.
dnl
dnl       <lib>_CFLAGS               Substitution variable holding the CFLAGS
dnl                                  required when compiling with the
dnl                                  external library, <lib>. 
dnl       <lib>_LIBS                 Substitution variable holding the link
dnl                                  line settings needed to link with the
dnl                                  <lib> package. This info is supplied
dnl                                  as on the link line itself  i.e. library
dnl                                  names are specified in -lX form and the
dnl                                  setting may include -Lpath entries. 
dnl       CPPFLAGS                   C preprocessor flags, temporarily
dnl                                  re-assigned during this macro as part
dnl                                  of the testing process.
dnl       preserve_CPPFLAGS          Interim variable used to preserve the
dnl                                  global CPPFLAGS settings during 
dnl                                  operation of this macro.
dnl       LIB_CPPFLAGS               Interim variable used to build up the 
dnl                                  CPPFLAGS to be used when testing for the
dnl                                  header files associated with the library
dnl                                  package being tested.
dnl       LDFLAGS                    Linker flags, temporarily re-assigned
dnl                                  during this macro as part of the testing
dnl                                  process.
dnl       preserve_LDFLAGS           Interim variable used to preserve the
dnl                                  global LDFLAGS settings during operation
dnl                                  of this macro.
dnl       LIB_LDFLAGS                Interim variable used to build up the 
dnl                                  LDFLAGS to be used when testing 
dnl                                  compilation ot the library being tested.
dnl       fix_expan                  Interim variable used to overcome the 
dnl                                  limitation over using a macro parameter
dnl                                  as part of a variable name (the ${$1}x
dnl                                  construct will get expanded to ${param}x
dnl                                  rather than perform the substitution for
dnl                                  ${param} as well).
dnl       found                      Interim variable maintains the current
dnl                                  success or failure of the library check.
dnl       hf                         Interim iterator, used while checking
dnl                                  for the library package's header files.
dnl       new_prereqlib              Interim variable used when determining
dnl                                  the libraries to be added to the link
dnl                                  line for a particular prerequisite.
dnl       preamble                   Interim variable used to include all of
dnl                                  the external library header files in the
dnl                                  source used for the link test
dnl       prereqlibs                 Interim variable that receives all the
dnl                                  libraries that must be used during the
dnl                                  test link, so that the pre-requisites
dnl                                  are satisfied.
dnl       prereqlib                  Interim iterator for processing the
dnl                                  prerequisite library packages.
dnl       stripspaces                Interim variable used to overcome a 
dnl                                  limitation of the m4 substitution 
dnl                                  process that sees trailing spaces
dnl                                  appended to macro parameters.
dnl       test_code                  Interim variable, receives the test code
dnl                                  with which to test linkage of the
dnl                                  external library.
dnl       TRACE_INDENT               Variable used for indenting trace debug
dnl                                  messages (when DBG is set). The current
dnl                                  convention in this script is to employ
dnl                                  an indent of 5 spaces per level of 
dnl                                  nesting in the code i.e. set the var to
dnl                                  "     " for the first for loop, set it
dnl                                  to "          " for the second, etc.           
dnl
AC_DEFUN([QM_COMPILE_CK_FOR_LIB],
         [
         trace 5 Checking for library:
         TRACE_INDENT="     "
         trace 5 "@<:@$1@:>@"
         TRACE_INDENT="     "
         trace 5 "@<:@$2@:>@"
         TRACE_INDENT="     "
         trace 5 "@<:@$3@:>@"
         TRACE_INDENT="     "
         trace 5 "@<:@$4@:>@"
         TRACE_INDENT="     "
         trace 5 "@<:@$5@:>@"
         TRACE_INDENT="     "
         trace 5 "@<:@$6@:>@"
         TRACE_INDENT="     "
         trace 5 Code...
         TRACE_INDENT="     "
         trace 5 Code...
         TRACE_INDENT="     "
         stripspaces=$9
         # As $9 will have acquired trailing characters from m4 substitutions
         trace 5 "@<:@$stripspaces@:>@"
         if ( test "X$4" != X )
         then
            TRACE_INDENT="     "
            trace 3 Setting LDFLAGS for library to $4
            LIB_LDFLAGS=$4
         else
            LIB_LDFLAGS=""
         fi
         if ( test "X$6" != X )
         then
            TRACE_INDENT="     "
            trace 3 Setting CPPFLAGS for library to $6
            LIB_CPPFLAGS=$6
         else
            LIB_CPPFLAGS=""
         fi
         prereqlibs=""
         for prereqlib in $9
         do
            TRACE_INDENT="     "
            eval new_prereqlib="\$${prereqlib}_LIBS"
            trace 3 Appending $new_prereqlib to link line
            prereqlibs="$prereqlibs $new_prereqlib"
         done
         TRACE_INDENT="     "
         preserve_LDFLAGS=$LDFLAGS
         preserve_CPPFLAGS=$CPPFLAGS
         preserve_LIBS=$LIBS
         CPPFLAGS=$LIB_CPPFLAGS
         LIBS="$LIB_LDFLAGS $2 $prereqlibs"
         AC_MSG_CHECKING([for external package $1])
         AC_MSG_RESULT([])
         dnl# We use AC_MSG_CHECKING as AC_MSG_NOTICE prefixes a configure:
         dnl# to the output. We then use AC_MSG_RESULT with an empty string
         dnl# to force output of a newline
         preamble=""
         found=true
         if ( test X"$5" != X )
         then
            for hf in $5 
            do
               if ( test X$found = Xtrue )
               then
                  TRACE_INDENT="     "
                  trace 3 Checking for header file $hf
                  AC_CHECK_HEADER([$hf], 
                                  [found=true], 
                                  [found=false], 
                                  [AC_INCLUDES_DEFAULT]
                                 )
                  if ( test X$found = Xtrue )
                  then
                     preamble=$preamble'
#include <'$hf'>'
                     # N.B. Above line split is to embed a newline into the
                     # preamble variable
                  fi
               fi
            done
         fi
         # Did we find all the header files?
         if ( test X$found = Xtrue )
         then
            # We did, perform the link test
            AC_MSG_CHECKING([ability to link against $2])
            test_code="$3"
            # Original implementation used a single function name for the test
            # code and appended (); to it. Check if we have someone using the old
            # standard and process appropriately
            if ( test -z "`echo "$test_code" | $AWK '{ print @S|@2 }'`" )
            then
               # test code is a single item, is it a function call or just a
               # function name?
               if ( test "$test_code" = "`echo "$test_code" | sed 's/;/./'`" )
               then
                  # No ; - test code must just be a function name - convert it to
                  # a function call
                  test_code="$test_code ();"
               fi
            fi
            AC_LINK_IFELSE([AC_LANG_PROGRAM([$preamble],[$test_code])], [found=true], [found=false])
            if ( test X$found = Xtrue )
            then
               AC_MSG_RESULT([yes])
            else
               AC_MSG_RESULT([no])
            fi
         fi
         CPPFLAGS=$preserve_CPPFLAGS
         LDFLAGS=$preserve_LDFLAGS
         LIBS=$preserve_LIBS
         if ( test X$found = Xtrue )
         then
            TRACE_INDENT="     "
            trace 4 Library package $1 found
            fix_expan=$1
            AS_VAR_SET(${fix_expan}_CFLAGS, [$LIB_CPPFLAGS])
            if ( test X$LIB_LDFLAGS != X )
            then
               LIB_LDFLAGS=$LIB_LDFLAGS" $2"
            else
               LIB_LDFLAGS=$2
            fi
            if ( test "X$prereqlibs" != X )
            then
               LIB_LDFLAGS=$LIB_LDFLAGS" "$prereqlibs
            fi
            AS_VAR_SET(${fix_expan}_LIBS, [$LIB_LDFLAGS])
            $7
         else
            TRACE_INDENT="     "
            trace 3 Library package $1 not found
            $8
         fi
         ]
        )

