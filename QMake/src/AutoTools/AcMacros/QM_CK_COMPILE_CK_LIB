dnl This file is part of QMake, Quick Make System
dnl Copyright (C) 2011-15, University of Surrey
dnl This code may be redistributed under the terms of the GNU General
dnl Public License (GPL). See the gpl.licence file for details or
dnl see http://www.gnu.org/copyleft/gpl.html
dnl
dnl file-header-ends-here



dnl QM_CK_COMPILE_CK_LIB
dnl
dnl Macro to attempt to check if the specified external library package exists
dnl on the system. This macro is for libraries specified as requiring a
dnl compilation check rather than being specified via pkg-config.
dnl
dnl All libraries to be checked for must have previously been declared via
dnl the QM_DEFINE_EXTIB_CC macro. Any package that is quantified as being
dnl either present or absent will be removed from the global variable LeftToDo
dnl At the same time, a quantified package will be added to the list held by
dnl the RecentlyProcessed variable. 
dnl
dnl Macro parameters are:
dnl       p1: QMake name for the external package
dnl
dnl Global variables used:
dnl
dnl   All variables listed with a <lib> in their name exist for each library
dnl   that has been declared (via a QM_DEFINE_EXTLIB_[CP]C) with the <lib>
dnl   being replaced by the RESOURCE name of the package. For example,
dnl   the OpenCV package will have variables named with_OpenCV_prq; 
dnl   use_OpenCV; etc. Similarly, libGTK2 has variables use_libGTK2; 
dnl   with_libGTK2_prq; etc.
dnl
dnl       DBG                        Variable that holds the current trace
dnl                                  level as requested by the user. Requires
dnl                                  the inclusion of the debug function
dnl                                  "trace" in any code calling this macro.
dnl                                  A suitable trace function is defined in
dnl                                  the QMake AcMacros/QM_Debug_fn file.
dnl       LeftToDo                   List of the external libs that remain to
dnl                                  be processed. As the compilation check
dnl                                  packages should be processed last, this
dnl                                  variable is analogous to the list of
dnl                                  compile check libs that remain to be
dnl                                  tested. This macro deletes <lib> from
dnl                                  this list if it can determine if <lib>
dnl                                  is available for use.
dnl       RecentlyProcessed          Keeps track of the recently located libs.
dnl                                  This macro adds <lib> to this list if it
dnl                                  can determine whether or not the package
dnl                                  is available.
dnl       process_now                Indicates if we should process the
dnl                                  library now or delay checking for its
dnl                                  existance (usually to allow us to find a
dnl                                  pre-requisite first).
dnl       SED                        Standard substitution variable pointing
dnl                                  to the UNIX sed command.
dnl       TRACE_INDENT               Variable used for indenting trace debug
dnl                                  messages (when DBG is set). The current
dnl                                  convention in this script is to employ
dnl                                  an indent of 5 spaces per level of 
dnl                                  nesting in the code i.e. set the var to
dnl                                  "     " for the first for loop, set it
dnl                                  to "          " for the second, etc.
dnl       use_<lib>                  Flag specifying useage of library, 
dnl                                  initially primed from the command line
dnl                                  settings, this will be updated to
dnl                                  reflect the availability of the library
dnl                                  <lib>
dnl
dnl   The following are all interim variables used within this macro:
dnl
dnl     failure; test_lib; test_enablement; process_now
dnl
AC_DEFUN([QM_CK_COMPILE_CK_LIB],
         [trace 5 Seeing if we can do the compilation check for $1
          test_lib=$1
          dnl Use intermediate variable to circumvent any issues over macro
          dnl substitution when we need to use {$test_lib} in the code

          eval test_enablement=\$use_${test_lib}


          AS_IF([test "$test_enablement" == check -o  "$test_enablement" == needed -o  "$test_enablement" == yes],
                [# We need to check if this lib exists
                 #
                 # First check the state of the pre-requisites of the library
                 QM_CK_PREREQ_STATE([$1])
                 AS_IF([test "x$process_now" != xno],
                       [AS_CASE([$test_enablement],
                                [check],  [failure=""],
                                [needed], [failure="Library $test_lib is unavailable and a prerequisite of a selected library"],
                                [yes],    [failure="Required library $test_lib is unavailable"],
                                [trace 1 "Assert - Should never fall through here"]
                               )
                        eval test_lang="\$with_${test_lib}_lang"
                        test_lang=`echo $test_lang`
                        # Set test_lang from $with_$Lib_lang and strip external spaces

                        dnl# As the stack for switching the current language is
                        dnl# implemented in autoconf and not available at
                        dnl# runtime, AC_LANG_xx must take a literal parameter.
                        AS_CASE(["$test_lang"],
                                ["C"],             [AC_LANG_PUSH([C])
                                                    QM_CHECK_CC_LIB([$test_lib],[$failure])
                                                    AC_LANG_POP([C])
                                                   ],
                                ["C++"],           [AC_LANG_PUSH([C++])
                                                    QM_CHECK_CC_LIB([$test_lib],[$failure])
                                                    AC_LANG_POP([C++])
                                                   ],
dnl
dnl                     Disable non-C or C++ languages as QMake as a whole
dnl                     cannot currently cope with them. The support that is
dnl                     not currently present in QMake includes Makefile
dnl                     support for other language file-extensions and any
dnl                     support for the language xxFLAGS settings either in
dnl                     the QMake makefiles or in these configuration script
dnl                     macros/configuration files. The QM_CHECK_CC_LIB macro
dnl                     also only supports C-like synatax for include file 
dnl                     processing.
dnl
dnl                     Enabling a language here has the effect of requiring
dnl                     full support for that language, even if the product
dnl                     has no direct requirement for that language. In other
dnl                     words, if any of the languages enabled here do not
dnl                     have an available compiler, configure will completely
dnl                     fail rather than only fail those elements associated
dnl                     with the unsupported language.
dnl
dnl                     If you enable Fortran here, you also need to enable
dnl                     the output of the Fortran make flags (FCFLAGS et al)
dnl                     in the QMake and project configure.ac files. For the
dnl                     project configure.ac files, the Fortran flags will
dnl                     also need reading in (from Config.QMake) for the
dnl                     non-configured external packages.
dnl
dnl                             ["Fortran"],       [AC_LANG_PUSH([Fortran])
dnl                                                 QM_CHECK_CC_LIB([$test_lib],[$failure])
dnl                                                 AC_LANG_POP([Fortran])
dnl                                                ],
dnl                             ["Fortran 77"],    [AC_LANG_PUSH([Fortran 77])
dnl                                                 QM_CHECK_CC_LIB([$test_lib],[$failure])
dnl                                                 AC_LANG_POP([Fortran 77])
dnl                                                ],
dnl                             ["Erlang"],        [AC_LANG_PUSH([Erlang])
dnl                                                 QM_CHECK_CC_LIB([$test_lib],[$failure])
dnl                                                 AC_LANG_POP([Erlang])
dnl                                                ],
dnl                             ["Objective C"],   [AC_LANG_PUSH([Objective C])
dnl                                                 QM_CHECK_CC_LIB([$test_lib],[$failure])
dnl                                                 AC_LANG_POP([Objective C])
dnl                                                ],
dnl                             ["Objective C++"], [AC_LANG_PUSH([Objective C++])
dnl                                                 QM_CHECK_CC_LIB([$test_lib],[$failure])
dnl                                                 AC_LANG_POP([Objective C++])
dnl                                                ],
dnl
                                [AC_MSG_WARN([Unrecognised language @<:@$test_lang@:>@ for package $1])
                                 AC_MSG_WARN([Unable to check for presence of package])
                                ]
                               )
                        LeftToDo=`echo " $LeftToDo " | $SED "s/ $test_lib / /"`
                        RecentlyProcessed="$RecentlyProcessed $test_lib"
                       ]
                      ) dnl End of process_now code
                ], dnl End of test_enablement = check|needed|yes code
                [# We do not need to check for existance of this library; trace why
                 case $test_enablement in
                    'no' )      TRACE_INDENT="     "
                                trace 6 $test_lib is disabled, not checking for existance
                                ;;
                    'blocked' ) TRACE_INDENT="     "
                                trace 6 $test_lib is blocked by a pre-requisite
                                ;;
                    * )         TRACE_INDENT="     "
                                trace 1 "Assert - curious test_enablement"
                                ;;
                 esac
                 LeftToDo=`echo " $LeftToDo " | $SED "s/ $test_lib / /"`
                 RecentlyProcessed="$RecentlyProcessed $test_lib"
                ]
               )
          # Strip unnecessary spaces from LeftToDo
          LeftToDo=`echo " $LeftToDo " | $SED "s/  */ /g;s/^ //;s/ $//"`
         ]
        )
