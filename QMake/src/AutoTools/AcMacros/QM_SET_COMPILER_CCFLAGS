dnl This file is part of QMake, Quick Make System
dnl Copyright (C) 2011-16, University of Surrey
dnl This code may be redistributed under the terms of the GNU General
dnl Public License (GPL). See the gpl.licence file for details or
dnl see http://www.gnu.org/copyleft/gpl.html
dnl
dnl file-header-ends-here


  
dnl QM_SET_COMPILER_CCFLAGS
dnl
dnl Macro to declare the flags required to configure the C++ compiler to
dnl operate in a manner usable by QMake.
dnl
dnl No macro parameters
dnl
dnl Global variables used:
dnl
dnl       Actual_CXX                 Holds the identified type of the compiler
dnl                                  if it is a GNU-compatible version.
dnl       COMPILER_ANSI_CCFLAGS    } { Receive the compiler specific flags
dnl       COMPILER_CC98_CCFLAGS    } { for setting the appropriate mode of
dnl       COMPILER_CC03_CCFLAGS    } { compiler operation required by QMake.
dnl       COMPILER_CC11_CCFLAGS    } {  .._ANSI_.. is used for compiling
dnl       COMPILER_CC14_CCFLAGS    } { ANSI-C++ source code; the .._CCnn_..
dnl       COMPILER_DEBUG_CCFLAGS   } { flags select compiler compatibility
dnl       COMPILER_GPROF_CCFLAGS   } { with the appropriate C++ standard
dnl       COMPILER_NON_OPT_CCFLAGS } { (these variables are only ever set
dnl       COMPILER_OPT_CCFLAGS     } { if the particular standard is
dnl       COMPILER_PROF_CCFLAGS    } { supported by the compiler in use);
dnl       COMPILER_SHARED_CCFLAGS  } { .._DEBUG_.. to include debug info;
dnl                                  { .._GPROF_.. for compiling code that
dnl                                  { can be analysed by the gprof utility
dnl                                  { (.._PROF_.. by the prof utility) and
dnl                                  { .._SHARED_.. to compiled shared
dnl                                  { objects. With the exception of the
dnl                                  { .._NON_OPT_.. flag, all of these flags
dnl                                  { drive the default value of the
dnl                                  { appropriately named PKG_... flag (which
dnl                                  { is the actual variable used in the
dnl                                  { QMake makefiles). .._NON_OPT_.. is
dnl                                  { appended to the PKG_DEFAULT... flags
dnl                                  { used for the non-optimised builds. All
dnl                                  { of these variables are primed based on
dnl                                  { the compiler in use and declare the
dnl                                  { variable for output to the config.X
dnl                                  { configuration file.
dnl       COMPILER_SPECIFIC_CCFLAGS  Receive any compiler specific flags
dnl                                  required to configure the C++ compiler
dnl                                  to work with QMake. Unlike the above
dnl                                  variables, this value is used on every
dnl                                  compilation via the PKG_GLOBAL_CCFLAGS
dnl                                  makefile variable. This variable is set
dnl                                  based on the compiler in use and is
dnl                                  declared to output to the config.X
dnl                                  configuration file.
dnl       CONFIGURE_CCFLAGS          Not actually modified or interrogated
dnl                                  by this macro; merely declared for 
dnl                                  output substitution into the configure
dnl                                  settings file. Holds any user-supplied
dnl                                  CCFLAGS, originally primed in the macro
dnl                                  QM_LOCATE_KEY_TOOLS.
dnl       CXX                        Holds the path to the C++ compiler in
dnl                                  use. May be updated to include extra
dnl                                  global compiler options.
dnl       CXX_VERSION              } { Receives the version information for
dnl       CXX_MAJOR                } { the current C++ compiler. For a GNU
dnl       CXX_MINOR                } { compatible compiler, these variables
dnl                                  { are actually initialised by the macro
dnl                                  { QM_ID_GNU_COMPILER called from here.
dnl       GXX                        Flag, originally set by AC_PROG_CXX
dnl                                  indicating if a GNU C++ compiler is in
dnl                                  use. Set to yes for a GNU compiler.
dnl       NVCC_ANSI_NVCCFLAGS      } { Receive the appropriate compiler flags
dnl       NVCC_CC98_NVCCFLAGS      } { for compiling CUDA code in combination 
dnl       NVCC_CC03_NVCCFLAGS      } { with the current C++ compiler. Setting 
dnl       NVCC_CC11_NVCCFLAGS      } { for each variable is from the sister 
dnl       NVCC_CC14_NVCCFLAGS      } { COMPILER_xxx_CCFLAGS variable with any 
dnl       NVCC_DEBUG_NVCCFLAGS     } { flags that the CUDA compiler driver
dnl       NVCC_GPROF_NVCCFLAGS     } { cannot cope with being prefixed with
dnl       NVCC_NON_OPT_NVCCFLAGS   } { a -Xcompiler directive. This macro
dnl       NVCC_OPT_NVCCFLAGS       } { declares all of these variables for
dnl       NVCC_PROF_NVCCFLAGS      } { output to the configuration files.
dnl       NVCC_SHARED_NVCCFLAGS    } { The C++ standards variables (_CC98_,
dnl       NVCC_SPECIFIC_NVCCFLAGS  } { _CC03_ etc.) are only primed if the
dnl                                  { C++ compiler supports that particular
dnl                                  { standard.
dnl       RESOURCES                  Holds the list of QMake RESOURCES that
dnl                                  are available for use. Primed by this
dnl                                  macro to include those C++ standards that
dnl                                  are supported by the C++ compiler that is
dnl                                  in use.
dnl
AC_DEFUN([QM_SET_COMPILER_CCFLAGS],
         [trace 2 Set compiler specific CCFLAGS

          dnl# First declare that this macro should never be called after
          dnl# QM_PROCESS_EXTLIBS (for QMake project configure programs, this
          dnl# macro need not be called (if the configure does not alter the
          dnl# compiler settings) so the relationship is not an AC_REQUIRE in
          dnl# QM_PROCESS_EXTLIBS).
          AC_BEFORE([QM_SET_COMPILER_CCFLAGS],[QM_PROCESS_EXTLIBS])

          dnl# Additionally, this macro should never be called unless
          dnl# QM_LOCATE_KEY_TOOLS has already been called.
          AC_REQUIRE([QM_LOCATE_KEY_TOOLS])
          
          # This whole section should probably be re-written on the basis of
          # test compiling appropriate source with the known compiler switches
          # rather than checking the version of the compiler. Implementation
          # would be something similar to the existing AC_PROG_CC_C89 and 
          # AC_PROG_CC_C99 macros.

          if ( test x$GXX = xyes )
          then
             # We either have a GNU C++ Compiler or something masquerading as
             # one (e.g. Clang++). Let us investigate further...
             QM_ID_GNU_COMPILER([CXX])
             dnl# This will indicate the real identity of the GNU-compatible in
             dnl# the Actual_CXX variable and prime CXX_VERSION; CXX_MAJOR and
             dnl# CXX_MINOR with the revision number.

             # Now start to set the compiler flags...

             # -ansi is not a consistently documented flag for g++ and not one
             # documented at all for Clang++. However, this is what QMake has
             # done in the past so we continue with that practice. In any case,
             # the use of the -std switch via the QMake CXX_STD mechanism will
             # supersede the original functionality. It is recommended that the
             # user move over to using CXX_STD as the former ANSIFLAG and
             # CCANSIFLAG mechanisms have an unpredictability about exactly
             # which C++ standard will be implied (various compilers will imply
             # different C++ standards from the -ansi flag, or indeed ignore it
             # entierly). 
             COMPILER_ANSI_CCFLAGS=" -ansi "
             # -ansi is not recognised by the CUDA compiler driver. This means
             # we need to prefix them with the -Xcompiler switch that causes
             # nvcc to ignore the following flag but still pass it on to any
             # subsequent GNU compilation.
             NVCC_ANSI_NVCCFLAGS=" -Xcompiler -ansi "

             # Support for other C++ standards (and the switches to enable them)
             # depends on the version of the compiler in use
             #
             # For the GNU compatible compilers, we still  need to consider
             # if we want to force the compiler into -pedantic mode. At
             # present, we are taking the approach that this functionality
             # is more for getting code to compile rather than a mechanism
             # for developing fully compliant code and so, do not add the
             # switch.

             case $Actual_CXX in
                GNU | Unknown )   # Unknown compiler assumed g++ 5.0 compatible

                                  if ( test $CXX_MAJOR -lt 4 )
                                  then
                                     if ( test $CXX_MAJOR -eq 3 )
                                     then
                                        if ( test $CXX_MINOR -gt 0 )
                                        then
                                           # The first reference to the C++
                                           # standards comes in the g++ 3.1
                                           # documentation, so we take this
                                           # as the starting point for a
                                           # compliant implementation and
                                           # regard any earlier compiler as
                                           # not supporting any standard.
                                           if ( test $CXX_MINOR -gt 2 )
                                           then
                                              # First explicit switch came in 3.3
                                              # and supported only C++ 98
                                              COMPILER_CC98_CCFLAGS=" -std=c++98 "
                                              # Similarly to the -ansi switch, the
                                              # -std flag is not recognised by the
                                              # CUDA compiler driver. This also
                                              # means that we need to prefix this
                                              # setting with the -Xcompiler switch
                                              # when calling nvcc.
                                              NVCC_CC98_NVCCFLAGS=" -Xcompiler -std=c++98 "
                                              RESOURCES="$RESOURCES CXX98"
                                           else # => Version = 3.1 or 3.2
                                              # Default operation supports as much
                                              # compliance as we are going to get.
                                              # It will not be fully compliant but
                                              # hopefully will allow compliant code
                                              # to compile.
                                              COMPILER_CC98_CCFLAGS="  "
                                              # No explicit flags needed for the
                                              # nVidia compiler driver
                                              NVCC_CC98_NVCCFLAGS="  "
                                              RESOURCES="$RESOURCES CXX98"
                                           fi
                                      # else # => Version 3.0
                                           # Does not explicitly support a C++
                                           # standard, so no CCFLAGS to set
                                        fi
                                   # else # => Version 2.X or below
                                        # Does not explicitly support a C++
                                        # standard, so no CCFLAGS to set
                                     fi
                                  else # => Version > 3.X
                                     # C++98 available post 3.3 so ok for
                                     # 4.x and above
                                     COMPILER_CC98_CCFLAGS=" -std=c++98 "
                                     # Protect nvcc from -std switch
                                     NVCC_CC98_NVCCFLAGS=" -Xcompiler -std=c++98 "
                                     RESOURCES="$RESOURCES CXX98"
                                     if ( test $CXX_MAJOR  = 4 )
                                     then
                                        if ( test $CXX_MINOR -gt 2 )
                                        then
                                           # First reference to C++ 03 comes in
                                           # documentation for g++ 4.3
                                           if ( test $CXX_MINOR -lt 8 )
                                           then
                                              # No specific switch for C++ 03
                                              # until g++ 4.8; shares the
                                              # switch for C++ 98 until then.
                                              COMPILER_CC03_CCFLAGS=" -std=c++98 "
                                              # Protect nvcc from -std switch
                                              NVCC_CC03_NVCCFLAGS=" -Xcompiler -std=c++98 "
                                              RESOURCES="$RESOURCES CXX03"
                                           else # => Version 4.8 or 4.9
                                              # C++ 03 switch and C++ 11 support
                                              # Protect nvcc from -std switch for
                                              # each setting..
                                              COMPILER_CC03_CCFLAGS=" -std=c++03 "
                                              NVCC_CC03_NVCCFLAGS=" -Xcompiler -std=c++03 "
                                              RESOURCES="$RESOURCES CXX03"

                                              COMPILER_CC11_CCFLAGS=" -std=c++11 "
                                              NVCC_CC11_NVCCFLAGS=" -Xcompiler -std=c++11 "
                                              RESOURCES="$RESOURCES CXX11"

                                              # Also provides incomplete C ++14
                                              # support which we will enable.
                                              COMPILER_CC14_CCFLAGS=" -std=c++1y "
                                              NVCC_CC14_NVCCFLAGS=" -Xcompiler -std=c++1y "
                                              RESOURCES="$RESOURCES CXX14"
                                           fi
                                      # else # => Version 4.0 - 4.2
                                           # No additional settings for these
                                           # compiler revisions
                                        fi
                                     else # Version > 4.X
                                        # Support for c++ 98 through C++ 14 for
                                        # all versions 5+
                                        # (this is actually an assumption for
                                        # versions < 5.4 as no documentation is
                                        # available).
                                        COMPILER_CC98_CCFLAGS=" -std=c++98 "
                                        NVCC_CC98_NVCCFLAGS=" -Xcompiler -std=c++98 "
                                        RESOURCES="$RESOURCES CXX98"

                                        COMPILER_CC03_CCFLAGS=" -std=c++03 "
                                        NVCC_CC03_NVCCFLAGS=" -Xcompiler -std=c++03 "
                                        RESOURCES="$RESOURCES CXX03"

                                        COMPILER_CC11_CCFLAGS=" -std=c++11 "
                                        NVCC_CC11_NVCCFLAGS=" -Xcompiler -std=c++11 "
                                        RESOURCES="$RESOURCES CXX11"

                                        COMPILER_CC14_CCFLAGS=" -std=c++14 "
                                        NVCC_CC14_NVCCFLAGS=" -Xcompiler -std=c++14 "
                                        RESOURCES="$RESOURCES CXX14"

                                        # Compiler provides support for the
                                        # draft C++ 1z standard but we will
                                        # not add QMake support for that yet.
                                     fi
                                  fi

                                  
                                  ;;
                Clang )           
                                  if ( test  $CXX_MAJOR -lt 2 )
                                  then
                                     # We really have the LVM version number
                                     # and there was no Clang release with
                                     # LVM before LVM 2.6
                                     AC_MSG_FAILURE([Unable to recognise version of LVM for Clang])
                                  else
                                     if ( test  $CXX_MAJOR -eq 2 )
                                     then
                                        if ( test $CXX_MINOR -lt 6 )
                                        then
                                           # There is no general release version
                                           # associated with this version of LVM
                                           # but a version was bundled in Xcode 
                                           # based on LVM 2.5 so allow that but
                                           # do not flag any C++ standards as
                                           # being supported as C++ support is
                                           # very incomplete at this revision.
                                           if ( test $CXX_MINOR -lt 5 )
                                           then
                                              AC_MSG_FAILURE([Unable to recognise version of LVM for Clang])
                                           fi
                                        else
                                           if ( test $CXX_MINOR -lt 8 )
                                           then
                                              # C++ support not regarded as
                                              # being strong enough prior to
                                              # revision 2.8 (support disabled
                                              # by default unless the switch
                                              # -ccc-clang-cxx was employed).
                                              # We should only ever get here if
                                              # the user has caused the switch
                                              # to be set (test program would
                                              # not have compiled). Assume they
                                              # know what they are doing but
                                              # do not flag the compiler as
                                              # being standard supporting.
                                              # Possibility we could also arrive
                                              # here on Apple kit if they have
                                              # enabled C++ support by default;
                                              # will need to test on XCode 3.2.
                                              AC_MSG_WARN([Clang of questional C++ ability at this revision])
                                           else
                                              # 2.8 and above support C++98/03
                                              COMPILER_CC98_CCFLAGS=" -std=c++98 "
                                              NVCC_CC98_NVCCFLAGS=" -Xcompiler -std=c++98 "
                                              RESOURCES="$RESOURCES CXX98"

                                              COMPILER_CC03_CCFLAGS=" -std=c++03 "
                                              NVCC_CC03_NVCCFLAGS=" -Xcompiler -std=c++03 "
                                              RESOURCES="$RESOURCES CXX03"
                                           fi
                                        fi
                                     else # => Version 3.X or above
                                        COMPILER_CC98_CCFLAGS=" -std=c++98 "
                                        NVCC_CC98_NVCCFLAGS=" -Xcompiler -std=c++98 "
                                        RESOURCES="$RESOURCES CXX98"

                                        COMPILER_CC03_CCFLAGS=" -std=c++03 "
                                        NVCC_CC03_NVCCFLAGS=" -Xcompiler -std=c++03 "
                                        RESOURCES="$RESOURCES CXX03"

                                        if ( test $CXX_MAJOR -eq 3 )
                                        then
                                           if ( test $CXX_MINOR -gt 2 )
                                           then
                                              # First version to fully support
                                              # C++11 was 3.3
                                              # Support available in earlier
                                              # versions lacked particular
                                              # features; e.g. attribute syntax
                                              # and thread local storage.
                                              COMPILER_CC11_CCFLAGS=" -std=c++11 "
                                              NVCC_CC11_NVCCFLAGS=" -Xcompiler -std=c++11 "
                                              RESOURCES="$RESOURCES CXX11"

                                              if ( test $CXX_MINOR -gt 4 )
                                              then
                                                 # 3.5 on provides full support
                                                 # for C++14
                                                 COMPILER_CC14_CCFLAGS=" -std=c++14 "
                                                 NVCC_CC14_NVCCFLAGS=" -Xcompiler -std=c++14 "
                                                 RESOURCES="$RESOURCES CXX14"
                                              else # => Version = 3.4
                                                 # 3.4 supports all bar the final
                                                 # changes made to the draft
                                                 # C++14 standard (but uses the
                                                 # draft form of the -std flag).
                                                 # As no major parts of the
                                                 # final standard are missing,
                                                 # regard C++14 as an available
                                                 # RESOURCE.
                                                 COMPILER_CC14_CCFLAGS=" -std=c++1y "
                                                 NVCC_CC14_NVCCFLAGS=" -Xcompiler -std=c++1y "
                                                 RESOURCES="$RESOURCES CXX14"
                                              fi
                                           else # => Version 3.0, 3.1 or 3.2
                                              # A great deal of C++11 support
                                              # was completed by version 3.1,
                                              # so allow use of it (but do not
                                              # flag it as a fully supported
                                              # RESOURCE).
                                              COMPILER_CC11_CCFLAGS=" -std=c++11 "
                                              NVCC_CC11_NVCCFLAGS=" -Xcompiler -std=c++11 "
                                           fi
                                        else # => Version > 3.X
                                           # Post 3.X should support all four
                                           # current (at time of writing) C++
                                           # standards (and at the moment there
                                           # is not actually a post 3.X version
                                           # of LVM anyway).
                                           # Add in the two we have not already
                                           # recorded.

                                           COMPILER_CC11_CCFLAGS=" -std=c++11 "
                                           NVCC_CC11_NVCCFLAGS=" -Xcompiler -std=c++11 "
                                           RESOURCES="$RESOURCES CXX11"

                                           COMPILER_CC14_CCFLAGS=" -std=c++14 "
                                           NVCC_CC14_NVCCFLAGS=" -Xcompiler -std=c++14 "
                                           RESOURCES="$RESOURCES CXX14"
                                        fi
                                     fi
                                  fi
                                  ;;
                * )               trace 1 Unprocessed C++ compiler type
                                  ;;
             esac

             COMPILER_DEBUG_CCFLAGS=" -g "
             NVCC_DEBUG_NVCCFLAGS=$COMPILER_DEBUG_CCFLAGS

             COMPILER_GPROF_CCFLAGS=" -pg "
             NVCC_GPROF_NVCCFLAGS=$COMPILER_GPROF_CCFLAGS

             COMPILER_NON_OPT_CCFLAGS=" -fno-math-errno "
             #
             # We really treat non-optimised builds as a low optimised version.
             # We therefore need to consider the compiler version as for the
             # full optimised flags (see below).
             #
             # While using fno-math-errno breaks full standards compliance, it
             # is used to give us a consistent environment across platforms as
             # the math library on OSX never actually sets errno anyway. There
             # is no point in setting this switch globally (i.e. in {C}CFLAGS
             # rather than _OPT_C{C}FLAGS) as it is not actually used by g++
             # if we are not performing an optimised compile.

             NVCC_NON_OPT_NVCCFLAGS=" -Xcompiler -fno-math-errno "
             #
             # The CUDA compiler driver does not understand the -fno-math-errno
             # switch. This means we need to prefix it with the -Xcompiler 
             # switch that causes nvcc to ignore the following flag but still
             # pass it on to any subsequent GNU compilation.

             COMPILER_OPT_CCFLAGS=" -O2 -fno-math-errno "
             #
             # Again, the caveat from the non-optimised flags applies to the
             # use of fno-math-errno (see above).

             NVCC_OPT_NVCCFLAGS=" -O2 -Xcompiler -fno-math-errno "
             #
             # Likewise, we need the -Xcompiler prefix on -fno-math-errno

             # strict-aliasing enabled by optimised builds has been known to
             # sometimes cause g++ 4.x (x<7) to produce incorrect code (even
             # where the aliasing rules are followed). So we turn it off...
             if (( test $Actual_CXX = GNU ) && ( test X$CXX_MAJOR = X4 ))
             then
                if (( test X$CXX_MINOR != X ) && ( test $CXX_MINOR -gt 6 ))
                then
                   trace 5 We have a version of g++ 4.x without the aliasing bug
                   trace 6 g++ version $CXX_MAJOR.$CXX_MINOR
                else
                   trace 5 We potentially have the aliasing bug in our g++ compiler
                   trace 6 g++ version $CXX_MAJOR.$CXX_MINOR
                   COMPILER_NON_OPT_CCFLAGS=" "$COMPILER_NON_OPT_CCFLAGS" -fno-strict-aliasing "
                   NVCC_NON_OPT_NVCCFLAGS=" "$NVCC_NON_OPT_NVCCFLAGS" -Xcompiler -fno-strict-aliasing "
                   # CUDA compiler driver does not recognise the -fno-strict-aliasing
                   # switch so we have to use the -Xcompiler switch to tell the
                   # driver to ignore the following option.
                   COMPILER_OPT_CCFLAGS=" "$COMPILER_OPT_CCFLAGS" -fno-strict-aliasing "
                   NVCC_OPT_NVCCFLAGS=" "$NVCC_OPT_NVCCFLAGS" -Xcompiler -fno-strict-aliasing "
                   # Again we need to get the compiler driver to ignore the switch.
                fi
             fi

             COMPILER_PROF_CCFLAGS=" -p "
             NVCC_PROF_NVCCFLAGS=$COMPILER_PROF_CCFLAGS

             COMPILER_SHARED_CCFLAGS=" -shared -fPIC "
             NVCC_SHARED_NVCCFLAGS=" -shared -Xcompiler -fPIC "
             # Prefix -fPIC as the CUDA compiler driver cannot cope with it.

             COMPILER_SPECIFIC_CCFLAGS=" -Wall -pipe -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE "
             NVCC_SPECIFIC_NVCCFLAGS=" -Xcompiler -Wall -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE "
             # As nvcc chokes on -Wall we prefix it with the nvcc -Xcompiler 
             # "ignore this" switch. The warnings may or may not be useful
             # as some of the code compiled will be generated code. Given
             # nvcc fails to understand -pipe, we drop this switch in case
             # it causes any communication issues between the CUDA compiler
             # driver and the child GNU compilation.
          else
              trace 3 We do not have a GNU C++ compiler
              # Try relevant machine specific options we have used before
              # 
              # N.B.
              #      As CUDA expects the available compiler to be the GNU
              #      version, not having a GNU compiler effectively blocks
              #      CUDA support. For this reason, we have no need to set
              #      NVCCFLAGS in this block.
              # 
             dnl 
             dnl Although testing the host OS, we are using that to identify the native
             dnl tool set that may be in use. These are not platform specific settings
             dnl per se. DO NOT PUT PLATFORM SPECIFIC SETTINGS HERE. This section is for
             dnl settings that relate to specific tool sets. They may or may not relate
             dnl to specific platforms but that is coincidental. Platform specific
             dnl settings must go in the section at the end of this script. If you have a
             dnl specific compiler on a platform, put its settings here. If you have
             dnl specific settings for a common tool (say the GNU compilers) when run on
             dnl a particular platform, put those settings at the end of this script.
             dnl 
             case X$host_os in
              Xirix* )    trace 3 Setting CCFLAGS we have previously used under Irix
                          CXX=$CXX" -n32 -J4 -mp -LANG:ansi-for-init-scope=on "
                          # Not sure why this originally was done this way rather than
                          # use CCFLAGS, but assume there was a reason and propagate the
                          # method
                          COMPILER_ANSI_CCFLAGS=" -ansi "
                          COMPILER_DEBUG_CCFLAGS=""
                          COMPILER_GPROF_CCFLAGS=""
                          COMPILER_NON_OPT_CCFLAGS=""
                          COMPILER_OPT_CCFLAGS=" -O3 -OPT:condt_copy_limit=50000:Olimit=80000 "
                          COMPILER_PROF_CCFLAGS=""
                          COMPILER_SHARED_CCFLAGS=""
                          COMPILER_SPECIFIC_CCFLAGS=" -mips4 -r1000 -woff 1021 -woff 1681 -woff 1882 "
                          # -woff switches possibly in response to Ravl code rather
                          # than being generically necessary for QMake
                          ;;
              Xsolaris* ) trace 3 Setting CCFLAGS we have previously used on Solaris
                          # Allegedly the following setting has been used in
                          # anger on this platform (based on the original Ravl
                          # config.solaris). However, there is no entry in the
                          # current or archived Solaris compiler documentation
                          # for this switch.
                          COMPILER_ANSI_CCFLAGS=" -ansi "
                          # Below have not been tested in anger, will require
                          # more research, particularly a method to unpick the
                          # compiler version string output. Hence the pseudo
                          # code.
                          #  if $MAJOR < 5 
                          #  then
                          #     # Unsure of support assume C++98 default
                          #     COMPILER_CC98_CCFLAGS=" "
                          #     # No other standard supported, leave the relevant
                          #     # CFLAGS unset and let QMake make the best of it.
                          #  else
                          #     if  $MAJOR = 5 -a $MINOR < 10 
                          #     then
                          #        # C++98 only standard supported
                          #        COMPILER_CC98_CCFLAGS=" "
                          #        RESOURCES="$RESOURCES CXX98"
                          #        # Leave other CFLAGS unset
                          #     else
                          #        if $MAJOR = 5 -a $MINOR < 13
                          #        then
                          #           # Only C++03 supported
                          #           COMPILER_CC03_CCFLAGS=" "
                          #           RESOURCES="$RESOURCES CXX03"
                          #           # Rest of standards disabled
                          #        else
                          #           # From 5.13 we have -std switch to select from
                          #           # the available standards (03 and 11 for 5.13).
                          #           # No C++98 support so we do not set the 
                          #           # appropriate variable.
                                      COMPILER_CC03_CCFLAGS=" -std=c++03 "
                                      RESOURCES="$RESOURCES CXX03"
                                      COMPILER_CC11_CCFLAGS=" -std=c++11 "
                                      RESOURCES="$RESOURCES CXX11"
                          #           if $MAJOR = 5 -a $MINOR > 13
                          #           then
                          #             # From 5.14 we also support C++14
                                        COMPILER_CC14_CCFLAGS=" -std=c++14 "
                                        RESOURCES="$RESOURCES CXX14"
                          #           endif
                          #        endif
                          #     endif
                          #  endif

                          COMPILER_DEBUG_CCFLAGS=""
                          COMPILER_GPROF_CCFLAGS=" -pg "
                          COMPILER_NON_OPT_CCFLAGS=""
                          COMPILER_OPT_CCFLAGS=" -O2 "
                          COMPILER_PROF_CCFLAGS=" -p "
                          COMPILER_SHARED_CCFLAGS=" -KPIC "
                          COMPILER_SPECIFIC_CCFLAGS=""
                          ;;
              * )         trace 3 Setting default CCFLAGS
                          COMPILER_ANSI_CCFLAGS=" -ansi "
                          COMPILER_DEBUG_CCFLAGS=""
                          COMPILER_GPROF_CCFLAGS=""
                          COMPILER_NON_OPT_CCFLAGS=""
                          COMPILER_OPT_CCFLAGS=" -O2 "
                          COMPILER_PROF_CCFLAGS=""
                          COMPILER_SHARED_CCFLAGS=""
                          COMPILER_SPECIFIC_CCFLAGS=""
                          ;;
             esac
          fi
          # Allow C++ compiler switches to be written to Config.QMake
          
          # Allow output of any user provided CCFLAGS
          AC_SUBST([CONFIGURE_CCFLAGS])
          # any user-provided CCFLAGS will be recorded in Config.QMake as QMAKE_CCFLAGS

          # Allow output of compiler specific settings

          # C++ standards related
          AC_SUBST([COMPILER_ANSI_CCFLAGS])
          AC_SUBST([COMPILER_CC98_CCFLAGS])
          AC_SUBST([COMPILER_CC03_CCFLAGS])
          AC_SUBST([COMPILER_CC11_CCFLAGS])
          AC_SUBST([COMPILER_CC14_CCFLAGS])

          AC_SUBST([COMPILER_DEBUG_CCFLAGS])
          AC_SUBST([COMPILER_GPROF_CCFLAGS])
          AC_SUBST([COMPILER_NON_OPT_CCFLAGS])
          AC_SUBST([COMPILER_OPT_CCFLAGS])
          AC_SUBST([COMPILER_PROF_CCFLAGS])
          AC_SUBST([COMPILER_SHARED_CCFLAGS])
          AC_SUBST([COMPILER_SPECIFIC_CCFLAGS])

          dnl Allow output of CUDA compiler specific settings
          dnl Note: These will be null if we do not have a GNU C++ compiler
          dnl       at that is a pre-requisite of CUDA support.
          AC_SUBST([NVCC_ANSI_NVCCFLAGS])
          AC_SUBST([NVCC_CC98_NVCCFLAGS])
          AC_SUBST([NVCC_CC03_NVCCFLAGS])
          AC_SUBST([NVCC_CC11_NVCCFLAGS])
          AC_SUBST([NVCC_CC14_NVCCFLAGS])
          AC_SUBST([NVCC_DEBUG_NVCCFLAGS])
          AC_SUBST([NVCC_GPROF_NVCCFLAGS])
          AC_SUBST([NVCC_NON_OPT_NVCCFLAGS])
          AC_SUBST([NVCC_OPT_NVCCFLAGS])
          AC_SUBST([NVCC_PROF_NVCCFLAGS])
          AC_SUBST([NVCC_SHARED_NVCCFLAGS])
          AC_SUBST([NVCC_SPECIFIC_NVCCFLAGS])
         ]
        )
