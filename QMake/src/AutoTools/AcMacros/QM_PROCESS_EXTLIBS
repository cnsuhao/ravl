dnl This file is part of QMake, Quick Make System
dnl Copyright (C) 2011-16, University of Surrey
dnl This code may be redistributed under the terms of the GNU General
dnl Public License (GPL). See the gpl.licence file for details or
dnl see http://www.gnu.org/copyleft/gpl.html
dnl
dnl file-header-ends-here



dnl QM_PROCESS_EXTLIBS
dnl
dnl Macro to check if the declared external library packages exist on the
dnl system. This will check for libraries specified via pkg-configure
dnl directly and also process virtual packages (packages that exist as a
dnl resource name dependant on several other packages to provide a short-cut
dnl for including all of the dependant libraries). This macro will also
dnl organise the check of those libraries requiring a compilation check (by
dnl calling the QM_CK_COMPILE_CK_LIB macro) and those requiring bespoke code
dnl to check for their existence (via the QM_CK_BESPOKE_CK_LIB macro).
dnl
dnl All of the libraries to be checked for by this macro must have previously
dnl been declared via one of the appropriate QM_DEFINE_... macros.
dnl
dnl No macro parameters
dnl
dnl Global variables used:
dnl
dnl   All variables listed with a <lib> in their name exist for each library
dnl   that has been declared (via a QM_DEFINE_EXTLIB_[CP]C) with the <lib>
dnl   being replaced by the resource name of the package. For example,
dnl   the OpenCV package will have variables named with_OpenCV_tstcd; 
dnl   with_OpenCV_hdr; use_OpenCV; etc. Similarly, libGTK2 has variables
dnl   use_libGTK2; with_GTK2_pkgconf; etc.
dnl
dnl       DBG                        Variable that holds the current trace
dnl                                  level as requested by the user. Requires
dnl                                  the inclusion of the debug function
dnl                                  "trace" in any code calling this macro.
dnl                                  A suitable trace function is defined in
dnl                                  the QMake AcMacros/QM_Debug_fn file.
dnl       LeftToDo                   List of the external RESOURCES that are
dnl                                  left to be processed.  Initially primed
dnl                                  (in this macro) from LibsToProcess, this
dnl                                  variable is updated (to remove the
dnl                                  quantified resource) when configure can
dnl                                  determine whether or not a resource is
dnl                                  available for use.
dnl       LibsToProcess              List of the external libs that need
dnl                                  processing. For QMake; this will be all
dnl                                  the declared libs ($KnownLibs). For a
dnl                                  project; this will be only the packages
dnl                                  that the user has configured on the
dnl                                  command line ($ConfiguredLibs).
dnl       PKG_CONFIG                 Standard substitution variable pointing
dnl                                  to the pkg-configure utility
dnl       RecentlyProcessed          Keeps track of the recently located libs.
dnl       SED                        Holds the name of the executable to carry
dnl                                  out stream editing. This will already
dnl                                  have been primed by a prior call to the
dnl                                  macro QM_LOCATE_KEY_TOOLS.
dnl       TRACE_INDENT               Variable used for indenting trace debug
dnl                                  messages (when DBG is set). The current
dnl                                  convention in this script is to employ
dnl                                  an indent of 5 spaces per level of 
dnl                                  nesting in the code i.e. set the var to
dnl                                  "     " for the first for loop, set it
dnl                                  to "          " for the second, etc.
dnl       with_<lib>_check           Flag specifying the type of test needed
dnl                                  to check for the existence of the
dnl                                  external library:
dnl                                    bespoke      - test for the external
dnl                                                   library has been written
dnl                                                   in bespoke code located
dnl                                                   within the appropriate
dnl                                                   section of the macro
dnl                                                   QM_CK_BESPOKE_CK_LIB.
dnl                                    compile      - test for the external
dnl                                                   library involves a test
dnl                                                   compilation to see if
dnl                                                   the library is available.
dnl                                    pkgconfig    - test for the external
dnl                                                   library using pkg-config.
dnl                                    virtual      - external library is a
dnl                                                   virtual set of libraries
dnl                                                   that is implicitly
dnl                                                   available if all of the
dnl                                                   precursor libraries are
dnl                                                   available.
dnl                                  For any test-type, if the user provides
dnl                                  a --with-<lib>-pkgconf setting, this will
dnl                                  automatically force the test-type to be
dnl                                  pkgconfig.
dnl       with_<lib>_tstcd           Code that will be used to test that the
dnl                                  external library is present and can be
dnl                                  linked against.
dnl       with_<lib>_hdr             List of header files to test the
dnl                                  existence of if testing for the lib's
dnl                                  presence via a compilation check.
dnl       with_<lib>_inc             Path (in pre-processor -I/x/y/z form) to
dnl                                  the library's headers. Variable may
dnl                                  actually include other, non-path related,
dnl                                  pre-processor settings.
dnl       with_<lib>_libpath         Path (in linker -L/x/y/z form) to the
dnl                                  location of the library files needed to
dnl                                  compile with the external library
dnl                                  package <lib>. Variable may actually
dnl                                  include other, non-path related, linker
dnl                                  settings.
dnl       with_<lib>_lnklibs         List of the library files (in -lXXXX
dnl                                  form) needed to compile with library
dnl                                  package <lib>. For library packages that
dnl                                  vary the names of the libraries required,
dnl                                  this may be a set of alternative lists
dnl                                  separated by a pipe symbol (|). As an
dnl                                  example, the Socket package offers the
dnl                                  setting " | -lsocket | -lsocket -lnsl "
dnl                                  as the socket() function may be available
dnl                                  in the default libraries (no additional
dnl                                  library is required - hence the leading
dnl                                  " | " setting, i.e. a null list); in the
dnl                                  socket library itself; or the socket
dnl                                  library may also depend on libnsl.
dnl       with_<lib>_pkgconf         Value of similarly named cmd-line switch
dnl                                  Specifies what name pkg-config will know
dnl                                  the library as. 
dnl       with_<lib>_prq             Space separated list of pre-requisites
dnl                                  of the external library package <lib>.
dnl                                  May be updated by this macro if any of
dnl                                  the library's pre-requisites have
dnl                                  pre-requisites themselves.
dnl       with_<lib>_virtual         Depreciated variable
dnl                                  * DO NOT USE IN CALLING/SUBSEQUENT CODE *
dnl                                  This variable has been superseded by the
dnl                                  with_<lib>_check variable (see above).
dnl                                  This variable is only provided to deliver
dnl                                  interim support for older code. It will
dnl                                  cease to function in future versions of 
dnl                                  QMake. If you are currently using this
dnl                                  variable in your code, please re-write to
dnl                                  test with_<lib>_check=virtual instead.
dnl                                  Formerly, this variable indicated that
dnl                                  the package <lib> was a virtual package.
dnl       <lib>_CFLAGS               Holds the CFLAGS required when compiling
dnl                                  with the external library <lib>. The
dnl                                  CFLAGS associated with the individual
dnl                                  FFMPEG libraries (FFMPEGCDEC_CFLAGS,
dnl                                  FFMPEGCONT_CFLAGS, etc.) may be upated
dnl                                  by this macro if the library is using
dnl                                  the old header layout (-DFFMPEG_OLD_HDR
dnl                                  will be appended to the existing value)
dnl       <lib>_LIBS                 Holds the link line settings needed to
dnl                                  link with the <lib> package. This info
dnl                                  is supplied as on the link line itself
dnl                                  i.e. library names are specified in -lX
dnl                                  form and the setting may include -Lpath
dnl                                  entries.
dnl       use_<lib>                  Flag specifying usage of the library.
dnl                                  Initially primed from the command line
dnl                                  settings, this will be updated to
dnl                                  reflect the availability of the external
dnl                                  library, <lib>.
dnl
dnl   The following are all interim variables used within this macro:
dnl
dnl    change_made; check; current_prereqs; existing; hdr; inc; lib;
dnl    lib_enablement; lnklibs; libpath; pkgconf; prereq; prql;
dnl    prql_enablement; testwith; to_add
dnl
AC_DEFUN([QM_PROCESS_EXTLIBS],
         [
          # Force default of compilation checks to use C
          AC_LANG([C])
          dnl# We have to do this as an AC_LANG call can cause checks made
          dnl# before it to be performed in the language it is setting.

          # If debugging, output what we've defined from the cmd-line
          if ( test X$DBG != X && test $DBG -ge 3 )
          then
             trace 3 Declared libraries
             for lib in $LibsToProcess
             do
                eval lib_enablement=\$use_${lib} 
                TRACE_INDENT="     "
                eval check=\$with_${lib}_check
                case $check in
                   'bespoke' | 'virtual' )
                                 eval prereq=\$with_${lib}_prq
                                 trace 3 "$lib:$check:$prereq:$lib_enablement"
                                 ;;
                   'pkgconfig' ) eval pkgconf=\$with_${lib}_pkgconf 
                                 trace 3 "$lib:$check:$pkgconf:$lib_enablement"
                                 ;;
                   'compile' )   eval testwith="\$with_${lib}_tstcd"
                                 eval prereq=\$with_${lib}_prq
                                 eval lnklibs=\$with_${lib}_lnklibs
                                 eval libpath=\$with_${lib}_libpath
                                 eval hdr=\$with_${lib}_hdr
                                 eval inc=\$with_${lib}_inc
                                 trace 3 "$lib:$check:$testwith:$prereq:$lnklibs:$libpath:$hdr:$inc:$lib_enablement"
                                 ;;
                   * )           trace 1 "Assert - Unrecognised test-type for $lib"
                                 ;;
                esac
             done
          fi

          # Expand the library's pre-requisites to include the pre-requisites
          # for the  pre-requisites, etc.
          #
          # First, we need to sanitise the pre-requisite lists: if we are
          # using pkg-config for a library, that will deliver the list of
          # libraries needed for that package; we do not therefore need to
          # consider any known pre-requisites.
          #
          # So.. nullify the pre-requisites of any external libraries that
          # are being specified via pkg-config
          #
          trace 2 Nullifying pre-requisites for pkg-config specified libraries
          for lib in $LibsToProcess
          do
             TRACE_INDENT="     "
             trace 6 Processing $lib
             eval check=\$with_${lib}_check
             if ( test x$check = xpkgconfig )
             then
                TRACE_INDENT="          "
                trace 6 Use of pkg-config identified
                eval prereq=\$with_${lib}_prq
                if ( test "x$prereq" != x )
                then
                   TRACE_INDENT="          "
                   trace 4 Nullifying pre-requisites of $lib
                   eval with_${lib}_prq=\"\"
                   TRACE_INDENT="               "
                   trace 6 Pre-requisites were $prereq
                   # We use a dependency on NVCC to highlight that a package
                   # is part of the CUDA suite, so we must not remove this
                   # information.
                   for prq in $prereq
                   do
                      if ( test $prq = NVCC )
                      then
                         # Restore the listing of dependency on NVCC
                         eval with_${lib}_prq=\"NVCC\"
                      fi
                   done
                fi
             fi
          done

          # Now we can expand the remaining pre-requisites lists.
          #
          # Method: For each library, add the pre-requisites of its direct
          # pre-requisites. Repeat this process until we make no further
          # changes.
          change_made=true
          trace 2 Propagate pre-requisites back through libraries
          while $change_made
          do
             TRACE_INDENT="     "
             trace 2 Iterating...
             change_made=false
             for lib in $LibsToProcess
             do
                TRACE_INDENT="          "
                trace 4 Processing library $lib...
                eval prereq=\$with_${lib}_prq
                for prql in $prereq
                do
                   TRACE_INDENT="               "
                   trace 4 Adding pre-requisites of $prql
                   eval prereqs_prql=\$with_${prql}_prq
                   for to_add in $prereqs_prql
                   do
                      if ( test $to_add != $lib )
                      then
                         eval current_prereqs=\$with_${lib}_prq
                         existing=`$EXPR " \$current_prereqs " : ".* \(\$to_add\) .*"`
                         if ( test X$existing != X )
                         then
                            TRACE_INDENT="                    "
                            trace 6 $to_add already listed
                         else
                            current_prereqs=$current_prereqs" "$to_add
                            AS_VAR_SET(with_${lib}_prq, [$current_prereqs])
                            change_made=true
                            TRACE_INDENT="                    "
                            trace 4 $to_add
                         fi
                      else
                         TRACE_INDENT="                    "
                         trace 6 Not adding self-reference
                      fi
                   done
                done
                if ( test X$DBG != X && test $DBG -ge 6 )
                then
                   TRACE_INDENT="               "
                   trace 6 Pre-requisites now:
                   eval current_prereqs=\$with_${lib}_prq
                   TRACE_INDENT="                    "
                   trace 6 $current_prereqs
                fi
             done
          done

          # Check that the CMD-line switches provided by the user do not
          # disable libraries that are pre-requisites of enabled libraries
          #
          # Method: Consider each library in turn and look at its direct
          # pre-requisites. Repeat the process to propagate up any blockages.
          # When we change nothing on a pass, we should be finished.
          # Repeat pass logic is a hangover from an earlier implementation,
          # it should now not be needed (as we've moved to full expansion of
          # the pre-requisites where, before we did not). It doesn't cost
          # much so code left in "just because..."
          change_made=true
          trace 2 Find blockages introduced from the cmd-line 
          while $change_made
          do
             TRACE_INDENT="     "
             trace 2 Iterating...
             change_made=false
             for lib in $LibsToProcess
             do
                eval lib_enablement=\$use_${lib}
                case $lib_enablement in
                'blocked' | 'no' )
                          TRACE_INDENT="          "
                          trace 6 Library $lib disabled
                          ;;
                'check' ) eval prereq=\$with_${lib}_prq
                          for prql in $prereq
                          do
                             TRACE_INDENT="          "
                             trace 4 Prereq of Check lib $lib - $prql
                             eval prql_enablement=\$use_${prql}
                             case $prql_enablement in
                             'blocked' | 'no' )   AS_VAR_SET(use_${lib}, [blocked])
                                                  TRACE_INDENT="               "
                                                  trace 5 Causes a block
                                                  change_made=true
                                                  ;;
                             esac
                          done
                          ;;
                'needed' )
                          eval prereq=\$with_${lib}_prq
                          for prql in $prereq
                          do
                             TRACE_INDENT="          "
                             trace 4 Prereq of Needed lib $lib - $prql
                             eval prql_enablement=\$use_${prql}
                             case $prql_enablement in
                             'blocked' )          AC_MSG_FAILURE([Library $lib is required by a specifically enabled library but a specifically disabled library prevents its pre-requisite library $prql from being used])
                                        ;;
                             'check' )            AS_VAR_SET(use_${prql}, [needed])
                                                  TRACE_INDENT="               "
                                                  trace 5 Now needed
                                                  change_made=true
                                                  ;;
                             'no' )               AC_MSG_FAILURE([Specifically disabled library $prql is required by a specifically enabled library])
                                        ;;
                             esac
                          done
                          ;;
                'yes' )   eval prereq=\$with_${lib}_prq
                          for prql in $prereq
                          do
                             TRACE_INDENT="          "
                             trace 4 Prereq of Wanted lib $lib - $prql
                             eval prql_enablement=\$use_${prql}
                             case $prql_enablement in
                             'blocked' )          AC_MSG_FAILURE([Specifically enabled library $lib requires at least one specifically disabled library])
                                                  ;;
                             'check' )            AS_VAR_SET(use_${prql}, [needed])
                                                  TRACE_INDENT="               "
                                                  trace 5 Now needed
                                                  change_made=true
                                                  ;;
                             'no' )               AC_MSG_FAILURE([Library $prql specifically disabled but required for specifically enabled library $lib])
                                                  ;;
                             esac
                          done
                          ;;
                esac

                if ( test X$DBG != X && test $DBG -ge 3 )
                then
                   eval lib_enablement=\$use_${lib}
                   TRACE_INDENT="          "
                   eval check=\$with_${lib}_check
                   case $check in
                      'bespoke' | 'virtual' )
                                    eval prereq=\$with_${lib}_prq
                                    trace 3 "$lib:$check:$prereq:$lib_enablement"
                                    ;;
                      'pkgconfig' ) eval pkgconf=\$with_${lib}_pkgconf
                                    trace 3 "$lib:$check:$pkgconf:$lib_enablement"
                                    ;;
                      'compile' )   eval testwith="\$with_${lib}_tstcd"
                                    eval prereq=\$with_${lib}_prq
                                    eval lnklibs=\$with_${lib}_lnklibs
                                    eval libpath=\$with_${lib}_libpath
                                    eval hdr=\$with_${lib}_hdr
                                    eval inc=\$with_${lib}_inc
                                    trace 3 "$lib:$check:$testwith:$prereq:$lnklibs:$libpath:$hdr:$inc:$lib_enablement"
                                    ;;
                      * )           trace 1 "Assert - Unusual test-type for $lib"
                                    ;;
                   esac
                fi
             done
          done



          # Now start to check for availability of libraries ...
 
          # Maintain a list of the libraries we have left to check..
          #
          LeftToDo="$LibsToProcess"

          # First test for the pkg-config specified libraries and virtual
          # packages. Testing these before testing for those specified for
          # testing via a compilation test or via bespoke code allows the
          # latter to use a pkg-config library or virtual package as a
          # pre-requisite.
          #
          trace 2 Test availability of pkg-config specified libraries and virtual packages
          for lib in $LibsToProcess
          do
            eval check=\$with_${lib}_check
            if ( test x$check = xpkgconfig )
            then
               eval lib_enablement=\$use_${lib}
               eval pkgconf=\$with_${lib}_pkgconf
               case $lib_enablement in
                  'check' )    AC_MSG_CHECKING(pkg-config for $lib)
                               PKG_CHECK_EXISTS([$pkgconf],
                                                [AS_VAR_SET([use_${lib}],[present])
                                                 AS_VAR_SET([${lib}_CFLAGS],
                                                            [`$PKG_CONFIG --cflags $pkgconf 2>/dev/null `]
                                                           )
                                                 AS_VAR_SET([${lib}_LIBS],
                                                            [`$PKG_CONFIG --libs $pkgconf 2>/dev/null`]
                                                           )
                                                 AC_MSG_RESULT([yes])
                                                ],
                                                [AS_VAR_SET([use_${lib}],[missing])
                                                 AC_MSG_RESULT([no])
                                                ]
                                               )
                               ;;
                  'needed' )   AC_MSG_CHECKING(pkg-config for $lib)
                               PKG_CHECK_EXISTS([$pkgconf],
                                                [AS_VAR_SET([use_${lib}],[present])
                                                 AS_VAR_SET([${lib}_CFLAGS],
                                                            [`$PKG_CONFIG --cflags $pkgconf 2>/dev/null `]
                                                           )
                                                 AS_VAR_SET([${lib}_LIBS],
                                                            [`$PKG_CONFIG --libs $pkgconf 2>/dev/null`]
                                                           )
                                                 AC_MSG_RESULT([yes])
                                                ],
                                                [AC_MSG_FAILURE([Library $lib is unavailable and a pre-requisite of a selected library])
                                                ]
                                               )
                               ;;
                  'yes' )      AC_MSG_CHECKING(pkg-config for $lib)
                               PKG_CHECK_EXISTS([$pkgconf],
                                                [AS_VAR_SET([use_${lib}],[present])
                                                 AS_VAR_SET([${lib}_CFLAGS],
                                                            [`$PKG_CONFIG --cflags $pkgconf 2>/dev/null `]
                                                           )
                                                 AS_VAR_SET([${lib}_LIBS],
                                                            [`$PKG_CONFIG --libs $pkgconf 2>/dev/null`]
                                                           )
                                                 AC_MSG_RESULT([yes])
                                                ],
                                                [AC_MSG_FAILURE([Required library $lib is unavailable])
                                                ]
                                               )
                               ;;
                  'no' )       ;;
                  'blocked' )  ;;
                  * )          trace 1 "Assert - Should not fall through here"
                               ;;
               esac
               LeftToDo=`echo " $LeftToDo " | $SED "s/ $lib / /"`
               eval lib_enablement=\$use_${lib}
               TRACE_INDENT="     "
               trace 3 "$lib:pkgconfig:$pkgconf:$lib_enablement"
            else
               if ( test X$check = Xvirtual )
               then
                  # Virtual package
                  eval lib_enablement=\$use_${lib}
                  case $lib_enablement in
                     'check' | 'needed' | 'yes' )
                                  lib_enablement=present
                                  AS_VAR_SET([use_${lib}], [present])
                                  # Assume present if wanted (as something
                                  # virtual can hardly be missing) but note
                                  # that absence of pre-requisites can later
                                  # cause the library to become regarded as
                                  # missing.
                                  ;;
                     'no' )       ;;
                     'blocked' )  ;;
                     * )          trace 1 "Unrecognised status ($lib_enablement) for pkgconfig package $lib"
                                  ;;
                  esac
                  eval prereq="\$with_${lib}_prq"
                  TRACE_INDENT="     "
                  trace 3 $lib:virtual:$prereq:$lib_enablement
                  LeftToDo=`echo " $LeftToDo " | $SED "s/ $lib / /"`
                else
                  if ( test X$check != Xcompile && test X$check != Xbespoke )
                  then
                    trace 1 "Assert - Unrecognised check type ($check) for $lib"
                  fi
               fi
            fi
          done


          # Sanitise LeftToDo (drop duplicated and lead/trailing spaces)
          LeftToDo=`echo " $LeftToDo " | $SED "s/  */ /g;s/^ //;s/ $//"`


          # Finally, we can now test the availability of the libraries that
          # need a compilation check or bespoke code to assess their
          # availability.
          #
          trace 2 Test availability of compilation-check or bespoke external libraries

          # These checks need to take into account packages requiring other
          # packages that are not currently assessed as to their availability.
          # To achieve this, we belay checking any library that does not
          # currently have all of its pre-requisites available. We therefore
          # have to iterate over the list of the remaining libraries to check
          # until we either have no more to process or until we have not
          # updated the status of any package on the current iteration.
          #
          RecentlyProcessed="Force first iteration (if someting in LeftToDo)"
          while ( test "x$RecentlyProcessed" != x -a "x$LeftToDo" != x )
          do
             RecentlyProcessed=""
             for lib in $LeftToDo
             do
                eval check=\$with_${lib}_check
                case $check in
                   'compile' )   QM_CK_COMPILE_CK_LIB([$lib])
                                 ;;
                   'bespoke' )   QM_CK_BESPOKE_CK_LIB([$lib])
                                 ;;
                   'pkgconfig' | 'virtual' )
                                 # Should have already processed all virtual
                                 # and pkg-config packages. Generate suitable
                                 # error
                                 eval lib_enablement=\$use_${lib}
                                 case $lib_enablement in
                                    'yes' )      AC_MSG_FAILURE([Should not be assessing the availability of required $check library $lib at this point])
                                                 ;;
                                    'needed' )   AC_MSG_FAILURE([Should not be assessing the availability of pre-requisite $check library $lib at this point])
                                                 ;;
                                    * )          AC_MSG_WARN([Should not be assessing the availability of $check library $lib at this point])
                                                 AC_MSG_WARN([Will disable $lib])
                                                 eval use_${lib}=missing
                                                 LeftToDo=`echo " $LeftToDo " | $SED "s/ $lib / /"`
                                                 RecentlyProcessed="$RecentlyProcessed $lib"
                                                 ;;
                                 esac
                                 ;;
                   * )           # Unrecognised test type, raise suitable error
                                 eval lib_enablement=\$use_${lib}
                                 case $lib_enablement in
                                    'yes'    )   AC_MSG_FAILURE([Cannot determine test required for requested library $lib])
                                                 ;;
                                    'needed' )   AC_MSG_FAILURE([Cannot determine test required for pre-requisite library $lib])
                                                 ;;
                                    * )          AC_MSG_WARN([Cannot determine test required for library $lib])
                                                 AC_MSG_WARN([Will disable $lib])
                                                 eval use_${lib}=missing
                                                 LeftToDo=`echo " $LeftToDo " | $SED "s/ $lib / /"`
                                                 RecentlyProcessed="$RecentlyProcessed $lib"
                                                 ;;
                                 esac
                                 ;;
                esac
             done
          done

          if ( test "x$LeftToDo" != x )
          then
             AC_MSG_FAILURE([Cannot process libraries @<:@$LeftToDo@:>@])
          fi





          # Now propagate which libraries are blocked by their pre-requisites
          # not being present. To do this, repeatedly pass until we get no
          # more alterations. As per the code for finding blockages on the
          # command line (see above), the repeated passes should no longer be
          # required. However, "if it ain't broke...."
          #
          # Note: We do not need to generate any errors here when we find a
          # library that is blocked by missing pre-requisites. This is because
          # any such errors will  have been generated (where necessary) in
          # the code checking for the individual libraries. (The error is
          # generated when the pre-requisite library is found to be missing as
          # it knows it is required for another library)
          #
          # This section is really just for virtual packages, those packages
          # specified by pkg-config have no pre-requisites; and those libraries
          # for which we have performed a compilation test will have failed at
          # that stage if any pre-requisites are missing.
          #
          trace 2 Block libraries dependent on missing libraries
          change_made=true
          while $change_made
          do
             TRACE_INDENT="     "
             trace 2 Iterating...
             change_made=false
             for lib in $LibsToProcess
             do
                eval lib_enablement=\$use_${lib}
                case $lib_enablement in
                'blocked' | 'missing' | 'no' )
                             TRACE_INDENT="          "
                             trace 6 Library $lib not required
                             ;;
                'check' | 'yes' )
                             trace 1 Assertion: --with-${lib} should not equal ${lib_enablement} here!
                             ;;
                'present' )
                             eval prereq=\$with_${lib}_prq
                             for prql in $prereq
                             do
                                TRACE_INDENT="          "
                                trace 4 Testing availability of pre-req $prql of $lib
                                eval prql_enablement=\$use_${prql}
                                case $prql_enablement in
                                'blocked' | 'missing' | 'no' )
                                              AS_VAR_SET(use_${lib}, [blocked])
                                              TRACE_INDENT="               "
                                              trace 5 Causes a block
                                              change_made=true
                                              ;;
                                'check' | 'yes' )
                                              trace 1 Assertion: --with-${prql} should not equal ${prql_enablement} here!
                                              ;;
                                'present' )
                                              TRACE_INDENT="               "
                                              trace 6 Test OK
                                              ;;
                                esac
                             done
                             ;;
                esac
                if ( test X$DBG != X && test $DBG -ge 3 )
                then
                   eval lib_enablement=\$use_${lib}
                   TRACE_INDENT="          "
                   eval check=\$with_${lib}_check
                   case $check in
                      'bespoke' | 'virtual' )
                                    eval prereq=\$with_${lib}_prq
                                    trace 3 "$lib:$check:$prereq:$lib_enablement"
                                    ;;
                      'pkgconfig' ) eval pkgconf=\$with_${lib}_pkgconf
                                    trace 3 "$lib:$check:$pkgconf:$lib_enablement"
                                    ;;
                      'compile' )   eval testwith="\$with_${lib}_tstcd"
                                    eval prereq=\$with_${lib}_prq
                                    eval lnklibs=\$with_${lib}_lnklibs
                                    eval libpath=\$with_${lib}_libpath
                                    eval hdr=\$with_${lib}_hdr
                                    eval inc=\$with_${lib}_inc
                                    trace 3 "$lib:$check:$testwith:$prereq:$lnklibs:$libpath:$hdr:$inc:$lib_enablement"
                                    ;;
                      * )           trace 1 "Assert - Incorrect test-type for $lib"
                                    ;;
                   esac
                fi
             done
          done
         ]
        )



